deprecated API,replacement API,extracted_text,PROPOSED_REPLACEMENT
pandas.SparseSeries,pandas.Series,"{'            _sparse_msg.format(cls=""SparseSeries"", new=""Series""', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.SparseSeries(..', '""SparseTimeSeries is deprecated. Please use SparseSeries"",                      FutureWarning, stacklevel=2', '""SparseTimeSeries is deprecated. Please use ""                      ""SparseSeries"", FutureWarning, stacklevel=2', '""SparseSeries.block is deprecated."", FutureWarning,                      stacklevel=2', '""SparseSeries.block is deprecated."", FutureWarning, stacklevel=2', '            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.SparseSeries(..'}","{'sparseseries,', 'the'}"
pandas.SparseDataFrame,pandas.DataFrame,"{'            _sparse_msg.format(cls=""SparseDataFrame"", new=""DataFrame""'}","{'_sparse_msg.format(cls=sparsedataframe,'}"
pandas.Series.ftype,dtype(),"{'            ""get_ftype_counts is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '            ""Series.ftype is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '            ""DataFrame.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use DataFrame.dtypes instead."",            FutureWarning,            stacklevel=2,        ', '            ""Series.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '""get_ftype_counts is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2'}","{'dataframe.dtypes', 'series.dtype'}"
pandas.Series.ftypes,dtypes(),"{'            ""Series.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '            ""DataFrame.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use DataFrame.dtypes instead."",            FutureWarning,            stacklevel=2,        '}","{'dataframe.dtypes', 'series.dtype'}"
pandas.DataFrame.ftypes,dtypes(),"{'            ""Series.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '            ""DataFrame.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use DataFrame.dtypes instead."",            FutureWarning,            stacklevel=2,        '}","{'dataframe.dtypes', 'series.dtype'}"
pandas.DataFrame.get_dtype_counts,pandas.DataFrame.dtypes.value_counts,"{'            ""`get_dtype_counts` has been deprecated and will be ""            ""removed in a future version. For DataFrames use ""            ""`.dtypes.value_counts"",            FutureWarning,            stacklevel=2,        '}","{'.dtypes.value_counts,'}"
pandas.MultiIndex.labels,pandas.MultiIndex.codes,"{'("".labels was deprecated in version 0.24.0. ""                       ""Use .codes instead.""', '            ("".labels was deprecated in version 0.24.0. "" ""Use .codes instead.""', '("".set_labels was deprecated in version 0.24.0. ""                       ""Use .set_codes instead.""', '            (                "".set_labels was deprecated in version 0.24.0. ""                ""Use .set_codes instead.""            '}","{'.codes', '.set_codes'}"
pandas.MultiIndex.set_labels,pandas.MultiIndex.set_codes,"{'""setting labels directly"",                             partial(set_labels, inplace=True,                                     verify_integrity=True', '("".set_labels was deprecated in version 0.24.0. ""                       ""Use .set_codes instead.""', '            (                "".set_labels was deprecated in version 0.24.0. ""                ""Use .set_codes instead.""            '}",{'.set_codes'}
pandas.Series.ptp,numpy.ptp,"{'""iget(i', '""irow(i', '""TimeSeries is deprecated. Please use Series"",                      FutureWarning, stacklevel=2', '""sort is deprecated, use sort_values(inplace=True', '(""na_last is deprecated. Please use na_position instead""', '""iget_value(i', '""nanRep is deprecated, use na_rep"", FutureWarning', '""Series.reset_index with inplace=True will ""                              ""return None from pandas 0.11 onward"",                              FutureWarning', 'msg, FutureWarning, stacklevel=2', '""Series.rename with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""Series.replace with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""order is deprecated, use sort_values(...', '""\'timeRule\' and \'offset\' parameters are deprecated,""                      "" please use \'freq\' instead"",                      FutureWarning', '""Series.fillna with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning'}",set()
pandas.Series.compress,pandas.Series[condition],"{'""TimeSeries is deprecated. Please use Series"",                      FutureWarning, stacklevel=2', '            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.Series(..', '""The signature of `Series.to_csv` was aligned ""                          ""to that of `DataFrame.to_csv`, and argument ""                          ""\'header\' will change its default value from False ""                          ""to True: please pass an explicit value to suppress ""                          ""this warning."", FutureWarning,                          stacklevel=2', '(""na_last is deprecated. Please use na_position instead""', '        ""argmin"",        idxmin,        ""0.21.0"",        msg=dedent(            """"""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '        ""remove_na is deprecated and is a private "" ""function. Do not use."",        FutureWarning,        stacklevel=2,    ', '            ""Series.to_sparse is deprecated and will be removed "" ""in a future version"",            FutureWarning,            stacklevel=2,        ', '""The signature of `Series.to_csv` was aligned ""                          ""to that of `DataFrame.to_csv`, and argument ""                          ""\'path\' will be renamed to \'path_or_buf\'."",                          FutureWarning, stacklevel=2', '                ""The signature of `Series.to_csv` was aligned ""                ""to that of `DataFrame.to_csv`, and argument ""                ""\'header\' will change its default value from False ""                ""to True: please pass an explicit value to suppress ""                ""this warning."",                FutureWarning,                stacklevel=2,            ', '""order is deprecated, use sort_values(...', '            ""`real` has be deprecated and will be removed in a "" ""future verison"",            FutureWarning,            stacklevel=2,        ', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use \'.to_numpy\' or \'.array\' instead."",            FutureWarning,            stacklevel=2,        ', '            ""`imag` has be deprecated and will be removed in a "" ""future verison"",            FutureWarning,            stacklevel=2,        ', '""sort is deprecated, use sort_values(inplace=True', '""iget_value(i', '""\'asobject\' is deprecated. Use \'astype(object', '""get_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2', 'msg, FutureWarning, stacklevel=2', '\'argmin\', idxmin,                       msg=""\'argmin\' is deprecated. Use \'idxmin\' instead. ""                           ""The behavior of \'argmin\' will be corrected to ""                           ""return the positional minimum in the future. ""                           ""Use \'series.values.argmin\' to get the position of ""                           ""the minimum now.""', '""The signature of `Series.to_csv` was aligned ""                              ""to that of `DataFrame.to_csv`. Note that the ""                              ""order of arguments changed, and the new one ""                              ""has \'sep\' in first place, for which \\""{}\\"" is ""                              ""not a valid value. The old order will cease to ""                              ""be supported in a future version. Please refer ""                              ""to the documentation for `DataFrame.to_csv` ""                              ""when updating your function ""                              ""calls."".format(maybe_sep', '""set_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2', '            ""Series.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '            ""\'asobject\' is deprecated. Use \'astype(object', 'msg.format(ufunc', '""irow(i', '""remove_na is deprecated and is a private ""                  ""function. Do not use."", FutureWarning, stacklevel=2', '            ""`real` is deprecated and will be removed in a future version. ""            ""To eliminate this warning for a Series `ser`, use ""            ""`np.real(ser.to_numpy', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '""sortlevel is deprecated, use sort_index(level=...', '            ""Method .valid will be removed in a future version. ""            ""Use .dropna instead."",            FutureWarning,            stacklevel=2,        ', '                ""The signature of `Series.to_csv` was aligned ""                ""to that of `DataFrame.to_csv`, and argument ""                ""\'path\' will be renamed to \'path_or_buf\'."",                FutureWarning,                stacklevel=2,            ', '""is_time_series is deprecated. Please use ""                      ""Series.index.is_all_dates"", FutureWarning, stacklevel=2', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '            ""set_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '""Method .valid will be removed in a future version. ""                      ""Use .dropna instead."", FutureWarning, stacklevel=2', 'msg, FutureWarning, stacklevel=3', '                    ""The signature of `Series.to_csv` was aligned ""                    ""to that of `DataFrame.to_csv`. Note that the ""                    ""order of arguments changed, and the new one ""                    ""has \'sep\' in first place, for which \\""{}\\"" is ""                    ""not a valid value. The old order will cease to ""                    ""be supported in a future version. Please refer ""                    ""to the documentation for `DataFrame.to_csv` ""                    ""when updating your function ""                    ""calls."".format(maybe_sep', '        ""argmax"",        idxmax,        ""0.21.0"",        msg=dedent(            """"""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '            ""`imag` is deprecated and will be removed in a future version. ""            ""To eliminate this warning for a Series `ser`, use ""            ""`np.imag(ser.to_numpy', '""iget(i', '            ""Series.ftype is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '""reshape is deprecated and will raise ""                      ""in a subsequent release. Please use ""                      "".values.reshape(...', '\'argmax\', idxmax,                       msg=""\'argmax\' is deprecated. Use \'idxmax\' instead. ""                           ""The behavior of \'argmax\' will be corrected to ""                           ""return the positional maximum in the future. ""                           ""Use \'series.values.argmax\' to get the position of ""                           ""the maximum now.""', '            ""get_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.Series(..', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""\\        \'argmin\' is deprecated, use \'idxmin\' instead. The behavior of \'argmin\'        will be corrected to return the positional minimum in the future.        Use \'series.values.argmin\' to get the position of the minimum now.""""""', '            ""`put` has been deprecated and will be removed in a"" ""future version."",            FutureWarning,            stacklevel=2,        ', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""\\        \'argmax\' is deprecated, use \'idxmax\' instead. The behavior of \'argmax\'        will be corrected to return the positional maximum in the future.        Use \'series.values.argmax\' to get the position of the maximum now.""""""'}",set()
pandas.api.types.is_period,pandas.api.types.is_period_dtype,"{'        ""\'is_period\' is deprecated and will be removed in a future ""        ""version.  Use \'is_period_dtype\' or is_period_arraylike\' ""        ""instead."",        FutureWarning,        stacklevel=2,    ', '""\'is_period\' is deprecated and will be removed in a future ""                  ""version.  Use \'is_period_dtype\' or is_period_arraylike\' ""                  ""instead."", FutureWarning, stacklevel=2'}","{""'is_period_dtype' or is_period_arraylike'""}"
pandas.api.types.is_datetimetz,pandas.api.types.is_datetime64tz,"{'        ""\'is_datetimetz\' is deprecated and will be removed in a ""        ""future version.  Use \'is_datetime64tz_dtype\' instead."",        FutureWarning,        stacklevel=2,    ', '""\'is_datetimetz\' is deprecated and will be removed in a ""                  ""future version.  Use \'is_datetime64tz_dtype\' instead."",                  FutureWarning, stacklevel=2'}","{""'is_datetime64tz_dtype'""}"
pandas.Series.nonzero,to_numpy().nonzero(),"{'""TimeSeries is deprecated. Please use Series"",                      FutureWarning, stacklevel=2', '            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.Series(..', '""The signature of `Series.to_csv` was aligned ""                          ""to that of `DataFrame.to_csv`, and argument ""                          ""\'header\' will change its default value from False ""                          ""to True: please pass an explicit value to suppress ""                          ""this warning."", FutureWarning,                          stacklevel=2', '(""na_last is deprecated. Please use na_position instead""', '""nanRep is deprecated, use na_rep"", FutureWarning', '        ""argmin"",        idxmin,        ""0.21.0"",        msg=dedent(            """"""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '        ""remove_na is deprecated and is a private "" ""function. Do not use."",        FutureWarning,        stacklevel=2,    ', '            ""Series.to_sparse is deprecated and will be removed "" ""in a future version"",            FutureWarning,            stacklevel=2,        ', '""The signature of `Series.to_csv` was aligned ""                          ""to that of `DataFrame.to_csv`, and argument ""                          ""\'path\' will be renamed to \'path_or_buf\'."",                          FutureWarning, stacklevel=2', '                ""The signature of `Series.to_csv` was aligned ""                ""to that of `DataFrame.to_csv`, and argument ""                ""\'header\' will change its default value from False ""                ""to True: please pass an explicit value to suppress ""                ""this warning."",                FutureWarning,                stacklevel=2,            ', '""order is deprecated, use sort_values(...', '            ""`real` has be deprecated and will be removed in a "" ""future verison"",            FutureWarning,            stacklevel=2,        ', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use \'.to_numpy\' or \'.array\' instead."",            FutureWarning,            stacklevel=2,        ', '            ""`imag` has be deprecated and will be removed in a "" ""future verison"",            FutureWarning,            stacklevel=2,        ', 'msg, PerformanceWarning, stacklevel=2', '""sort is deprecated, use sort_values(inplace=True', '""iget_value(i', '""\'asobject\' is deprecated. Use \'astype(object', '""get_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2', '                ""Concatenating sparse arrays with multiple fill ""                f""values: \'{fill_values}\'. Picking the first and ""                ""converting the rest."",                PerformanceWarning,                stacklevel=6,            ', 'msg, FutureWarning, stacklevel=2', '\'argmin\', idxmin,                       msg=""\'argmin\' is deprecated. Use \'idxmin\' instead. ""                           ""The behavior of \'argmin\' will be corrected to ""                           ""return the positional minimum in the future. ""                           ""Use \'series.values.argmin\' to get the position of ""                           ""the minimum now.""', '""The signature of `Series.to_csv` was aligned ""                              ""to that of `DataFrame.to_csv`. Note that the ""                              ""order of arguments changed, and the new one ""                              ""has \'sep\' in first place, for which \\""{}\\"" is ""                              ""not a valid value. The old order will cease to ""                              ""be supported in a future version. Please refer ""                              ""to the documentation for `DataFrame.to_csv` ""                              ""when updating your function ""                              ""calls."".format(maybe_sep', '""set_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2', '            ""Series.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', '            ""\'asobject\' is deprecated. Use \'astype(object', 'msg.format(ufunc', '                ""Concatenating sparse arrays with multiple fill ""                ""values: \'{}\'. Picking the first and ""                ""converting the rest."".format(fill_values', '""irow(i', '""remove_na is deprecated and is a private ""                  ""function. Do not use."", FutureWarning, stacklevel=2', '                ""The index argument has been deprecated and will be ""                ""removed in a future version. Use a function like np.full ""                ""to construct an array with the desired repeats of the ""                ""scalar value instead.\\n\\n"",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""`real` is deprecated and will be removed in a future version. ""            ""To eliminate this warning for a Series `ser`, use ""            ""`np.real(ser.to_numpy', '""Concatenating sparse arrays with multiple fill ""                          ""values: \'{}\'. Picking the first and ""                          ""converting the rest."".format(fill_values', '                        f""Creating SparseArray from {data.dtype} data ""                        ""loses timezone information.  Cast to object before ""                        ""sparse to retain timezone information."",                        UserWarning,                        stacklevel=2,                    ', '""sortlevel is deprecated, use sort_index(level=...', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '            ""Method .valid will be removed in a future version. ""            ""Use .dropna instead."",            FutureWarning,            stacklevel=2,        ', '                ""The signature of `Series.to_csv` was aligned ""                ""to that of `DataFrame.to_csv`, and argument ""                ""\'path\' will be renamed to \'path_or_buf\'."",                FutureWarning,                stacklevel=2,            ', '""is_time_series is deprecated. Please use ""                      ""Series.index.is_all_dates"", FutureWarning, stacklevel=2', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '            ""set_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '""Method .valid will be removed in a future version. ""                      ""Use .dropna instead."", FutureWarning, stacklevel=2', 'msg, PerformanceWarning, stacklevel=find_stack_level', 'msg, FutureWarning, stacklevel=3', '                    ""The signature of `Series.to_csv` was aligned ""                    ""to that of `DataFrame.to_csv`. Note that the ""                    ""order of arguments changed, and the new one ""                    ""has \'sep\' in first place, for which \\""{}\\"" is ""                    ""not a valid value. The old order will cease to ""                    ""be supported in a future version. Please refer ""                    ""to the documentation for `DataFrame.to_csv` ""                    ""when updating your function ""                    ""calls."".format(maybe_sep', '        ""argmax"",        idxmax,        ""0.21.0"",        msg=dedent(            """"""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '            ""`imag` is deprecated and will be removed in a future version. ""            ""To eliminate this warning for a Series `ser`, use ""            ""`np.imag(ser.to_numpy', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use the \'to_dense\' method instead."",            FutureWarning,            stacklevel=2,        ', '""iget(i', '                        f""Creating SparseArray from {data.dtype} data ""                        ""loses timezone information. Cast to object before ""                        ""sparse to retain timezone information."",                        UserWarning,                        stacklevel=find_stack_level,                    ', '            ""Series.ftype is deprecated and will ""            ""be removed in a future version. ""            ""Use Series.dtype instead."",            FutureWarning,            stacklevel=2,        ', 'msg, PerformanceWarning', '""reshape is deprecated and will raise ""                      ""in a subsequent release. Please use ""                      "".values.reshape(...', '\'argmax\', idxmax,                       msg=""\'argmax\' is deprecated. Use \'idxmax\' instead. ""                           ""The behavior of \'argmax\' will be corrected to ""                           ""return the positional maximum in the future. ""                           ""Use \'series.values.argmax\' to get the position of ""                           ""the maximum now.""', '            ""get_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.Series(..', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""\\        \'argmin\' is deprecated, use \'idxmin\' instead. The behavior of \'argmin\'        will be corrected to return the positional minimum in the future.        Use \'series.values.argmin\' to get the position of the minimum now.""""""', '            ""`put` has been deprecated and will be removed in a"" ""future version."",            FutureWarning,            stacklevel=2,        ', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""\\        \'argmax\' is deprecated, use \'idxmax\' instead. The behavior of \'argmax\'        will be corrected to return the positional maximum in the future.        Use \'series.values.argmax\' to get the position of the maximum now.""""""'}",set()
pandas.Series.clip_lower,pandas.Series.clip,"{""'clip_lower(threshold"", '            ""clip_lower(threshold'}",set()
pandas.Series.clip_upper,pandas.Series.clip,"{""'clip_upper(threshold"", '            ""clip_upper(threshold'}",set()
pandas.DataFrame.clip_lower,pandas.DataFrame.clip,"{""'clip_lower(threshold"", '            ""clip_lower(threshold'}",set()
pandas.DataFrame.clip_upper,pandas.DataFrame.clip,"{""'clip_upper(threshold"", '            ""clip_upper(threshold'}",set()
pandas.Series.from_array,pandas.Series,"{'            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.Series(..', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.SparseSeries(..', '""Categorical.from_array is deprecated, use Categorical instead"",             FutureWarning, stacklevel=2', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.Series(..', '            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.SparseSeries(..'}",{'categorical'}
pandas.SparseSeries.from_array,pandas.Series,"{'            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.Series(..', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.SparseSeries(..', '""Categorical.from_array is deprecated, use Categorical instead"",             FutureWarning, stacklevel=2', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.Series(..', '            ""\'from_array\' is deprecated and will be removed in a ""            ""future version. Please use the pd.SparseSeries(..'}",{'categorical'}
pandas.Series.valid,pandas.Series.dropna,"{'            ""Method .valid will be removed in a future version. ""            ""Use .dropna instead."",            FutureWarning,            stacklevel=2,        ', '""Method .valid will be removed in a future version. ""                      ""Use .dropna instead."", FutureWarning, stacklevel=2', '""The signature of `Series.to_csv` was aligned ""                              ""to that of `DataFrame.to_csv`. Note that the ""                              ""order of arguments changed, and the new one ""                              ""has \'sep\' in first place, for which \\""{}\\"" is ""                              ""not a valid value. The old order will cease to ""                              ""be supported in a future version. Please refer ""                              ""to the documentation for `DataFrame.to_csv` ""                              ""when updating your function ""                              ""calls."".format(maybe_sep', '                    ""The signature of `Series.to_csv` was aligned ""                    ""to that of `DataFrame.to_csv`. Note that the ""                    ""order of arguments changed, and the new one ""                    ""has \'sep\' in first place, for which \\""{}\\"" is ""                    ""not a valid value. The old order will cease to ""                    ""be supported in a future version. Please refer ""                    ""to the documentation for `DataFrame.to_csv` ""                    ""when updating your function ""                    ""calls."".format(maybe_sep', '            ""validate is deprecated and will be removed in a future version."",            FutureWarning,            stacklevel=find_stack_level,        ', '                ""Dropping of nuisance columns in rolling operations ""                ""is deprecated; in a future version this will raise TypeError. ""                ""Select only valid columns before calling the operation. ""                f""Dropped columns were {dropped}"",                FutureWarning,                stacklevel=find_stack_level,            '}",{'.dropna'}
pandas.DataFrame.from_items,pandas.DataFrame.from_dict,"{'""from_items is deprecated. Please use ""                      ""DataFrame.from_dict(dict(items', '            ""from_items is deprecated. Please use ""            ""DataFrame.from_dict(dict(items'}",{'dataframe.from_dict(dict(items'}
pandas.Timestamp.weekday_name,pandas.Timestamp.day_name,"{'""cdate_range is deprecated and will be removed in a future ""                  ""version, instead use pd.bdate_range(..., freq=\'{freq}\'', 'msg, FutureWarning, stacklevel=5', '""Converting to PeriodArray/Index representation ""                          ""will drop timezone information."", UserWarning', '                ""The errors argument is deprecated and will be ""                ""removed in a future release. Use ""                ""nonexistent=\'NaT\' or nonexistent=\'raise\' ""                ""instead."",                FutureWarning,            ', '""Passing timedelta64-dtype data is deprecated, will ""                      ""raise a TypeError in a future version"",                      FutureWarning, stacklevel=5', '            ""Passing timedelta64-dtype data is deprecated, will ""            ""raise a TypeError in a future version"",            FutureWarning,            stacklevel=5,        ', 'msg, FutureWarning, stacklevel=2', '                ""Non-vectorized DateOffset being applied to Series "" ""or DatetimeIndex"",                PerformanceWarning,            ', '                ""Converting to PeriodArray/Index representation ""                ""will drop timezone information."",                UserWarning,            ', '""Non-vectorized DateOffset being applied to Series ""                          ""or DatetimeIndex"", PerformanceWarning', '""The errors argument is deprecated and will be ""                          ""removed in a future release. Use ""                          ""nonexistent=\'NaT\' or nonexistent=\'raise\' ""                          ""instead."", FutureWarning', '_i8_message, FutureWarning, stacklevel=4'}",set()
pandas.DatetimeIndex.weekday_name,pandas.DatetimeIndex.day_name,"{'""cdate_range is deprecated and will be removed in a future ""                  ""version, instead use pd.bdate_range(..., freq=\'{freq}\'', 'msg, FutureWarning, stacklevel=5', '""Converting to PeriodArray/Index representation ""                          ""will drop timezone information."", UserWarning', '                ""The errors argument is deprecated and will be ""                ""removed in a future release. Use ""                ""nonexistent=\'NaT\' or nonexistent=\'raise\' ""                ""instead."",                FutureWarning,            ', '""Passing timedelta64-dtype data is deprecated, will ""                      ""raise a TypeError in a future version"",                      FutureWarning, stacklevel=5', '            ""Passing timedelta64-dtype data is deprecated, will ""            ""raise a TypeError in a future version"",            FutureWarning,            stacklevel=5,        ', 'msg, FutureWarning, stacklevel=2', '                ""Non-vectorized DateOffset being applied to Series "" ""or DatetimeIndex"",                PerformanceWarning,            ', '                ""Converting to PeriodArray/Index representation ""                ""will drop timezone information."",                UserWarning,            ', '""Non-vectorized DateOffset being applied to Series ""                          ""or DatetimeIndex"", PerformanceWarning', '""The errors argument is deprecated and will be ""                          ""removed in a future release. Use ""                          ""nonexistent=\'NaT\' or nonexistent=\'raise\' ""                          ""instead."", FutureWarning', '_i8_message, FutureWarning, stacklevel=4'}",set()
pandas.Series.dt.weekday_name,pandas.Series.dt.day_name,"{'""cdate_range is deprecated and will be removed in a future ""                  ""version, instead use pd.bdate_range(..., freq=\'{freq}\'', 'msg, FutureWarning, stacklevel=5', '""Converting to PeriodArray/Index representation ""                          ""will drop timezone information."", UserWarning', '                ""The errors argument is deprecated and will be ""                ""removed in a future release. Use ""                ""nonexistent=\'NaT\' or nonexistent=\'raise\' ""                ""instead."",                FutureWarning,            ', '""Passing timedelta64-dtype data is deprecated, will ""                      ""raise a TypeError in a future version"",                      FutureWarning, stacklevel=5', '            ""Passing timedelta64-dtype data is deprecated, will ""            ""raise a TypeError in a future version"",            FutureWarning,            stacklevel=5,        ', 'msg, FutureWarning, stacklevel=2', '                ""Non-vectorized DateOffset being applied to Series "" ""or DatetimeIndex"",                PerformanceWarning,            ', '                ""Converting to PeriodArray/Index representation ""                ""will drop timezone information."",                UserWarning,            ', '""Non-vectorized DateOffset being applied to Series ""                          ""or DatetimeIndex"", PerformanceWarning', '""The errors argument is deprecated and will be ""                          ""removed in a future release. Use ""                          ""nonexistent=\'NaT\' or nonexistent=\'raise\' ""                          ""instead."", FutureWarning', '_i8_message, FutureWarning, stacklevel=4'}",set()
pandas.tseries.plotting.tsplot,pandas.Series.plot,set(),set()
pandas.tseries.register,pandas.plotting.register_matplotlib_converters,"{'msg, FutureWarning, stacklevel=2'}",set()
pandas.DataFrame.from_csv,pandas.read_csv,"{'""from_csv is deprecated. Please use read_csv(...', '""fromcsv is deprecated. Use \'from_csv\' ""                      ""instead"", FutureWarning'}","{""'from_csv'""}"
pandas.Series.from_csv,pandas.read_csv,"{'""from_csv is deprecated. Please use read_csv(...', '""fromcsv is deprecated. Use \'from_csv\' ""                      ""instead"", FutureWarning'}","{""'from_csv'""}"
pandas.options.html.borde,pd.options.display.html.border,set(),set()
pandas.TimeGrouper,pandas.Grouper,"{'""pd.TimeGrouper is deprecated and will be removed; ""                      ""Please use pd.Grouper(freq=...'}",{'pd.grouper(freq=...'}
pandas.cdate_range,pandas.bdate_range,"{'""cdate_range is deprecated and will be removed in a future ""                  ""version, instead use pd.bdate_range(..., freq=\'{freq}\''}","{'pd.bdate_range(...,'}"
pandas.DataFrame.rename_axis,pandas.DataFrame.rename,"{'\'the ""axis"" argument is deprecated and will be removed in\'                 \'v0.13; this argument has no effect\'', '                ""Method .ptp is deprecated and will be removed ""                ""in a future version. Use numpy.ptp instead."",                FutureWarning,                stacklevel=4,            ', '""consolidate is deprecated and will be removed in a ""                      ""future release."", FutureWarning, stacklevel=2', '                ""Passing None for skipna is deprecated and will raise in a future""                ""version. Pass True instead. Only boolean values will be allowed ""                ""in the future."",                FutureWarning,                stacklevel=find_stack_level,            ', '""Pandas doesn\'t allow columns to be ""                                  ""created via a new attribute name - see ""                                  ""https://pandas.pydata.org/pandas-docs/""                                  ""stable/indexing.html#attribute-access"",                                  stacklevel=2', '""dtype argument is deprecated, will be removed ""                          ""in a future release."", DeprecationWarning', '            ""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=level        ', '""Method .as_matrix will be removed in a future version. ""                      ""Use .values instead."", FutureWarning, stacklevel=2', 'msg, FutureWarning, stacklevel=stacklevel + 1', '                ""set_axis currently defaults to operating inplace.\\nThis ""                ""will change in a future version of pandas, use ""                ""inplace=True to avoid this warning."",                FutureWarning,                stacklevel=2,            ', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."", FutureWarning,                      stacklevel=2', ""'clip_lower(threshold"", '                ""try_cast keyword is deprecated and will be removed in a ""                ""future version"",                FutureWarning,                stacklevel=4,            ', 'msg, FutureWarning, stacklevel=3', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.any(level=1', '            ""clip_lower(threshold', '                f""In a future version, DataFrame.{name}(axis=None', 'msg, FutureWarning', '""specifying \'categories\' or \'ordered\' in ""                              "".astype is deprecated; pass a ""                              ""CategoricalDtype instead"",                              FutureWarning, stacklevel=7', '            ""DataFrame/Series.to_dense is deprecated ""            ""and will be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '            ""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=3,        ', '""The \'tupleize_cols\' parameter is deprecated and ""                          ""will be removed in a future version"",                          FutureWarning, stacklevel=2', '""fastpath argument is deprecated, will be removed ""                      ""in a future release."", DeprecationWarning', '            ""Attribute \'is_copy\' is deprecated and will be removed ""            ""in a future version."",            FutureWarning,            stacklevel=2,        ', '""as_blocks is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2', '\'the ""axis"" argument is deprecated \'                          \'and will be removed in\'                          \'v0.13; this argument has no effect\'', '                        f""Dropping of nuisance columns in {type(self', '            ""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=3,        ', '            (                ""tshift is deprecated and will be removed in a future version. ""                ""Please use shift instead.""            ', '                \'set_axis now takes ""labels"" as first argument, and \'                \'""axis"" as named parameter. The old form, with ""axis"" as \'                \'first parameter and \\""labels\\"" as second, is still supported \'                \'but will be deprecated in a future version of pandas.\',                FutureWarning, stacklevel=2', '""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=3', '            ""as_blocks is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', 't, SettingWithCopyWarning, stacklevel=stacklevel', '            ""get_ftype_counts is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '                ""The `center` argument on `expanding` will be removed in the future."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""`get_dtype_counts` has been deprecated and will be ""            ""removed in a future version. For DataFrames use ""            ""`.dtypes.value_counts"",            FutureWarning,            stacklevel=2,        ', '                \'set_axis now takes ""labels"" as first argument, and \'                \'""axis"" as named parameter. The old form, with ""axis"" as \'                \'first parameter and ""labels"" as second, is still supported \'                ""but will be deprecated in a future version of pandas."",                FutureWarning,                stacklevel=2,            ', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."",                      FutureWarning, stacklevel=2', '            ""clip_upper(threshold', '            ""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=level        ', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=find_stack_level,                    ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.median(level=1', 't, com.SettingWithCopyWarning, stacklevel=find_stack_level', '                ""The `center` argument on `expanding` will be removed in the future"",                FutureWarning,                stacklevel=2,            ', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=2,                    ', '""save is deprecated, use to_pickle"", FutureWarning', '            ""Method .as_matrix will be removed in a future version. ""            ""Use .values instead."",            FutureWarning,            stacklevel=2,        ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.var(level=1', '                ""try_cast keyword is deprecated and will be removed in a ""                ""future version."",                FutureWarning,                stacklevel=find_stack_level,            ', '""load is deprecated, use pd.read_pickle"", FutureWarning', '""get_ftype_counts is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2', '                ""Passing lists as key for xs is deprecated and will be removed in a ""                ""future version. Pass key as a tuple instead."",                FutureWarning,                stacklevel=2,            ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.sum(level=1', '                ""is_copy is deprecated and will be removed in a future version. ""                ""\'take\' always returns a copy, so there is no need to specify this."",                FutureWarning,                stacklevel=find_stack_level,            ', 't, com.SettingWithCopyWarning, stacklevel=stacklevel', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use \'.values\' or \'np.asarray(..', ""'clip_upper(threshold"", '                ""Passing lists as key for xs is deprecated and will be removed in a ""                ""future version. Pass key as a tuple instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.mad(level=1', '""copy keyword is deprecated, ""                          ""default is to return a copy or a view if possible""', '""\'select\' is deprecated and will be removed in a ""                      ""future release. You can use ""                      "".loc[labels.map(crit', '                ""raise_on_error is deprecated in ""                ""favor of errors=\'raise|ignore\'"",                FutureWarning, stacklevel=2', '""Method .ptp is deprecated and will be removed ""                          ""in a future version. Use numpy.ptp instead."",                          FutureWarning, stacklevel=4', '                        ""Treating datetime data as categorical rather than numeric in ""                        ""`.describe` is deprecated and will be removed in a future ""                        ""version of pandas. Specify `datetime_is_numeric=True` to ""                        ""silence this warning and adopt the future behavior now."",                        FutureWarning,                        stacklevel=stacklevel,                    ', '""convert_objects is deprecated.  Use the data-type specific ""             ""converters pd.to_datetime, pd.to_timedelta and pd.to_numeric."",             FutureWarning, stacklevel=2', '            ""_AXIS_NUMBERS has been deprecated."",            FutureWarning,            stacklevel=find_stack_level,        ', '""Attribute \'is_copy\' is deprecated and will be removed ""                      ""in a future version."", FutureWarning, stacklevel=2', 'msg, FutureWarning, stacklevel=2', '                ""is_copy is deprecated and will be removed in a future version. ""                ""\'take\' always returns a copy, so there is no need to specify this."",                FutureWarning,                stacklevel=2,            ', '                    ""The `center` argument on `expanding` ""                    ""will be removed in the future"",                    FutureWarning,                    stacklevel=2,                ', 'msg, FutureWarning, stacklevel=find_stack_level', '                f""The \'errors\' keyword in {type(self', 't, com.SettingWithCopyWarning,                              stacklevel=stacklevel', ""                'set_axis currently defaults to operating inplace.\\nThis '                'will change in a future version of pandas, use '                'inplace=True to avoid this warning.',                FutureWarning, stacklevel=2"", '                f""\'numeric_only=None\' in {type(self', '""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=3', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."",                      DeprecationWarning', '                ""`include_start` and `include_end` are deprecated in ""                ""favour of `inclusive`."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""DataFrame.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use DataFrame.dtypes instead."",            FutureWarning,            stacklevel=2,        '}",set()
pandas.Series.rename_axis,pandas.DataFrame.rename,"{'\'the ""axis"" argument is deprecated and will be removed in\'                 \'v0.13; this argument has no effect\'', '                ""Method .ptp is deprecated and will be removed ""                ""in a future version. Use numpy.ptp instead."",                FutureWarning,                stacklevel=4,            ', '""consolidate is deprecated and will be removed in a ""                      ""future release."", FutureWarning, stacklevel=2', '                ""Passing None for skipna is deprecated and will raise in a future""                ""version. Pass True instead. Only boolean values will be allowed ""                ""in the future."",                FutureWarning,                stacklevel=find_stack_level,            ', '""Pandas doesn\'t allow columns to be ""                                  ""created via a new attribute name - see ""                                  ""https://pandas.pydata.org/pandas-docs/""                                  ""stable/indexing.html#attribute-access"",                                  stacklevel=2', '""dtype argument is deprecated, will be removed ""                          ""in a future release."", DeprecationWarning', '            ""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=level        ', '""Method .as_matrix will be removed in a future version. ""                      ""Use .values instead."", FutureWarning, stacklevel=2', 'msg, FutureWarning, stacklevel=stacklevel + 1', '                ""set_axis currently defaults to operating inplace.\\nThis ""                ""will change in a future version of pandas, use ""                ""inplace=True to avoid this warning."",                FutureWarning,                stacklevel=2,            ', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."", FutureWarning,                      stacklevel=2', ""'clip_lower(threshold"", '                ""try_cast keyword is deprecated and will be removed in a ""                ""future version"",                FutureWarning,                stacklevel=4,            ', 'msg, FutureWarning, stacklevel=3', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.any(level=1', '            ""clip_lower(threshold', '                f""In a future version, DataFrame.{name}(axis=None', 'msg, FutureWarning', '""specifying \'categories\' or \'ordered\' in ""                              "".astype is deprecated; pass a ""                              ""CategoricalDtype instead"",                              FutureWarning, stacklevel=7', '            ""DataFrame/Series.to_dense is deprecated ""            ""and will be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '            ""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=3,        ', '""The \'tupleize_cols\' parameter is deprecated and ""                          ""will be removed in a future version"",                          FutureWarning, stacklevel=2', '""fastpath argument is deprecated, will be removed ""                      ""in a future release."", DeprecationWarning', '            ""Attribute \'is_copy\' is deprecated and will be removed ""            ""in a future version."",            FutureWarning,            stacklevel=2,        ', '""as_blocks is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2', '\'the ""axis"" argument is deprecated \'                          \'and will be removed in\'                          \'v0.13; this argument has no effect\'', '                        f""Dropping of nuisance columns in {type(self', '            ""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=3,        ', '            (                ""tshift is deprecated and will be removed in a future version. ""                ""Please use shift instead.""            ', '                \'set_axis now takes ""labels"" as first argument, and \'                \'""axis"" as named parameter. The old form, with ""axis"" as \'                \'first parameter and \\""labels\\"" as second, is still supported \'                \'but will be deprecated in a future version of pandas.\',                FutureWarning, stacklevel=2', '""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=3', '            ""as_blocks is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', 't, SettingWithCopyWarning, stacklevel=stacklevel', '            ""get_ftype_counts is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '                ""The `center` argument on `expanding` will be removed in the future."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""`get_dtype_counts` has been deprecated and will be ""            ""removed in a future version. For DataFrames use ""            ""`.dtypes.value_counts"",            FutureWarning,            stacklevel=2,        ', '                \'set_axis now takes ""labels"" as first argument, and \'                \'""axis"" as named parameter. The old form, with ""axis"" as \'                \'first parameter and ""labels"" as second, is still supported \'                ""but will be deprecated in a future version of pandas."",                FutureWarning,                stacklevel=2,            ', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."",                      FutureWarning, stacklevel=2', '            ""clip_upper(threshold', '            ""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=level        ', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=find_stack_level,                    ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.median(level=1', 't, com.SettingWithCopyWarning, stacklevel=find_stack_level', '                ""The `center` argument on `expanding` will be removed in the future"",                FutureWarning,                stacklevel=2,            ', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=2,                    ', '""save is deprecated, use to_pickle"", FutureWarning', '            ""Method .as_matrix will be removed in a future version. ""            ""Use .values instead."",            FutureWarning,            stacklevel=2,        ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.var(level=1', '                ""try_cast keyword is deprecated and will be removed in a ""                ""future version."",                FutureWarning,                stacklevel=find_stack_level,            ', '""load is deprecated, use pd.read_pickle"", FutureWarning', '""get_ftype_counts is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2', '                ""Passing lists as key for xs is deprecated and will be removed in a ""                ""future version. Pass key as a tuple instead."",                FutureWarning,                stacklevel=2,            ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.sum(level=1', '                ""is_copy is deprecated and will be removed in a future version. ""                ""\'take\' always returns a copy, so there is no need to specify this."",                FutureWarning,                stacklevel=find_stack_level,            ', 't, com.SettingWithCopyWarning, stacklevel=stacklevel', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use \'.values\' or \'np.asarray(..', ""'clip_upper(threshold"", '                ""Passing lists as key for xs is deprecated and will be removed in a ""                ""future version. Pass key as a tuple instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.mad(level=1', '""copy keyword is deprecated, ""                          ""default is to return a copy or a view if possible""', '""\'select\' is deprecated and will be removed in a ""                      ""future release. You can use ""                      "".loc[labels.map(crit', '                ""raise_on_error is deprecated in ""                ""favor of errors=\'raise|ignore\'"",                FutureWarning, stacklevel=2', '""Method .ptp is deprecated and will be removed ""                          ""in a future version. Use numpy.ptp instead."",                          FutureWarning, stacklevel=4', '                        ""Treating datetime data as categorical rather than numeric in ""                        ""`.describe` is deprecated and will be removed in a future ""                        ""version of pandas. Specify `datetime_is_numeric=True` to ""                        ""silence this warning and adopt the future behavior now."",                        FutureWarning,                        stacklevel=stacklevel,                    ', '""convert_objects is deprecated.  Use the data-type specific ""             ""converters pd.to_datetime, pd.to_timedelta and pd.to_numeric."",             FutureWarning, stacklevel=2', '            ""_AXIS_NUMBERS has been deprecated."",            FutureWarning,            stacklevel=find_stack_level,        ', '""Attribute \'is_copy\' is deprecated and will be removed ""                      ""in a future version."", FutureWarning, stacklevel=2', 'msg, FutureWarning, stacklevel=2', '                ""is_copy is deprecated and will be removed in a future version. ""                ""\'take\' always returns a copy, so there is no need to specify this."",                FutureWarning,                stacklevel=2,            ', '                    ""The `center` argument on `expanding` ""                    ""will be removed in the future"",                    FutureWarning,                    stacklevel=2,                ', 'msg, FutureWarning, stacklevel=find_stack_level', '                f""The \'errors\' keyword in {type(self', 't, com.SettingWithCopyWarning,                              stacklevel=stacklevel', ""                'set_axis currently defaults to operating inplace.\\nThis '                'will change in a future version of pandas, use '                'inplace=True to avoid this warning.',                FutureWarning, stacklevel=2"", '                f""\'numeric_only=None\' in {type(self', '""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=3', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."",                      DeprecationWarning', '                ""`include_start` and `include_end` are deprecated in ""                ""favour of `inclusive`."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""DataFrame.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use DataFrame.dtypes instead."",            FutureWarning,            stacklevel=2,        '}",set()
pandas.reindex_axis,pandas.reindex,"{'""TimeSeries is deprecated. Please use Series"",                      FutureWarning, stacklevel=2', '\'the ""axis"" argument is deprecated and will be removed in\'                 \'v0.13; this argument has no effect\'', '""colSpace is deprecated, use col_space"",                          FutureWarning, stacklevel=2', '""fromcsv is deprecated. Use \'from_csv\' ""                      ""instead"", FutureWarning', '""set_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '(""na_last is deprecated. Please use na_position instead""', '""DataFrame columns are not unique, some ""                          ""columns will be omitted."",UserWarning', '""consolidate is deprecated and will be removed in a ""                      ""future release."", FutureWarning, stacklevel=2', '""nanRep is deprecated, use na_rep"", FutureWarning', '""icol(i', '                    ""Dropping of nuisance columns in DataFrame reductions ""                    f""(with \'{arg_name}=None\'', '                ""Passing None for skipna is deprecated and will raise in a future""                ""version. Pass True instead. Only boolean values will be allowed ""                ""in the future."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""DataFrame indexer for .iloc is deprecated and will be removed in ""                ""a future version.\\n""                ""consider using .loc with a DataFrame indexer for automatic alignment."",                FutureWarning,                stacklevel=find_stack_level,            ', ""'toDict', to_dict"", '""by argument to sort_index is deprecated, ""                          ""please use .sort_values(by=...', '                ""by argument to sort_index is deprecated, ""                ""please use .sort_values(by=...', '""Pandas doesn\'t allow columns to be ""                                  ""created via a new attribute name - see ""                                  ""https://pandas.pydata.org/pandas-docs/""                                  ""stable/indexing.html#attribute-access"",                                  stacklevel=2', '""dtype argument is deprecated, will be removed ""                          ""in a future release."", DeprecationWarning', '            ""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=level        ', '""When passing multiple axes, sharex and sharey ""                              ""are ignored. These settings must be specified ""                              ""when creating axes"", UserWarning', '                ""null_counts is deprecated. Use show_counts instead"",                FutureWarning,                stacklevel=find_stack_level,            ', '""drop_duplicates with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""Method .as_matrix will be removed in a future version. ""                      ""Use .values instead."", FutureWarning, stacklevel=2', '                ""\'showindex\' is deprecated. Only \'index\' will be used ""                ""in a future version. Use \'index\' to silence this warning."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""Passing a set as an indexer is deprecated and will raise in ""            ""a future version. Use a list instead."",            FutureWarning,            stacklevel=find_stack_level,        ', 'ws, AttributeConflictWarning, stacklevel=6', '""iget_value(i', '""Boolean Series key will be reindexed to match ""                              ""DataFrame index."", UserWarning', '""Boolean Series key will be reindexed to match ""                              ""DataFrame index."", UserWarning, stacklevel=3', 'msg, FutureWarning, stacklevel=stacklevel + 1', '\'argmin\', idxmin,                       msg=""\'argmin\' is deprecated. Use \'idxmin\' instead. ""                           ""The behavior of \'argmin\' will be corrected to ""                           ""return the positional minimum in the future. ""                           ""Use \'series.values.argmin\' to get the position of ""                           ""the minimum now.""', ""'toLong', to_frame"", '                ""DataFrame columns are not unique, some columns will be omitted."",                UserWarning,                stacklevel=find_stack_level,            ', '""sort(columns=....', '""toDataMatrix will disappear in next release ""                      ""as there is no longer a DataMatrix class"",                      FutureWarning', '""irow(i', '""tapply is deprecated. Use apply(f, axis=1', '                ""set_axis currently defaults to operating inplace.\\nThis ""                ""will change in a future version of pandas, use ""                ""inplace=True to avoid this warning."",                FutureWarning,                stacklevel=2,            ', '                ""The \'convert_datetime64\' parameter is ""                ""deprecated and will be removed in a future ""                ""version"",                FutureWarning,                stacklevel=2,            ', '                ""null_counts is deprecated. Use show_counts instead"",                FutureWarning,                stacklevel=2,            ', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."", FutureWarning,                      stacklevel=2', ""'clip_lower(threshold"", '                ""Boolean Series key will be reindexed to match DataFrame index."",                UserWarning,                stacklevel=3,            ', '            ""set_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '""colSpace is deprecated, use col_space"",                          FutureWarning', ""'toCSV', to_csv"", '                ""try_cast keyword is deprecated and will be removed in a ""                ""future version"",                FutureWarning,                stacklevel=4,            ', 'msg, FutureWarning, stacklevel=3', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.any(level=1', '""\'timeRule\' and \'offset\' parameters are deprecated,""                      "" please use \'freq\' instead"",                      FutureWarning', '            ""clip_lower(threshold', '                f""In a future version, DataFrame.{name}(axis=None', ""'getMinorXS', minor_xs"", 'msg, FutureWarning', '""specifying \'categories\' or \'ordered\' in ""                              "".astype is deprecated; pass a ""                              ""CategoricalDtype instead"",                              FutureWarning, stacklevel=7', '(""\'colors\' is being deprecated. Please use \'color\'""                           ""instead of \'colors\'""', ""'toRecords', to_records"", 'duplicate_doc, DuplicateWarning', '""reshape is deprecated and will raise ""                      ""in a subsequent release. Please use ""                      "".values.reshape(...', '                        ""In a future version, the BlockManager constructor ""                        ""will assume that a DatetimeTZBlock with block.ndim==2 ""                        ""has block.values.ndim == 2."",                        DeprecationWarning,                        stacklevel=find_stack_level,                    ', '                        ws, AttributeConflictWarning, stacklevel=find_stack_level                    ', '""DataFrame columns are not unique, some ""                          ""columns will be omitted."", UserWarning,                          stacklevel=2', '""the dropna=\'%s\' keyword is deprecated,""                              ""use dropna=\'all\' instead. ""                              ""For a Series groupby, dropna must be ""                              ""either None, \'any\' or \'all\'."" % (dropna', '            ""DataFrame/Series.to_dense is deprecated ""            ""and will be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '            ""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=3,        ', '""The \'tupleize_cols\' parameter is deprecated and ""                          ""will be removed in a future version"",                          FutureWarning, stacklevel=2', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""\\        \'argmax\' is deprecated, use \'idxmax\' instead. The behavior of \'argmax\'        will be corrected to return the positional maximum in the future.        Use \'series.values.argmax\' to get the position of the maximum now.""""""', '""get_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2', '                ""Boolean Series key will be reindexed to match "" ""DataFrame index."",                UserWarning,                stacklevel=3,            ', '""\'color\' and \'colormap\' cannot be used ""                              ""simultaneously. Using \'color\'""', '""sortlevel with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""sortlevel is deprecated, use sort_index(level= ...', '                    ""Support for MaskedRecords is deprecated and will be ""                    ""removed in a future version.  Pass ""                    ""{name: data[name] for name in data.dtype.names} instead."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '""fastpath argument is deprecated, will be removed ""                      ""in a future release."", DeprecationWarning', '            ""Attribute \'is_copy\' is deprecated and will be removed ""            ""in a future version."",            FutureWarning,            stacklevel=2,        ', '            ""DataFrame.to_sparse is deprecated and will be removed ""            ""in a future version"",            FutureWarning,            stacklevel=2,        ', '""as_blocks is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2', '\'the ""axis"" argument is deprecated \'                          \'and will be removed in\'                          \'v0.13; this argument has no effect\'', '                        f""Dropping of nuisance columns in {type(self', '""Replace usage of .rows with .index, will be removed ""                      ""in next release"", FutureWarning', '            (                ""tshift is deprecated and will be removed in a future version. ""                ""Please use shift instead.""            ', '            ""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=3,        ', '                ""The `fastpath` keyword is deprecated and will be removed ""                ""in a future version."",                FutureWarning,                stacklevel=find_stack_level,            ', '""DataFrame columns are not unique, some ""                          ""columns will be omitted."", UserWarning', '                ""Boolean Series key will be reindexed to match DataFrame index."",                UserWarning,                stacklevel=find_stack_level,            ', '                \'set_axis now takes ""labels"" as first argument, and \'                \'""axis"" as named parameter. The old form, with ""axis"" as \'                \'first parameter and \\""labels\\"" as second, is still supported \'                \'but will be deprecated in a future version of pandas.\',                FutureWarning, stacklevel=2', '""the dropna={dropna} keyword is deprecated,""                              ""use dropna=\'all\' instead. ""                              ""For a Series groupby, dropna must be ""                              ""either None, \'any\' or \'all\'."".format(                                  dropna=dropna', '""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=3', '            ""as_blocks is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '""dropEmptyRows is deprecated. Use dropna(how=\'all\'', '""set_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2', 't, SettingWithCopyWarning, stacklevel=stacklevel', '""reset_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""remove_na is deprecated and is a private ""                  ""function. Do not use."", FutureWarning, stacklevel=2', '            ""get_ftype_counts is deprecated and will "" ""be removed in a future version"",            FutureWarning,            stacklevel=2,        ', 'msg, FutureWarning, stacklevel=5', 'duplicate_doc, DuplicateWarning, stacklevel=5', '""tgroupby is deprecated. Use groupby with axis=1"",                      FutureWarning', '""sortlevel is deprecated, use sort_index(level=...', '                ""The `center` argument on `expanding` will be removed in the future."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""`get_dtype_counts` has been deprecated and will be ""            ""removed in a future version. For DataFrames use ""            ""`.dtypes.value_counts"",            FutureWarning,            stacklevel=2,        ', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '""\'names\' parameter to DataFrame.from_records is ""                          ""being renamed to \'columns\', \'names\' will be ""                          ""removed in 0.8.0"",                          FutureWarning', '                \'set_axis now takes ""labels"" as first argument, and \'                \'""axis"" as named parameter. The old form, with ""axis"" as \'                \'first parameter and ""labels"" as second, is still supported \'                ""but will be deprecated in a future version of pandas."",                FutureWarning,                stacklevel=2,            ', '""Method .valid will be removed in a future version. ""                      ""Use .dropna instead."", FutureWarning, stacklevel=2', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."",                      FutureWarning, stacklevel=2', '                ""Using short name for \'orient\' is deprecated. Only the ""                ""options: (\'dict\', list, \'series\', \'split\', \'records\', \'index\'', '            ""clip_upper(threshold', '""replace with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""\'combineMult\' is deprecated. Use ""                      ""\'DataFrame.mul(other, fill_value=1.', '""When passing multiple axes, layout keyword is ""                              ""ignored"", UserWarning', '""from_csv is deprecated. Please use read_csv(...', '                ""DataFrame.mean and DataFrame.median with numeric_only=None ""                ""will include datetime64 and datetime64tz columns in a ""                ""future version."",                FutureWarning,                stacklevel=3,            ', '            ""_AXIS_NUMBERS has been deprecated."", FutureWarning, stacklevel=level        ', 'ws, PerformanceWarning', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=find_stack_level,                    ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.median(level=1', 't, com.SettingWithCopyWarning, stacklevel=find_stack_level', '                ""The `center` argument on `expanding` will be removed in the future"",                FutureWarning,                stacklevel=2,            ', '            ""get_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '            ""The frame.append method is deprecated ""            ""and will be removed from pandas in a future version. ""            ""Use pandas.concat instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '""\\nPanel is deprecated and will be removed in a ""                      ""future version.\\nThe recommended way to represent ""                      ""these types of 3-dimensional data are with a ""                      ""MultiIndex on a DataFrame, via the ""                      ""Panel.to_frame method\\n""                      ""Alternatively, you can use the xarray package ""                      ""http://xarray.pydata.org/en/stable/.\\n""                      ""Pandas provides a `.to_xarray` method to help ""                      ""automate this conversion.\\n"",                      DeprecationWarning, stacklevel=3', '""\'from_array\' is deprecated and will be removed in a ""                      ""future version. Please use the pd.Series(..', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=2,                    ', '""\'combineAdd\' is deprecated. Use ""                      ""\'DataFrame.add(other, fill_value=0.', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '""by argument to sort_index is deprecated, pls use .sort_values(by=...', '""save is deprecated, use to_pickle"", FutureWarning', '            ""from_items is deprecated. Please use ""            ""DataFrame.from_dict(dict(items', '            ""Method .as_matrix will be removed in a future version. ""            ""Use .values instead."",            FutureWarning,            stacklevel=2,        ', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.var(level=1', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.count(level=1', '""WidePanel is deprecated. Please use Panel"",                      FutureWarning, stacklevel=2', '""\'names\' parameter to DataFrame.from_records is ""                          ""being renamed to \'columns\', \'names\' will be ""                          ""removed in 0.8.0"", FutureWarning', '""The signature of `Series.to_csv` was aligned ""                          ""to that of `DataFrame.to_csv`, and argument ""                          ""\'header\' will change its default value from False ""                          ""to True: please pass an explicit value to suppress ""                          ""this warning."", FutureWarning,                          stacklevel=2', '""figsize=\'default\' is deprecated. Specify figure""                      ""size by tuple instead"", FutureWarning', ""'_lastTimeWithValue', last_valid_index"", '""column is deprecated, use columns"", FutureWarning', '                ""try_cast keyword is deprecated and will be removed in a ""                ""future version."",                FutureWarning,                stacklevel=find_stack_level,            ', ""'combineFirst', combine_first"", '""by argument to sort_index is deprecated, pls use ""                          "".sort_values(by=...', '""load is deprecated, use pd.read_pickle"", FutureWarning', '""The signature of `Series.to_csv` was aligned ""                          ""to that of `DataFrame.to_csv`, and argument ""                          ""\'path\' will be renamed to \'path_or_buf\'."",                          FutureWarning, stacklevel=2', '                ""DataFrame indexer for .iloc is deprecated and will be removed in""                ""a future version.\\n""                ""consider using .loc with a DataFrame indexer for automatic alignment."",                FutureWarning,                stacklevel=3,            ', 'ws, AttributeConflictWarning', 'ws, PerformanceWarning, stacklevel=find_stack_level', '""The \'convert_datetime64\' parameter is ""                          ""deprecated and will be removed in a future ""                          ""version"",                          FutureWarning, stacklevel=2', '                (                    ""The `squeeze` parameter is deprecated and ""                    ""will be removed in a future version.""                ', '""get_ftype_counts is deprecated and will ""                      ""be removed in a future version"",                      FutureWarning, stacklevel=2', '""sort(....', '""When passing multiple axes, sharex and sharey are ignored.""                              ""These settings must be specified when creating axes"", UserWarning', '                    (""using a dict on a Series for aggregation\\n""                     ""is deprecated and will be removed in a future ""                     ""version""', '""sort is deprecated, use sort_values(inplace=True', '                ""Passing lists as key for xs is deprecated and will be removed in a ""                ""future version. Pass key as a tuple instead."",                FutureWarning,                stacklevel=2,            ', '                ""DataFrame.mean and DataFrame.median with numeric_only=None ""                ""will include datetime64 and datetime64tz columns in a ""                ""future version."",                FutureWarning,                stacklevel=5,            ', '_ix_deprecation_warning,                      DeprecationWarning, stacklevel=3', ""'to_long', to_frame"", '""\'asobject\' is deprecated. Use \'astype(object', '""rename with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""where criteria is being ignored as we this version is too old (or not-defined', '\'The _verbose_info property will be removed in version \'                      \'0.13. please use ""max_info_rows""\', FutureWarning', 'ws, IncompatibilityWarning', '""fill is being replaced by fillna, and the fill function ""                      ""behavior will disappear in the next release: please ""                      ""modify your code accordingly"",                      FutureWarning', '""The signature of `Series.to_csv` was aligned ""                              ""to that of `DataFrame.to_csv`. Note that the ""                              ""order of arguments changed, and the new one ""                              ""has \'sep\' in first place, for which \\""{}\\"" is ""                              ""not a valid value. The old order will cease to ""                              ""be supported in a future version. Please refer ""                              ""to the documentation for `DataFrame.to_csv` ""                              ""when updating your function ""                              ""calls."".format(maybe_sep', '""To output multiple subplots, the figure containing the passed axes ""                          ""is being cleared"", UserWarning', '""When passing multiple axes, layout keyword is ignored"", UserWarning', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.sum(level=1', '                ""is_copy is deprecated and will be removed in a future version. ""                ""\'take\' always returns a copy, so there is no need to specify this."",                FutureWarning,                stacklevel=find_stack_level,            ', '""figsize=\'default\' is deprecated. Specify figure""                      ""size by tuple instead"", FutureWarning, stacklevel=4', '""\\nPanel is deprecated and will be removed in a ""                      ""future version.\\nThe recommended way to represent ""                      ""these types of 3-dimensional data are with a ""                      ""MultiIndex on a DataFrame, via the ""                      ""Panel.to_frame method\\n""                      ""Alternatively, you can use the xarray package ""                      ""http://xarray.pydata.org/en/stable/.\\n""                      ""Pandas provides a `.to_xarray` method to help ""                      ""automate this conversion.\\n"",                      FutureWarning, stacklevel=3', '                ""Dropping of nuisance columns in DataFrame reductions ""                f""(with \'{arg_name}=None\'', '""sort/sort_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""iget_value(i, j', '                ""Method .ptp is deprecated and will be removed ""                ""in a future version. Use numpy.ptp instead."",                FutureWarning,                stacklevel=4,            ', 't, com.SettingWithCopyWarning, stacklevel=stacklevel', '                ""DataFrame columns are not unique, some "" ""columns will be omitted."",                UserWarning,                stacklevel=2,            ', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use \'.values\' or \'np.asarray(..', '""iget(i', ""'toString', to_string"", ""'getMajorXS', major_xs"", ""'clip_upper(threshold"", 'format_deprecate_doc, FutureWarning', '""Boolean Series key will be reindexed to match ""                          ""DataFrame index."", UserWarning, stacklevel=3', '""When passing multiple axes, sharex and sharey ""                              ""are ignored. These settings must be specified ""                              ""when creating axes"", UserWarning,                              stacklevel=4', '                    ""Indexing a DataFrame with a datetimelike index using a single ""                    ""string to slice the rows, like `frame[string]`, is deprecated ""                    ""and will be removed in a future version. Use `frame.loc[string]` ""                    ""instead."",                    FutureWarning,                    stacklevel=3,                ', ""'DataFrame.interpolate will be removed in v0.13, please use '             'either DataFrame.fillna or DataFrame.replace instead',             FutureWarning"", '""indexField argument is deprecated. Use index ""                          ""instead"", FutureWarning', '                ""Passing lists as key for xs is deprecated and will be removed in a ""                ""future version. Pass key as a tuple instead."",                FutureWarning,                stacklevel=find_stack_level,            ', 'msg', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.mad(level=1', '""To output multiple subplots, the figure containing ""                          ""the passed axes is being cleared"", UserWarning,                          stacklevel=4', '            ""Passing a dict as an indexer is deprecated and will raise in ""            ""a future version. Use a list instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '""copy keyword is deprecated, ""                          ""default is to return a copy or a view if possible""', ""'merge', join"", '                ""\'showindex\' is deprecated. Only \'index\' will be used ""                ""in a future version. Use \'index\' to silence this warning."",                FutureWarning,                stacklevel=2,            ', '                        (""\'%s\' is both a column name and an index level.\\n""                         ""Defaulting to column but ""                         ""this will raise an ambiguity error in a ""                         ""future version""', '""order is deprecated, use sort_values(...', '                ""DataFrame columns are not unique, some columns will be omitted."",                UserWarning,                stacklevel=2,            ', '""nanRep is deprecated, use na_rep"",                          FutureWarning', '""\'select\' is deprecated and will be removed in a ""                      ""future release. You can use ""                      "".loc[labels.map(crit', '                ""The `fastpath` keyword is deprecated and will be removed ""                ""in a future version."",                FutureWarning,                stacklevel=2,            ', '""fromRecords is deprecated. Use \'from_records\' ""                      ""instead"", FutureWarning', '""force_unicode is deprecated, it will have no ""                          ""effect"", FutureWarning', '(""TimeSeries broadcasting along DataFrame index ""                           ""by default is deprecated. Please use ""                           ""DataFrame.<op> to explicitly broadcast arithmetic ""                           ""operations along the index""', '                ""raise_on_error is deprecated in ""                ""favor of errors=\'raise|ignore\'"",                FutureWarning, stacklevel=2', '""Method .ptp is deprecated and will be removed ""                          ""in a future version. Use numpy.ptp instead."",                          FutureWarning, stacklevel=4', '                        ""Treating datetime data as categorical rather than numeric in ""                        ""`.describe` is deprecated and will be removed in a future ""                        ""version of pandas. Specify `datetime_is_numeric=True` to ""                        ""silence this warning and adopt the future behavior now."",                        FutureWarning,                        stacklevel=stacklevel,                    ', '""convert_objects is deprecated.  Use the data-type specific ""             ""converters pd.to_datetime, pd.to_timedelta and pd.to_numeric."",             FutureWarning, stacklevel=2', '""\'color\' and \'colormap\' cannot be used ""                          ""simultaneously. Using \'color\'""', '            ""_AXIS_NUMBERS has been deprecated."",            FutureWarning,            stacklevel=find_stack_level,        ', 'ws, PerformanceWarning, stacklevel=7', '                    ""Indexing a DataFrame with a datetimelike index using a single ""                    ""string to slice the rows, like `frame[string]`, is deprecated ""                    ""and will be removed in a future version. Use `frame.loc[string]` ""                    ""instead."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '\'the ""method"" argument is deprecated and will be removed in\'                 \'v0.13; this argument has no effect\'', '""LongPanel is deprecated. Please use DataFrame"",                      FutureWarning, stacklevel=2', 'msg, FutureWarning, stacklevel=2', '""Attribute \'is_copy\' is deprecated and will be removed ""                      ""in a future version."", FutureWarning, stacklevel=2', '                ""DataFrame is highly fragmented.  This is usually the result ""                ""of calling `frame.insert` many times, which has poor performance.  ""                ""Consider using pd.concat instead.  To get a de-fragmented frame, ""                ""use `newframe = frame.copy`"",                PerformanceWarning,                stacklevel=5,            ', '                ""DataFrame is highly fragmented.  This is usually the result ""                ""of calling `frame.insert` many times, which has poor performance.  ""                ""Consider joining all columns at once using pd.concat(axis=1', '                ""is_copy is deprecated and will be removed in a future version. ""                ""\'take\' always returns a copy, so there is no need to specify this."",                FutureWarning,                stacklevel=2,            ', ""'delevel', reset_index"", '                    ""The `center` argument on `expanding` ""                    ""will be removed in the future"",                    FutureWarning,                    stacklevel=2,                ', '                    ""Support for MaskedRecords is deprecated and will be ""                    ""removed in a future version.  Pass ""                    ""{name: data[name] for name in data.dtype.names} instead."",                    FutureWarning,                    stacklevel=2,                ', 'msg, FutureWarning, stacklevel=find_stack_level', '                f""The \'errors\' keyword in {type(self', 't, com.SettingWithCopyWarning,                              stacklevel=stacklevel', ""'Alignment difference on axis {0} is larger '                                  'than an order of magnitude on term {1!r}, '                                  'by more than {2:.4g}; performance may '                                  'suffer'.format(axis, terms[i].name, ordm"", '""\\nPanel4D is deprecated and will be removed in a ""                  ""future version.\\nThe recommended way to represent ""                  ""these types of n-dimensional data are with\\n""                  ""the `xarray package ""                  ""<http://xarray.pydata.org/en/stable/>`__.\\n""                  ""Pandas provides a `.to_xarray` method to help ""                  ""automate this conversion.\\n"",                  FutureWarning, stacklevel=2', ""'_firstTimeWithValue', first_valid_index"", '""asMatrix is deprecated. Use \'as_matrix\' or .values ""                      ""instead"", FutureWarning', '""dropEmptyRows is deprecated. Use dropna"",                      FutureWarning', '""is_time_series is deprecated. Please use ""                      ""Series.index.is_all_dates"", FutureWarning, stacklevel=2', ""                'set_axis currently defaults to operating inplace.\\nThis '                'will change in a future version of pandas, use '                'inplace=True to avoid this warning.',                FutureWarning, stacklevel=2"", '""fillna with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '\'The _verbose_info property will be removed in version \'                      \'0.12. please use ""max_info_rows""\', FutureWarning', '                f""\'numeric_only=None\' in {type(self', '""_AXIS_NAMES has been deprecated."", FutureWarning, stacklevel=3', '""iterkv is deprecated and will be removed in a future ""                      ""release, use ``iteritems`` instead."",                      DeprecationWarning', '""unique(key,column', ""'toWide', to_wide"", '                ""`include_start` and `include_end` are deprecated in ""                ""favour of `inclusive`."",                FutureWarning,                stacklevel=find_stack_level,            ', ""'to_wide', to_panel"", '""Replace usage of .cols with .columns, will be ""                      ""removed in next release"", FutureWarning', '""from_items is deprecated. Please use ""                      ""DataFrame.from_dict(dict(items', '""To output multiple subplots, the figure containing ""                          ""the passed axes is being cleared"", UserWarning', '\'argmax\', idxmax,                       msg=""\'argmax\' is deprecated. Use \'idxmax\' instead. ""                           ""The behavior of \'argmax\' will be corrected to ""                           ""return the positional maximum in the future. ""                           ""Use \'series.values.argmax\' to get the position of ""                           ""the maximum now.""', '                    ""DataFrame.mean and DataFrame.median with numeric_only=None ""                    ""will include datetime64 and datetime64tz columns in a ""                    ""future version."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '        ""get_store is deprecated and be ""        ""removed in a future version\\n""        ""HDFStore(path, **kwargs', '            ""DataFrame.ftypes is deprecated and will ""            ""be removed in a future version. ""            ""Use DataFrame.dtypes instead."",            FutureWarning,            stacklevel=2,        ', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""\\        \'argmin\' is deprecated, use \'idxmin\' instead. The behavior of \'argmin\'        will be corrected to return the positional minimum in the future.        Use \'series.values.argmin\' to get the position of the minimum now.""""""', ""'getXS', xs""}",set()
pandas.Series.select,df.loc[labels.map(crit)],"{'""\'select\' is deprecated and will be removed in a ""                      ""future release. You can use ""                      "".loc[labels.map(crit'}",{'.loc[labels.map(crit'}
pandas.DataFrame.select,df.loc[labels.map(crit)],"{'""\'select\' is deprecated and will be removed in a ""                      ""future release. You can use ""                      "".loc[labels.map(crit'}",{'.loc[labels.map(crit'}
pandas.Series.argmax,pandas.Series.idxmax,"{'msg, FutureWarning, stacklevel=level', '            ""Index.is_all_dates is deprecated, will be removed in a future version. ""            ""check index.inferred_type instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '""{obj}.flags is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '                    ""In a future version, the union of DatetimeIndex objects ""                    ""with mismatched timezones will cast both to UTC instead of ""                    ""object dtype. To retain the old behavior, ""                    ""use `index.astype(object', '                        ""reindexing with a non-unique Index is deprecated and ""                        ""will raise in a future version."",                        FutureWarning,                        stacklevel=find_stack_level,                    ', '            ""{obj}.flags is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '            ""{obj}.strides is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '            ""The Index._get_attributes_dict method is deprecated, and will be ""            ""removed in a future version"",            DeprecationWarning,            stacklevel=find_stack_level,        ', '                    (""using a dict with renaming ""                     ""is deprecated and will be removed in a future ""                     ""version""', '                    ""In a future version, passing a SparseArray to pd.Index ""                    ""will store that array directly instead of converting to a ""                    ""dense numpy ndarray. To retain the old behavior, use ""                    ""pd.Index(arr.to_numpy', '            ""Index.__xor__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__xor__.  Use index.symmetric_difference(other', '            ""Index.__and__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__and__.  Use index.intersection(other', '                    ""Slicing a positional slice with .loc is not supported, ""                    ""and will raise TypeError in a future version.  ""                    ""Use .loc with labels or .iloc with positions instead."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '                ""parameter dtype is deprecated and will be removed in a future ""                ""version. Use the astype method instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""{obj}.base is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '""\'asobject\' is deprecated. Use \'astype(object', '            ""get_value is deprecated and will be removed in a future version. ""            ""Use Series[key] instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""{obj}.itemsize is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '            ""The \'to_native_types\' method is deprecated and will be removed in ""            ""a future version. Use \'astype(str', '            ""{obj}.data is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '""{obj}.data is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '                f""{err}, sort order is undefined for incomparable objects."",                RuntimeWarning,                stacklevel=find_stack_level,            ', '            ""Index.asi8 is deprecated and will be removed in a future version."",            FutureWarning,            stacklevel=find_stack_level,        ', '                ""Explicitly passing `name=None` currently preserves the Index\'s name ""                ""or uses a default name of 0. This behaviour is deprecated, and in ""                ""the future `None` will be used as the name of the resulting ""                ""DataFrame column."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""\'asobject\' is deprecated. Use \'astype(object', '            ""Index.is_mixed is deprecated and will be removed in a future version. ""            ""Check index.inferred_type directly instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""Index.__or__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__or__.  Use index.union(other', '                ""Passing keywords other than \'data\', \'dtype\', \'copy\', \'name\', ""                ""\'tupleize_cols\' is deprecated and will raise TypeError in a ""                ""future version.  Use the specific Index subclass directly instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '""Adding/subtracting array of DateOffsets to ""                      ""{cls} not vectorized""                      .format(cls=type(self', '                f""\'{name}\' argument in {methodname} is deprecated ""                ""and will be removed in a future version.  Do not pass it."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""In a future version, the Index constructor will not infer numeric ""            ""dtypes when passed object-dtype sequences (matching Series behavior', '            (                ""The \'set_value\' method is deprecated, and ""                ""will be removed in a future version.""            ', '""{obj}.itemsize is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '""{obj}.base is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '                ""parameter names is deprecated and will be removed in a future ""                ""version. Use the name parameter instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '            f""Passing method to {type(self', '""{obj}.strides is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '            ""Index.is_type_compatible is deprecated and will be removed in a ""            ""future version."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""`item` has been deprecated and will be removed in a "" ""future version"",            FutureWarning,            stacklevel=2,        ', '            ""Index.ravel returning ndarray is deprecated; in a future version ""            ""this will return a view on self."",            FutureWarning,            stacklevel=find_stack_level,        ', 'msg.format(freq'}",set()
pandas.Series.argmin,pandas.Series.idxmin,"{'msg, FutureWarning, stacklevel=level', '            ""Index.is_all_dates is deprecated, will be removed in a future version. ""            ""check index.inferred_type instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '""{obj}.flags is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '                    ""In a future version, the union of DatetimeIndex objects ""                    ""with mismatched timezones will cast both to UTC instead of ""                    ""object dtype. To retain the old behavior, ""                    ""use `index.astype(object', '                        ""reindexing with a non-unique Index is deprecated and ""                        ""will raise in a future version."",                        FutureWarning,                        stacklevel=find_stack_level,                    ', '            ""{obj}.flags is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '            ""{obj}.strides is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '            ""The Index._get_attributes_dict method is deprecated, and will be ""            ""removed in a future version"",            DeprecationWarning,            stacklevel=find_stack_level,        ', '                    (""using a dict with renaming ""                     ""is deprecated and will be removed in a future ""                     ""version""', '                    ""In a future version, passing a SparseArray to pd.Index ""                    ""will store that array directly instead of converting to a ""                    ""dense numpy ndarray. To retain the old behavior, use ""                    ""pd.Index(arr.to_numpy', '            ""Index.__xor__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__xor__.  Use index.symmetric_difference(other', '            ""Index.__and__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__and__.  Use index.intersection(other', '                    ""Slicing a positional slice with .loc is not supported, ""                    ""and will raise TypeError in a future version.  ""                    ""Use .loc with labels or .iloc with positions instead."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '                ""parameter dtype is deprecated and will be removed in a future ""                ""version. Use the astype method instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""{obj}.base is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '""\'asobject\' is deprecated. Use \'astype(object', '            ""get_value is deprecated and will be removed in a future version. ""            ""Use Series[key] instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""{obj}.itemsize is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '            ""The \'to_native_types\' method is deprecated and will be removed in ""            ""a future version. Use \'astype(str', '            ""{obj}.data is deprecated and will be removed ""            ""in a future version"".format(obj=type(self', '""{obj}.data is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '                f""{err}, sort order is undefined for incomparable objects."",                RuntimeWarning,                stacklevel=find_stack_level,            ', '            ""Index.asi8 is deprecated and will be removed in a future version."",            FutureWarning,            stacklevel=find_stack_level,        ', '                ""Explicitly passing `name=None` currently preserves the Index\'s name ""                ""or uses a default name of 0. This behaviour is deprecated, and in ""                ""the future `None` will be used as the name of the resulting ""                ""DataFrame column."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""\'asobject\' is deprecated. Use \'astype(object', '            ""Index.is_mixed is deprecated and will be removed in a future version. ""            ""Check index.inferred_type directly instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""Index.__or__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__or__.  Use index.union(other', '                ""Passing keywords other than \'data\', \'dtype\', \'copy\', \'name\', ""                ""\'tupleize_cols\' is deprecated and will raise TypeError in a ""                ""future version.  Use the specific Index subclass directly instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '""Adding/subtracting array of DateOffsets to ""                      ""{cls} not vectorized""                      .format(cls=type(self', '                f""\'{name}\' argument in {methodname} is deprecated ""                ""and will be removed in a future version.  Do not pass it."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""In a future version, the Index constructor will not infer numeric ""            ""dtypes when passed object-dtype sequences (matching Series behavior', '            (                ""The \'set_value\' method is deprecated, and ""                ""will be removed in a future version.""            ', '""{obj}.itemsize is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '""{obj}.base is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '                ""parameter names is deprecated and will be removed in a future ""                ""version. Use the name parameter instead."",                FutureWarning,                stacklevel=find_stack_level,            ', '            f""Passing method to {type(self', '""{obj}.strides is deprecated and will be removed ""                      ""in a future version"".format(obj=type(self', '            ""Index.is_type_compatible is deprecated and will be removed in a ""            ""future version."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""`item` has been deprecated and will be removed in a "" ""future version"",            FutureWarning,            stacklevel=2,        ', '            ""Index.ravel returning ndarray is deprecated; in a future version ""            ""this will return a view on self."",            FutureWarning,            stacklevel=find_stack_level,        ', 'msg.format(freq'}",set()
pandas.tslib.NaTType,type(pandas.NaT),"{'            ""Index.ravel returning ndarray is deprecated; in a future version ""            ""this will return a view on self."",            FutureWarning,            stacklevel=2,        ', '                    ""In a future version, the union of DatetimeIndex objects ""                    ""with mismatched timezones will cast both to UTC instead of ""                    ""object dtype. To retain the old behavior, ""                    ""use `index.astype(object', '            ""Index.is_mixed is deprecated and will be removed in a future version. ""            ""Check index.inferred_type directly instead."",            FutureWarning,            stacklevel=2,        ', '            ""Index.__xor__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__xor__.  Use index.symmetric_difference(other', '        ""`to_time` has been moved, should be imported from pandas.core.tools.times. ""        ""This alias will be removed in a future version."",        FutureWarning,        stacklevel=find_stack_level,    ', '            ""Index.__and__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__and__.  Use index.intersection(other', '                f""casting {self.dtype} values to int64 with .astype(...', '            ""The \'to_native_types\' method is deprecated and will be removed in ""            ""a future version. Use \'astype(str', '            ""Adding/subtracting object-dtype array to ""            f""{type(self', '                ""parameter dtype is deprecated and will be removed in a future ""                ""version. Use the astype method instead."",                FutureWarning,                stacklevel=2,            ', '                f""\'{name}\' argument in {methodname} is deprecated ""                ""and will be removed in a future version.  Do not pass it."",                FutureWarning,                stacklevel=3,            ', '        ""`to_time` has been moved, should be imported from pandas.core.tools.times.  ""        ""This alias will be removed in a future version."",        FutureWarning,        stacklevel=2,    ', '            ""Index.__or__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__or__.  Use index.union(other', '            ""get_value is deprecated and will be removed in a future version. ""            ""Use Series[key] instead"",            FutureWarning,            stacklevel=2,        ', '            ""Index.is_all_dates is deprecated, will be removed in a future version.  ""            ""check index.inferred_type instead"",            FutureWarning,            stacklevel=2,        ', '                f""Passing {type(fill_value', '            (                ""The \'set_value\' method is deprecated, and ""                ""will be removed in a future version.""            ', '            ""Index.asi8 is deprecated and will be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '                ""Passing keywords other than \'data\', \'dtype\', \'copy\', \'name\', ""                ""\'tupleize_cols\' is deprecated and will raise TypeError in a ""                ""future version.  Use the specific Index subclass directly instead"",                FutureWarning,                stacklevel=2,            ', '                    ""Slicing a positional slice with .loc is not supported, ""                    ""and will raise TypeError in a future version.  ""                    ""Use .loc with labels or .iloc with positions instead."",                    FutureWarning,                    stacklevel=5,                ', '                f""{err}, sort order is undefined for incomparable objects"",                RuntimeWarning,                stacklevel=4,            '}",set()
pandas.tools.plotting,pandas.plotting,"{'""\'pandas.tools.plotting.{t}\' is deprecated, ""                          ""import \'pandas.plotting.{t}\' instead."".format(t=t'}","{""'pandas.plotting.{t}'""}"
pandas.scatter_matrix,pandas.plotting.scatter_matrix,"{""    'pandas.scatter_matrix', pandas.plotting.scatter_matrix,    'pandas.plotting.scatter_matrix'"", ""    'pandas.scatter_matrix', pandas.plotting.scatter_matrix, '0.20.0',    'pandas.plotting.scatter_matrix'""}","{'pandas.plotting.scatter_matrix,', ""'pandas.plotting.scatter_matrix'"", ""'pandas.scatter_matrix',"", ""'0.20.0',""}"
pandas.SparseArray.to_dense,pandas.arrays.SparseArray.to_dense,"{'            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use the \'to_dense\' method instead."",            FutureWarning,            stacklevel=2,        ', '            ""DataFrame/Series.to_dense is deprecated ""            ""and will be removed in a future version"",            FutureWarning,            stacklevel=2,        ', '            ""Categorical.to_dense is deprecated and will be removed in ""            ""a future version.  Use np.asarray(cat'}","{""the 'to_dense' method""}"
pandas.Series.sortlevel,Series.sort_index,"{'""sortlevel is deprecated, use sort_index(level=...', '""sortlevel with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""sortlevel is deprecated, use sort_index(level= ...'}",{'sort_index(level='}
pandas.DataFrame.sortlevel,DataFrame.sort_index,"{'""sortlevel is deprecated, use sort_index(level=...', '""sortlevel with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""sortlevel is deprecated, use sort_index(level= ...'}",{'sort_index(level='}
pandas.Series.consolidate,0,"{'""consolidate is deprecated and will be removed in a ""                      ""future release."", FutureWarning, stacklevel=2'}","{'release.,'}"
pandas.DataFrame.consolidate,0,"{'""consolidate is deprecated and will be removed in a ""                      ""future release."", FutureWarning, stacklevel=2'}","{'release.,'}"
pandas.Panel.consolidate,0,"{'""consolidate is deprecated and will be removed in a ""                      ""future release."", FutureWarning, stacklevel=2'}","{'release.,'}"
pandas.pnow,Period.now,"{'""pd.pnow and pandas.core.indexes.period.pnow ""                  ""are deprecated. Please use Period.now"",                  FutureWarning, stacklevel=2'}","{'period.now,'}"
pandas.Expr,0,"{'""pd.Expr is deprecated as it is not ""                  ""applicable to user code"",                  FutureWarning, stacklevel=2', '""passing multiple values to Expr is deprecated, ""                          ""pass the where as a single string"",                          DeprecationWarning', '""passing multiple values to Expr is deprecated, ""                          ""pass the where as a single string"",                          FutureWarning, stacklevel=10', '""passing a dict to Expr is deprecated, ""                          ""pass the where as a single string"",                          DeprecationWarning', '""passing a tuple into Expr is deprecated, ""                          ""pass the where as a single string"",                          DeprecationWarning', '""passing a tuple into Expr is deprecated, ""                          ""pass the where as a single string"",                          FutureWarning, stacklevel=10', '""passing a tuple into Expr is deprecated, ""                          ""pass the where as a single string"",                          DeprecationWarning, stacklevel=10', '""passing a dict to Expr is deprecated, ""                          ""pass the where as a single string"",                          FutureWarning, stacklevel=10'}",{'pd.expr'}
pandas.match,0,"{'                ""Boolean Series key will be reindexed to match "" ""DataFrame index."",                UserWarning,                stacklevel=3,            ', '                    ""In a future version, the union of DatetimeIndex objects ""                    ""with mismatched timezones will cast both to UTC instead of ""                    ""object dtype. To retain the old behavior, ""                    ""use `index.astype(object', '""This is not a match."", category', '                ""Length of header or names does not match length of data. This leads ""                ""to a loss of data with index_col=False."",                ParserWarning,                stacklevel=6,            ', '                ""This pattern has match groups. To actually get the""                "" groups, use str.extract."",                UserWarning,                stacklevel=3,            ', '            ""Index.__xor__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__xor__.  Use index.symmetric_difference(other', '            ""Index.__and__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__and__.  Use index.intersection(other', '""This pattern has match groups. To actually get the""                          "" groups, use str.extract."", UserWarning', '""Do not match that"", category', '                ""Boolean Series key will be reindexed to match DataFrame index."",                UserWarning,                stacklevel=find_stack_level,            ', '""This pattern has match groups. To actually get the""                      "" groups, use str.extract."", UserWarning', '""Boolean Series key will be reindexed to match ""                              ""DataFrame index."", UserWarning', '""Boolean Series key will be reindexed to match ""                              ""DataFrame index."", UserWarning, stacklevel=3', '                        ""In a future version, passing float-dtype values and an ""                        ""integer dtype to DataFrame will retain floating dtype ""                        ""if they cannot be cast losslessly (matching Series behavior', '""Do not match that either"", category', '""In future versions of pandas, match will change to""                      "" always return a bool indexer."""""", UserWarning', '""Do not match it"", target_category', '""This pattern has match groups. To actually get the""                          "" groups, use str.extract."", UserWarning, stacklevel=3', '            ""This dataframe has a column name that matches the \'value_name\' column ""            ""name of the resultiing Dataframe. ""            ""In the future this will raise an error, please set the \'value_name\' ""            ""parameter of DataFrame.melt to a unique name."",            FutureWarning,            stacklevel=3,        ', '""This pattern has match groups. To actually get the""                          "" groups, use str.extract."", UserWarning,                          stacklevel=3', '                ""This pattern is interpreted as a regular expression, and has ""                ""match groups. To actually get the groups, use str.extract."",                UserWarning,                stacklevel=find_stack_level,            ', '                    value_label_mismatch_doc.format(self.labname', '                                    ""In a future version, constructing a Series ""                                    ""from datetime64[ns] data and a ""                                    ""DatetimeTZDtype will interpret the data ""                                    ""as wall-times instead of ""                                    ""UTC times, matching the behavior of ""                                    ""DatetimeIndex. To treat the data as UTC ""                                    ""times, use pd.Series(data', '            ""Index.__or__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__or__.  Use index.union(other', '""pd.match is deprecated and will be removed ""                  ""in a future version"",                  FutureWarning, stacklevel=2', '            ""This dataframe has a column name that matches the \'value_name\' column ""            ""name of the resulting Dataframe. ""            ""In the future this will raise an error, please set the \'value_name\' ""            ""parameter of DataFrame.melt to a unique name."",            FutureWarning,            stacklevel=3,        ', '                ""Boolean Series key will be reindexed to match DataFrame index."",                UserWarning,                stacklevel=3,            ', 'value_label_mismatch_doc.format(catarray.name', '""This pattern has match groups. To actually get the""                      "" groups, use str.extract."", UserWarning, stacklevel=3', '            ""In a future version, the Index constructor will not infer numeric ""            ""dtypes when passed object-dtype sequences (matching Series behavior', '""In future versions of pandas, match will change to""                      "" always return a bool indexer."", UserWarning', '                    ""This pattern has match groups. To actually get the ""                    ""groups, use str.extract."",                    UserWarning,                    stacklevel=3,                ', '""This pattern has match groups. To actually get the""                      "" groups, use str.extract."""""", UserWarning', '                    ""Setitem-like behavior with mismatched timezones is deprecated ""                    ""and will change in a future version. Instead of raising ""                    ""(or for Index, Series, and DataFrame methods, coercing to ""                    ""object dtype', '""\'as_indexer\' keyword was specified but is ignored ""                      ""(match now returns a boolean indexer by default', '""Boolean Series key will be reindexed to match ""                          ""DataFrame index."", UserWarning, stacklevel=3', '                ""Length of header or names does not match length of data. This leads ""                ""to a loss of data with index_col=False."",                ParserWarning,                stacklevel=find_stack_level,            ', '""Another unmatched warning."", category', '""In future versions of pandas, match will change to""                      "" always return a bool indexer."", FutureWarning,                      stacklevel=3', '                ""This pattern has match groups. To actually get the ""                ""groups, use str.extract."",                UserWarning,                stacklevel=3,            ', '            ""This dataframe has a column name that matches the \'value_name\' column ""            ""name of the resulting Dataframe. ""            ""In the future this will raise an error, please set the \'value_name\' ""            ""parameter of DataFrame.melt to a unique name."",            FutureWarning,            stacklevel=find_stack_level,        ', '                    value_label_mismatch_doc.format(catarray.name'}","{'str.extract.,'}"
pandas.groupby,0,"{'                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.var(level=1', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.count(level=1', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.sum(level=1', '""pd.groupby is deprecated and will be removed ""                  ""Please use the Series.groupby or ""                  ""DataFrame.groupby methods"",                  FutureWarning, stacklevel=2', '""tgroupby is deprecated. Use groupby with axis=1"",                      FutureWarning', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.median(level=1', '""the dropna={dropna} keyword is deprecated,""                              ""use dropna=\'all\' instead. ""                              ""For a Series groupby, dropna must be ""                              ""either None, \'any\' or \'all\'."".format(                                  dropna=dropna', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. ser.count(level=1', '""pd.groupby is deprecated and will be removed; ""                  ""Please use the Series.groupby or ""                  ""DataFrame.groupby methods"",                  FutureWarning, stacklevel=2', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.any(level=1', '""the dropna=\'%s\' keyword is deprecated,""                              ""use dropna=\'all\' instead. ""                              ""For a Series groupby, dropna must be ""                              ""either None, \'any\' or \'all\'."" % (dropna', '                ""Using the level keyword in DataFrame and Series aggregations is ""                ""deprecated and will be removed in a future version. Use groupby ""                ""instead. df.mad(level=1'}","{""dropna='all'"", 'groupby'}"
pandas.get_store,0,"{'        ""get_store is deprecated and be ""        ""removed in a future version\\n""        ""HDFStore(path, **kwargs'}",set()
pandas.PeriodIndex.to_datetime,0,"{'""to_datetime is deprecated. Use pd.to_datetime(...', '""to_datetime is deprecated. Use self.to_timestamp(...'}","{'pd.to_datetime(...', 'self.to_timestamp(...'}"
pandas.Index.to_datetime,0,"{'""to_datetime is deprecated. Use pd.to_datetime(...', '""to_datetime is deprecated. Use self.to_timestamp(...'}","{'pd.to_datetime(...', 'self.to_timestamp(...'}"
pandas.DatetimeIndex.to_datetime,0,"{'""to_datetime is deprecated. Use pd.to_datetime(...', '""to_datetime is deprecated. Use self.to_timestamp(...'}","{'pd.to_datetime(...', 'self.to_timestamp(...'}"
pandas.tseries.util.pivot_annual,pivot_table,set(),set()
pandas.tseries.util.isleapyear,is_leap_year,set(),set()
pandas.Panel4D,0,"{'""\\nPanel4D is deprecated and will be removed in a ""                  ""future version.\\nThe recommended way to represent ""                  ""these types of n-dimensional data are with\\n""                  ""the `xarray package ""                  ""<http://xarray.pydata.org/en/stable/>`__.\\n""                  ""Pandas provides a `.to_xarray` method to help ""                  ""automate this conversion.\\n"",                  FutureWarning, stacklevel=2'}","{'conversion.\\n,', 'version.\\nthe', '<http://xarray.pydata.org/en/stable/>__.\\n'}"
pandas.io.json.json_normalize,pandas.json_normalize,"{'    ""pandas.io.json.json_normalize"", _json_normalize, ""1.0.0"", ""pandas.json_normalize""'}","{'pandas.json_normalize', 'pandas.io.json.json_normalize,', '1.0.0,'}"
pandas.datetime,datetime,"{'                ""Treating datetime data as categorical rather than numeric in ""                ""`.describe` is deprecated and will be removed in a future ""                ""version of pandas. Specify `datetime_is_numeric=True` to ""                ""silence this warning and adopt the future behavior now."",                FutureWarning,                stacklevel=5,            ', '                                ""Data is timezone-aware. Converting ""                                ""timezone-aware data to timezone-naive by ""                                ""passing dtype=\'datetime64[ns]\' to ""                                ""DataFrame or Series is deprecated and will ""                                ""raise in a future version. Use ""                                ""`pd.Series(values', '        """"""        Use pd.to_datetime(date_col + "" "" + time_col', '""using \'+\' to provide set union with datetimelike Indexes is deprecated, ""                              ""use .union"",FutureWarning', '""using \'-\' to provide set differences with datetimelike Indexes is deprecated, ""                              ""use .difference"",FutureWarning, stacklevel=2', '""The \'convert_datetime64\' parameter is ""                          ""deprecated and will be removed in a future ""                          ""version"",                          FutureWarning, stacklevel=2', '            ""Passing datetime64-dtype data to TimedeltaIndex is ""            ""deprecated, will raise a TypeError in a future ""            ""version"",            FutureWarning,            stacklevel=4,        ', '                        ""Treating datetime data as categorical rather than numeric in ""                        ""`.describe` is deprecated and will be removed in a future ""                        ""version of pandas. Specify `datetime_is_numeric=True` to ""                        ""silence this warning and adopt the future behavior now."",                        FutureWarning,                        stacklevel=stacklevel,                    ', '                ""DataFrame.mean and DataFrame.median with numeric_only=None ""                ""will include datetime64 and datetime64tz columns in a ""                ""future version."",                FutureWarning,                stacklevel=5,            ', '""convert_objects is deprecated.  Use the data-type specific ""             ""converters pd.to_datetime, pd.to_timedelta and pd.to_numeric."",             FutureWarning, stacklevel=2', '                    ""Indexing a DataFrame with a datetimelike index using a single ""                    ""string to slice the rows, like `frame[string]`, is deprecated ""                    ""and will be removed in a future version. Use `frame.loc[string]` ""                    ""instead."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '        """"""        Use pd.to_datetime instead."""""",        FutureWarning,        stacklevel=2,    ', '""using \'-\' to provide set differences with ""                              ""datetimelike Indexes is deprecated, ""                              ""use .difference"", FutureWarning, stacklevel=2', '""to_datetime is deprecated. Use self.to_timestamp(...', '""to_datetime is deprecated. Use pd.to_datetime(...', '                                    ""In a future version, constructing a Series ""                                    ""from datetime64[ns] data and a ""                                    ""DatetimeTZDtype will interpret the data ""                                    ""as wall-times instead of ""                                    ""UTC times, matching the behavior of ""                                    ""DatetimeIndex. To treat the data as UTC ""                                    ""times, use pd.Series(data', '                ""The \'convert_datetime64\' parameter is ""                ""deprecated and will be removed in a future ""                ""version"",                FutureWarning,                stacklevel=2,            ', '""using \'+\' to provide set union with datetimelike Indexes is deprecated, ""                              ""use .union"",FutureWarning, stacklevel=2', '        """"""        Use pd.to_datetime({""year"": year_col, ""month"": month_col, ""day"": day_col}', '                ""The pandas.datetime class is deprecated ""                ""and will be removed from pandas in a future version. ""                ""Import from datetime module instead."",                FutureWarning,                stacklevel=2,            ', '                ""Treating datetime data as categorical rather than numeric in ""                ""`.describe` is deprecated and will be removed in a future ""                ""version of pandas. Specify `datetime_is_numeric=True` to ""                ""silence this warning and adopt the future behavior now."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""DataFrame.mean and DataFrame.median with numeric_only=None ""                ""will include datetime64 and datetime64tz columns in a ""                ""future version."",                FutureWarning,                stacklevel=3,            ', '                ""Data is timezone-aware. Converting ""                ""timezone-aware data to timezone-naive by ""                ""passing dtype=\'datetime64[ns]\' to ""                ""DataFrame or Series is deprecated and will ""                ""raise in a future version. Use ""                ""`pd.Series(values', '        """"""        Use pd.to_datetime({""year"": year_col, ""month"": month_col, ""day"": day_col,        ""hour"": hour_col, ""minute"": minute_col, second"": second_col}', '""Passing datetime64-dtype data to TimedeltaIndex is ""                      ""deprecated, will raise a TypeError in a future ""                      ""version"",                      FutureWarning, stacklevel=4', '""using \'-\' to provide set differences with datetimelike Indexes is deprecated, ""                              ""use .difference"",FutureWarning', '            ""is_datetimelike is deprecated and will be removed in a future version."",            FutureWarning,            stacklevel=2,        ', '        """"""        Use pd.to_datetime instead."""""",        FutureWarning,        stacklevel=find_stack_level,    ', '        ""\'is_datetimetz\' is deprecated and will be removed in a ""        ""future version.  Use \'is_datetime64tz_dtype\' instead."",        FutureWarning,        stacklevel=2,    ', '                    ""Indexing a DataFrame with a datetimelike index using a single ""                    ""string to slice the rows, like `frame[string]`, is deprecated ""                    ""and will be removed in a future version. Use `frame.loc[string]` ""                    ""instead."",                    FutureWarning,                    stacklevel=3,                ', '""\'is_datetimetz\' is deprecated and will be removed in a ""                  ""future version.  Use \'is_datetime64tz_dtype\' instead."",                  FutureWarning, stacklevel=2', '""using \'+\' to provide set union with ""                              ""datetimelike Indexes is deprecated, ""                              ""use .union"", FutureWarning, stacklevel=2', '                ""The pandas.datetime class is deprecated ""                ""and will be removed from pandas in a future version. ""                ""Import from datetime instead."",                FutureWarning,                stacklevel=3,            ', '                    ""In a future version, Block.make_block_same_class will ""                    ""assume that datetime64 and timedelta64 ndarrays have ""                    ""already been cast to DatetimeArray and TimedeltaArray, ""                    ""respectively."",                    DeprecationWarning,                    stacklevel=find_stack_level,                ', '                    ""DataFrame.mean and DataFrame.median with numeric_only=None ""                    ""will include datetime64 and datetime64tz columns in a ""                    ""future version."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '            ""is_datetimelike is deprecated and will be removed in a future version."",            FutureWarning,            stacklevel=find_stack_level,        ', '                    ""Using a `date` object for fill_value with `datetime64[ns]` ""                    ""dtype is deprecated. In a future version, this will be cast ""                    ""to object dtype. Pass `fill_value=Timestamp(date_obj', '            ""The pandas.datetime class is deprecated ""            ""and will be removed from pandas in a future version. ""            ""Import from datetime module instead."",            FutureWarning,            stacklevel=2,        '}","{'frame.loc[string]', ""'is_datetime64tz_dtype'"", 'pd.to_datetime'}"
pandas.np,numpy,"{""'Installed openpyxl is not supported at this time. Use >={} and <{}.'            .format(openpyxl_compat.start_ver, openpyxl_compat.stop_ver"", '""sortlevel with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '            ""Categorical.to_dense is deprecated and will be removed in ""            ""a future version.  Use np.asarray(cat', '""set_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '        ""argmin"",        idxmin,        ""0.21.0"",        msg=dedent(            """"""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '                ""inplace is deprecated and will be removed in a future version."",                FutureWarning,                stacklevel=3,            ', '                ""The `inplace` parameter in pandas.Categorical.""                ""rename_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""The `inplace` parameter in pandas.Categorical.""                ""remove_unused_categories is deprecated and ""                ""will be removed in a future version."",                FutureWarning,                stacklevel=find_stack_level,            ', '""drop_duplicates with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '            ""compression has no effect when passing a non-binary object as input."",            RuntimeWarning,            stacklevel=2,        ', '                ""Boolean inputs to the `inclusive` argument are deprecated in""                ""favour of `both` or `neither`."",                FutureWarning,                stacklevel=2,            ', '            ""compression has no effect when passing a non-binary object as input."",            RuntimeWarning,            stacklevel=find_stack_level,        ', ""'list-likes other than Series, Index, or '                                  'np.ndarray WITHIN another list-like are '                                  'deprecated and will be removed in a future '                                  'version.', FutureWarning, stacklevel=3"", '                        ""As the xlwt package is no longer maintained, the xlwt ""                        ""engine will be removed in a future version of pandas. ""                        ""This is the only engine in pandas that supports writing ""                        ""in the xls format. Install openpyxl and write to an xlsx ""                        ""file instead. You can set the option io.excel.xls.writer ""                        ""to \'xlwt\' to silence this warning. While this option is ""                        ""deprecated and will also raise a warning, it can ""                        ""be globally set and the warning suppressed."",                        FutureWarning,                        stacklevel=4,                    ', '""sort is deprecated, use sort_values(inplace=True', '            ""The pandas.np module is deprecated ""            ""and will be removed from pandas in a future version. ""            ""Import numpy directly instead"",            FutureWarning,            stacklevel=2,        ', '            ""The pandas.np module is deprecated ""            ""and will be removed from pandas in a future version. ""            ""Import numpy directly instead."",            FutureWarning,            stacklevel=2,        ', '""rename with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""setting `levels` directly"",                             partial(set_levels, inplace=True,                                     verify_integrity=True', '                    f""Your version of xlrd is {xlrd_version}. In xlrd >= 2.0, ""                    f""only the xls format is supported. Install ""                    f""openpyxl instead."",                    FutureWarning,                    stacklevel=stacklevel,                ', '                ""The `inplace` parameter in pandas.Categorical.""                ""reorder_categories is deprecated and will be removed in ""                ""a future version. Reordering categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=find_stack_level,            ', '""Series.fillna with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""reset_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '                ""The `inplace` parameter in pandas.Categorical.""                ""remove_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=2,            ', '                ""The index argument has been deprecated and will be ""                ""removed in a future version. Use a function like np.full ""                ""to construct an array with the desired repeats of the ""                ""scalar value instead.\\n\\n"",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""set_axis currently defaults to operating inplace.\\nThis ""                ""will change in a future version of pandas, use ""                ""inplace=True to avoid this warning."",                FutureWarning,                stacklevel=2,            ', '            ""`real` is deprecated and will be removed in a future version. ""            ""To eliminate this warning for a Series `ser`, use ""            ""`np.real(ser.to_numpy', '                ""The `inplace` parameter in pandas.Categorical.""                ""add_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=2,            ', '""Series.reset_index with inplace=True will ""                              ""return None from pandas 0.11 onward"",                              FutureWarning', '                ""The `inplace` parameter in pandas.Categorical.""                ""reorder_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=2,            ', '        \'argmin\', idxmin, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmin\' is deprecated, use \'idxmin\'        instead.        The behavior of \'argmin\' will be corrected to return the positional        minimum in the future. For now, use \'series.values.argmin\' or        \'np.argmin(np.array(values', '""sort/sort_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', ""                'set_axis currently defaults to operating inplace.\\nThis '                'will change in a future version of pandas, use '                'inplace=True to avoid this warning.',                FutureWarning, stacklevel=2"", '""Series.replace with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '                    ""eval expressions containing an assignment currently""                    ""default to operating inplace.\\nThis will change in ""                    ""a future version of pandas, use inplace=True to ""                    ""avoid this warning."",                    FutureWarning, stacklevel=3', '""fillna with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""replace with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '            ""The \'get_values\' method is deprecated and will be removed in a ""            ""future version. Use \'.values\' or \'np.asarray(..', '        ""argmax"",        idxmax,        ""0.21.0"",        msg=dedent(            """"""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '            ""`imag` is deprecated and will be removed in a future version. ""            ""To eliminate this warning for a Series `ser`, use ""            ""`np.imag(ser.to_numpy', '""setting labels directly"",                             partial(set_labels, inplace=True,                                     verify_integrity=True', '                ""The `inplace` parameter in pandas.Categorical.""                ""remove_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""The `inplace` parameter in pandas.Categorical.""                ""set_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=2,            ', '                    f""Your version of xlrd is {xlrd_version}. In xlrd >= 2.0, ""                    f""only the xls format is supported. As a result, the ""                    f""openpyxl engine will be used if it is installed and the ""                    f""engine argument is not specified. Install ""                    f""openpyxl instead."",                    FutureWarning,                    stacklevel=stacklevel,                ', '                ""compression has no effect when passing file-like object as input."",                RuntimeWarning,                stacklevel=2,            ', '                ""The `inplace` parameter in pandas.Categorical.""                ""rename_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=2,            ', '                ""inplace is deprecated and will be removed in a future version."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""The `inplace` parameter in pandas.Categorical.""                ""remove_unused_categories is deprecated and ""                ""will be removed in a future version."",                FutureWarning,                stacklevel=2,            ', '""Series.rename with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '                ""Boolean inputs to the `inclusive` argument are deprecated in ""                ""favour of `both` or `neither`."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""inplace is deprecated and will be removed in a future version."",                FutureWarning,                stacklevel=2,            ', '                        ""As the xlwt package is no longer maintained, the xlwt ""                        ""engine will be removed in a future version of pandas. ""                        ""This is the only engine in pandas that supports writing ""                        ""in the xls format. Install openpyxl and write to an xlsx ""                        ""file instead. You can set the option io.excel.xls.writer ""                        ""to \'xlwt\' to silence this warning. While this option is ""                        ""deprecated and will also raise a warning, it can ""                        ""be globally set and the warning suppressed."",                        FutureWarning,                        stacklevel=find_stack_level,                    ', '                ""The pandas.np module is deprecated ""                ""and will be removed from pandas in a future version. ""                ""Import numpy directly instead"",                FutureWarning,                stacklevel=2,            ', '        \'argmax\', idxmax, \'0.21.0\',        msg=dedent(""""""        The current behaviour of \'Series.argmax\' is deprecated, use \'idxmax\'        instead.        The behavior of \'argmax\' will be corrected to return the positional        maximum in the future. For now, use \'series.values.argmax\' or        \'np.argmax(np.array(values', '                ""The `inplace` parameter in pandas.Categorical.""                ""add_categories is deprecated and will be removed in ""                ""a future version. Removing unused categories will always ""                ""return a new Categorical object."",                FutureWarning,                stacklevel=find_stack_level,            ', '                        ""list-likes other than Series, Index, or ""                        ""np.ndarray WITHIN another list-like are ""                        ""deprecated and will be removed in a future ""                        ""version."",                        FutureWarning,                        stacklevel=4,                    '}","{""'idxmin'"", 'a function like np.full to construct an array with the desired repeats of the scalar value', ""'idxmax'""}"
pandas.SparseArray,pandas.arrays.SparseArray,"{'                ""The pandas.SparseArray class is deprecated ""                ""and will be removed from pandas in a future version. ""                ""Use pandas.arrays.SparseArray instead."",                FutureWarning,                stacklevel=2,            ', '                        f""Creating SparseArray from {data.dtype} data ""                        ""loses timezone information. Cast to object before ""                        ""sparse to retain timezone information."",                        UserWarning,                        stacklevel=find_stack_level,                    ', '            ""The pandas.SparseArray class is deprecated ""            ""and will be removed from pandas in a future version. ""            ""Use pandas.arrays.SparseArray instead."",            FutureWarning,            stacklevel=2,        ', '                        f""Creating SparseArray from {data.dtype} data ""                        ""loses timezone information.  Cast to object before ""                        ""sparse to retain timezone information."",                        UserWarning,                        stacklevel=2,                    ', '                ""The pandas.SparseArray class is deprecated ""                ""and will be removed from pandas in a future version. ""                ""Use pandas.arrays.SparseArray instead."",                FutureWarning,                stacklevel=3,            ', '                    ""In a future version, passing a SparseArray to pd.Index ""                    ""will store that array directly instead of converting to a ""                    ""dense numpy ndarray. To retain the old behavior, use ""                    ""pd.Index(arr.to_numpy'}",{'pandas.arrays.sparsearray'}
pandas.Categorical.take_nd,Categorical.take,"{'            ""CategoricalIndex.take_nd is deprecated, use CategoricalIndex.take ""            ""instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""CategoricalIndex.take_nd is deprecated, use CategoricalIndex.take instead"",            FutureWarning,            stacklevel=2,        ', '            ""Categorical.take_nd is deprecated, use Categorical.take instead"",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""Categorical.take_nd is deprecated, use Categorical.take instead"",            FutureWarning,            stacklevel=2,        '}","{'categorical.take', 'categoricalindex.take'}"
pandas.core.index,0,"{'                ""Boolean Series key will be reindexed to match "" ""DataFrame index."",                UserWarning,                stacklevel=3,            ', '            ""Passing a dict as an indexer is deprecated and will raise in ""            ""a future version. Use a list instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""Index.is_all_dates is deprecated, will be removed in a future version. ""            ""check index.inferred_type instead."",            FutureWarning,            stacklevel=find_stack_level,        ', ""'_lastTimeWithValue', last_valid_index"", '""sortlevel is deprecated, use sort_index(level= ...', '                ""A future version of pandas will perform index ""                ""alignment when `others` is a Series/Index/""                ""DataFrame (or a list-like containing one', '""set_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', ""'dropping on a non-lexsorted multi-index'                                      ' without a level parameter may impact '                                      'performance.',                                      PerformanceWarning,                                      stacklevel=3"", '                    ""In a future version, the union of DatetimeIndex objects ""                    ""with mismatched timezones will cast both to UTC instead of ""                    ""object dtype. To retain the old behavior, ""                    ""use `index.astype(object', '                        ""reindexing with a non-unique Index is deprecated and ""                        ""will raise in a future version."",                        FutureWarning,                        stacklevel=find_stack_level,                    ', '                ""DataFrame indexer for .iloc is deprecated and will be removed in ""                ""a future version.\\n""                ""consider using .loc with a DataFrame indexer for automatic alignment."",                FutureWarning,                stacklevel=find_stack_level,            ', '                ""by argument to sort_index is deprecated, ""                ""please use .sort_values(by=...', '""by argument to sort_index is deprecated, pls use ""                          "".sort_values(by=...', '""by argument to sort_index is deprecated, ""                          ""please use .sort_values(by=...', '                ""\'showindex\' is deprecated. Only \'index\' will be used ""                ""in a future version. Use \'index\' to silence this warning."",                FutureWarning,                stacklevel=2,            ', '""Pandas doesn\'t allow columns to be ""                                  ""created via a new attribute name - see ""                                  ""https://pandas.pydata.org/pandas-docs/""                                  ""stable/indexing.html#attribute-access"",                                  stacklevel=2', '                        (""\'%s\' is both a column name and an index level.\\n""                         ""Defaulting to column but ""                         ""this will raise an ambiguity error in a ""                         ""future version""', '""\'fromValue\', can call Series(value, index=index', '                ""DataFrame indexer for .iloc is deprecated and will be removed in""                ""a future version.\\n""                ""consider using .loc with a DataFrame indexer for automatic alignment."",                FutureWarning,                stacklevel=3,            ', '            ""Index.__xor__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__xor__.  Use index.symmetric_difference(other', '            ""Index.is_mixed is deprecated and will be removed in a future version. ""            ""Check index.inferred_type directly instead."",            FutureWarning,            stacklevel=2,        ', '""pd.pnow and pandas.core.indexes.period.pnow ""                  ""are deprecated. Please use Period.now"",                  FutureWarning, stacklevel=2', '                ""\'showindex\' is deprecated. Only \'index\' will be used ""                ""in a future version. Use \'index\' to silence this warning."",                FutureWarning,                stacklevel=find_stack_level,            ', '            ""Passing a set as an indexer is deprecated and will raise in ""            ""a future version. Use a list instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '            ""Index.__and__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__and__.  Use index.intersection(other', '""Replace usage of .rows with .index, will be removed ""                      ""in next release"", FutureWarning', '            ""indexing past lexsort depth may impact performance."",            PerformanceWarning,            stacklevel=10,        ', '""slice indexers when using iloc should be integers ""                                  ""and not floating point"",FutureWarning', '(""TimeSeries broadcasting along DataFrame index ""                           ""by default is deprecated. Please use ""                           ""DataFrame.<op> to explicitly broadcast arithmetic ""                           ""operations along the index""', '                ""Boolean Series key will be reindexed to match DataFrame index."",                UserWarning,                stacklevel=find_stack_level,            ', '                ""The \'how\' keyword in PeriodIndex.astype is deprecated and ""                ""will be removed in a future version. ""                ""Use index.to_timestamp(how=how', '                    ""Indexing a DataFrame with a datetimelike index using a single ""                    ""string to slice the rows, like `frame[string]`, is deprecated ""                    ""and will be removed in a future version. Use `frame.loc[string]` ""                    ""instead."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '""Boolean Series key will be reindexed to match ""                              ""DataFrame index."", UserWarning', '""Boolean Series key will be reindexed to match ""                              ""DataFrame index."", UserWarning, stacklevel=3', '    ""pandas.core.index is deprecated and will be removed in a future version. ""    ""The public classes are available in the top-level namespace."",    FutureWarning,    stacklevel=find_stack_level,', '    ""pandas.core.index is deprecated and will be removed in a future version.  ""    ""The public classes are available in the top-level namespace."",    FutureWarning,    stacklevel=2,', '""scalar indexers for index type {0} should be integers and not floating point"".format(                type(self', '                            ""dropping on a non-lexsorted multi-index""                            "" without a level parameter may impact ""                            ""performance."",                            PerformanceWarning,                            stacklevel=3,                        ', '""scalar indexers for index type {0} should be integers and not floating point"".format(                    type(self', '                ""The join_axes-keyword is deprecated. Use .reindex or ""                "".reindex_like on the result to achieve the same ""                ""functionality."",                FutureWarning,                stacklevel=4,            ', ""'delevel', reset_index"", '            ""Index.is_mixed is deprecated and will be removed in a future version. ""            ""Check index.inferred_type directly instead."",            FutureWarning,            stacklevel=find_stack_level,        ', '""reset_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '            ""The \'contains\' method is deprecated and will be removed in a ""            ""future version. Use \'key in index\' instead of ""            ""\'index.contains(key', '            ""Index.__or__ operating as a set operation is deprecated, ""            ""in the future this will be a logical operation matching ""            ""Series.__or__.  Use index.union(other', '                ""The index argument has been deprecated and will be ""                ""removed in a future version. Use a function like np.full ""                ""to construct an array with the desired repeats of the ""                ""scalar value instead.\\n\\n"",                FutureWarning,                stacklevel=find_stack_level,            ', '""A future version of pandas will perform index ""                          ""alignment when `others` is a Series/Index/""                          ""DataFrame (or a list-like containing one', '""sortlevel is deprecated, use sort_index(level=...', ""'_firstTimeWithValue', first_valid_index"", '""Series.reset_index with inplace=True will ""                              ""return None from pandas 0.11 onward"",                              FutureWarning', '                ""Boolean Series key will be reindexed to match DataFrame index."",                UserWarning,                stacklevel=3,            ', '                            ""dropping on a non-lexsorted multi-index ""                            ""without a level parameter may impact performance."",                            PerformanceWarning,                            stacklevel=3,                        ', '            ""Index.is_all_dates is deprecated, will be removed in a future version.  ""            ""check index.inferred_type instead"",            FutureWarning,            stacklevel=2,        ', '""sort/sort_index with inplace=True  will return None""                          "" from pandas 0.11 onward"", FutureWarning', '""is_time_series is deprecated. Please use ""                      ""Series.index.is_all_dates"", FutureWarning, stacklevel=2', '            ""`Series.cat.index` has been deprecated. Use `Series.index` "" ""instead."",            FutureWarning,            stacklevel=2,        ', '                ""Using short name for \'orient\' is deprecated. Only the ""                ""options: (\'dict\', list, \'series\', \'split\', \'records\', \'index\'', '""In future versions of pandas, match will change to""                      "" always return a bool indexer."", UserWarning', '""`Series.cat.index` has been deprecated. Use `Series.index` ""             ""instead."",             FutureWarning,             stacklevel=2', ""'indexing past lexsort depth may impact performance.',                PerformanceWarning"", '""\'as_indexer\' keyword was specified but is ignored ""                      ""(match now returns a boolean indexer by default', '            ""indexing past lexsort depth may impact performance."",            PerformanceWarning,            stacklevel=find_stack_level,        ', '""Boolean Series key will be reindexed to match ""                          ""DataFrame index."", UserWarning, stacklevel=3', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=find_stack_level,                    ', '                    ""Indexing a DataFrame with a datetimelike index using a single ""                    ""string to slice the rows, like `frame[string]`, is deprecated ""                    ""and will be removed in a future version. Use `frame.loc[string]` ""                    ""instead."",                    FutureWarning,                    stacklevel=3,                ', '            ""Support for multi-dimensional indexing (e.g. `obj[:, None]`', '                    ""reindexing with a non-unique Index is deprecated and will ""                    ""raise in a future version."",                    FutureWarning,                    stacklevel=find_stack_level,                ', '""slice indexers when using iloc should be integers ""                                  ""and not floating point"", FutureWarning, stacklevel=7', '""In future versions of pandas, match will change to""                      "" always return a bool indexer."", FutureWarning,                      stacklevel=3', '""indexField argument is deprecated. Use index ""                          ""instead"", FutureWarning', '                            ""dropping on a non-lexsorted multi-index ""                            ""without a level parameter may impact performance."",                            PerformanceWarning,                            stacklevel=find_stack_level,                        ', '                        ""Pandas doesn\'t allow columns to be ""                        ""created via a new attribute name - see ""                        ""https://pandas.pydata.org/pandas-docs/""                        ""stable/indexing.html#attribute-access"",                        stacklevel=2,                    ', ""'indexing past lexsort depth may impact performance.',                      PerformanceWarning, stacklevel=10"", '""by argument to sort_index is deprecated, pls use .sort_values(by=...', '                                ""The behavior of indexing on a MultiIndex with a ""                                ""nested sequence of labels is deprecated and will ""                                ""change in a future version. ""                                ""`series.loc[label, sequence]` will raise if any ""                                ""members of \'sequence\' or not present in ""                                ""the index\'s second level. To retain the old ""                                ""behavior, use `series.index.isin(sequence, level=1'}","{'index', 'frame.loc[string]', 'a function like np.full to construct an array with the desired repeats of the scalar value', 'a list', ""'key in index'"", 'series.index'}"
pandas.RangeIndex._start,pandas.RangeIndex.start,"{'            self._deprecation_message.format(""_start"", ""start""'}","{'self._deprecation_message.format(_start,'}"
pandas.RangeIndex._stop,pandas.RangeIndex.stop,"{'            self._deprecation_message.format(""_stop"", ""stop""'}","{'self._deprecation_message.format(_stop,'}"
pandas.RangeIndex._step,pandas.RangeIndex.step,"{'            self._deprecation_message.format(""_step"", ""step""'}","{'self._deprecation_message.format(_step,'}"
pandas.DataFrame.set_value,0,"{'            ""set_value is deprecated and will be removed ""            ""in a future release. Please use ""            "".at[] or .iat[] accessors instead"",            FutureWarning,            stacklevel=2,        ', '            (                ""The \'set_value\' method is deprecated, and ""                ""will be removed in a future version.""            ', '""set_value is deprecated and will be removed ""                      ""in a future release. Please use ""                      "".at[] or .iat[] accessors instead"", FutureWarning,                      stacklevel=2'}",{'.at[] or .iat[] accessors'}
pandas.tseries.frequencies.get_offset,pandas.tseries.frequencies.to_offse,set(),set()
