deprecated API,replacement API,extracted_text,PROPOSED_REPLACEMENT
numpy.distutils.exec_command,subprocess.Popen,"{""'_exec_command_posix failed (status=%s"", ""'exec_command is deprecated since NumPy v1.17, use '                  'subprocess.Popen instead', DeprecationWarning, stacklevel=1""}","{""' 'subprocess.popen""}"
numpy.alen,numpy.len,"{'        ""`np.alen` is deprecated, use `len` instead"",        DeprecationWarning, stacklevel=2'}",{'len'}
numpy.core.typeNA,numpy.sctypeDict,set(),set()
numpy.core.sctypeNA,numpy.sctypeDict,set(),set()
numpy.testing.utils,numpy.testing,"{'""Importing from numpy.testing.utils is deprecated, ""              ""import from numpy.testing instead."",              ImportWarning, stacklevel=2'}",{'numpy.testing'}
numpy.testing.decorators,numpy.testing,"{'""Importing from numpy.testing.decorators is deprecated, ""              ""import from numpy.testing instead."",              DeprecationWarning, stacklevel=2'}",{'numpy.testing'}
numpy.testing.nosetester,numpy.testing,"{'""Importing from numpy.testing.nosetester is deprecated, ""              ""import from numpy.testing instead."",              DeprecationWarning, stacklevel=2'}",{'numpy.testing'}
numpy.testing.noseclasses,numpy.testing,"{'""Importing from numpy.testing.noseclasses is deprecated, ""              ""import from numpy.testing instead"",              DeprecationWarning, stacklevel=2'}",{'numpy.testing'}
numpy.FloatFormat,numpy.FloatingFormat,set(),set()
numpy.LongFloatFormat,numpy.FloatingFormat,set(),set()
numpy.unique1d,numpy.unique,set(),set()
numpy.intersect1d_nu,numpy.intersect1d,set(),set()
numpy.setmember1d,numpy.in1d,set(),set()
numpy.asscalar,numpy.ndarray.item,"{""'np.asscalar(a""}","{""'np.asscalar(a""}"
numpy.ma.Masked_Array.mini,np.ma.minimum.reduce,set(),set()
numpy.loads,pickle.loads,"{""'loads'"", '        ""np.loads is deprecated, use pickle.loads instead"",        DeprecationWarning, stacklevel=2', '        ""np.core.numeric.loads is deprecated, use pickle.loads instead"",        DeprecationWarning, stacklevel=2'}",{'pickle.loads'}
numpy.core.numeric.load,pickle.load,set(),set()
numpy.core.numeric.loads,pickle.loads,set(),set()
numpy.ma.loads,pickle.loads,"{""'loads'""}",set()
numpy.ma.dumps,pickle.dumps,"{""'dumps'""}",set()
numpy.ma.load,pickle.load,"{""'loads'"", ""'load'""}",set()
numpy.ma.dump,pickle.dump,"{""'dumps'"", ""'dump'""}",set()
numpy.ma.array.mini,np.ma.minimum.reduce,set(),set()
numpy.distutils.temp_file_name,tempfile.mkstemp,"{""'temp_file_name is deprecated since NumPy v1.17, use '                  'tempfile.mkstemp instead', DeprecationWarning, stacklevel=1""}","{""' 'tempfile.mkstemp""}"
numpy.lib.npyio.NpzFile.iteritem,numpy.lib.npyio.NpzFile.item,set(),set()
numpy.lib.npyio.NpzFile.iterkeys,numpy.lib.npyio.NpzFile.iterkeys,set(),set()
numpy.ndfromtxt,numpy.genfromtxt,"{'        ""np.ndfromtxt is a deprecated alias of np.genfromtxt, ""        ""prefer the latter."",        DeprecationWarning, stacklevel=2'}","{'latter.,', 'np.genfromtxt,', 'np.ndfromtxt'}"
numpy.mafromtxt,numpy.genfromtxt,"{'        ""np.mafromtxt is a deprecated alias of np.genfromtxt, ""        ""prefer the latter."",        DeprecationWarning, stacklevel=2'}","{'np.mafromtxt', 'np.genfromtxt,', 'latter.,'}"
numpy.mirr,numpy_financial.mirr,"{""_depmsg.format(name='mirr'""}","{""_depmsg.format(name='mirr'""}"
numpy.PolyBase,ABCPolyBase,set(),set()
numpy.typeDict,np.sctypeDict,set(),set()
numpy._ctypes.get_data,_ctypes.data,set(),set()
numpy._ctypes.get_shape,_ctypes.shape,set(),set()
numpy._ctypes.get_strides,_ctypes.strides,set(),set()
numpy._ctypes.get_as_parameter,_ctypes._as_parameter_,set(),set()
numpy.random.random_integers,np.random.randint,"{'""covariance is not positive-semidefinite."", *                                   RuntimeWarning', ' *                         ""covariance is not symmetric positive-semidefinite."", */        goto __pyx_L19;      }      /* ""mtrand.pyx"":4533 *                         RuntimeWarning', '""covariance is not positive-semidefinite."", */    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_psd', ""'get_state and legacy can only be used with the ' *                           'MT19937 BitGenerator. To silence this warning, ' */  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_st, __pyx_n_u_bit_generator"", '""covariance is not positive-semidefinite."",             # <<<<<<<<<<<<<< *                           RuntimeWarning', ""'get_state and legacy can only be used with the '                          'MT19937 BitGenerator. To silence this warning, '                          'set `legacy` to False.', RuntimeWarning"", '             # <<<<<<<<<<<<<< *                         ""covariance is not symmetric positive-semidefinite."", *                         RuntimeWarning', ' */    }    /* ""mtrand.pyx"":4537 *         (u, s, v', '\'Providing a dtype with a non-native byteorder is \' */  }  /* ""numpy/random/mtrand.pyx"":624 *         # faster. randomgen allows a choice, we will always use the slower but *         # backward compatible one. *         cdef bint _masked = True             # <<<<<<<<<<<<<< *         cdef bint _endpoint = False *  */  __pyx_v__masked = 1;  /* ""numpy/random/mtrand.pyx"":625 *         # backward compatible one. *         cdef bint _masked = True *         cdef bint _endpoint = False             # <<<<<<<<<<<<<< *  *         if key == \'int32\': */  __pyx_v__endpoint = 0;  /* ""numpy/random/mtrand.pyx"":627 *         cdef bint _endpoint = False *  *         if key == \'int32\':             # <<<<<<<<<<<<<< *             ret = _rand_int32(low, high, size, _masked, _endpoint, &self._bitgen, self.lock', ' *                         ""covariance is not symmetric positive-semidefinite."", */        goto __pyx_L19;      }      /* ""mtrand.pyx"":4542 *                         RuntimeWarning', '\'get_state and legacy can only be used with the \' *                           \'MT19937 BitGenerator. To silence this warning, \' */  }  /* ""numpy/random/mtrand.pyx"":209 *                           \'set `legacy` to False.\', RuntimeWarning', ' *                         ""covariance is not symmetric positive-semidefinite."", */      __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_check_valid, __pyx_n_s_warn, Py_EQ', ' *                         ""covariance is not symmetric positive-semidefinite."", */        goto __pyx_L19;      }      /* ""mtrand.pyx"":4534 *                         RuntimeWarning', ' *                         ""covariance is not symmetric positive-semidefinite."", *                         RuntimeWarning', ""'get_state and legacy can only be used with the ' *                           'MT19937 BitGenerator. To silence this warning, ' *                           'set `legacy` to False.', RuntimeWarning"", ""'Providing a dtype with a non-native byteorder is ' */  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dt, __pyx_n_s_isnative"", '(""This function is deprecated. Please call ""                           ""randint({low}, {high} + 1', '""covariance is not positive-semidefinite."", */  }  /* ""mtrand.pyx"":4343 *                           RuntimeWarning', '""covariance is not positive-semidefinite."", *                           RuntimeWarning', '(""This function is deprecated. Please call "" *                            ""randint({low}, {high} + 1', '                    f""you are shuffling a \'{type(x', '""covariance is not positive-semidefinite."", */  }  /* ""mtrand.pyx"":4393 *                           RuntimeWarning', '""covariance is not positive-semidefinite."", */    }    /* ""mtrand.pyx"":4513 *         (u, s, v', ' */    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_psd', ' *                         ""covariance is not symmetric positive-semidefinite."", */        goto __pyx_L19;      }      /* ""mtrand.pyx"":4548 *                         RuntimeWarning', ""'get_state and legacy can only be used with the '             # <<<<<<<<<<<<<< *                           'MT19937 BitGenerator. To silence this warning, ' *                           'set `legacy` to False.', RuntimeWarning"", ""'get_state and legacy can only be used with the ' */  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_bit_generator, __pyx_n_s_state"", ' */    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_psd', '(""This function is deprecated. Please call ""                           ""randint(1, {low} + 1', ""'Providing a dtype with a non-native byteorder is '                          'not supported. If you require platform-independent '                          'byteorder, call byteswap when required.\\nIn future '                          'version, providing byteorder will raise a '                          'ValueError', DeprecationWarning"", '                        ""Shuffling a one dimensional array subclass containing ""                        ""objects gives incorrect results for most array ""                        ""subclasses.  ""                        ""Please us the new random number API instead: ""                        ""https://numpy.org/doc/stable/reference/random/index.html\\n""                        ""The new API fixes this issue. This version will not ""                        ""be fixed due to stability guarantees of the API."",                        UserWarning, stacklevel=1', ' */    }    /* ""mtrand.pyx"":4523 *         (u, s, v', '""covariance is not positive-semidefinite."",                          RuntimeWarning', '""covariance is not positive-semidefinite."",                                  RuntimeWarning', '""covariance is not positive-semidefinite."", */    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_psd', ""'Providing a dtype with a non-native byteorder is '             # <<<<<<<<<<<<<< *                           'not supported. If you require platform-independent ' *                           'byteorder, call byteswap when required.\\nIn future ' */  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_kp_u_Providing_a_dtype_with_a_non_nat, __pyx_builtin_DeprecationWarning"", ' */    }    /* ""mtrand.pyx"":4522 *         (u, s, v', '""covariance is not positive-semidefinite."", */    }    /* ""numpy/random/mtrand.pyx"":3761 *         (u, s, v', ""'Providing a dtype with a non-native byteorder is '             # <<<<<<<<<<<<<< *                           'not supported. If you require platform-independent ' *                           'byteorder, call byteswap when required.\\nIn future ' */    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings"", '""covariance is not positive-semidefinite."", *                         RuntimeWarning', '""covariance is not positive-semidefinite."", */    }    /* ""mtrand.pyx"":4526 *         (u, s, v', '""covariance is not positive-semidefinite."", */  }  /* ""mtrand.pyx"":4723 *                           RuntimeWarning', '(""This function is deprecated. Please call ""             # <<<<<<<<<<<<<< *                            ""randint(1, {low} + 1', ' */    }    /* ""mtrand.pyx"":4531 *         (u, s, v', '""covariance is not positive-semidefinite."", */  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np', '                        ""covariance is not symmetric positive-semidefinite."",                        RuntimeWarning', '(""This function is deprecated. Please call "" *                            ""randint(1, {low} + 1', '""covariance is not positive-semidefinite."",             # <<<<<<<<<<<<<< *                         RuntimeWarning', '""covariance is not positive-semidefinite."", */    }    /* ""numpy/random/mtrand.pyx"":3758 *         (u, s, v', '""covariance is not positive-semidefinite."", */  }  /* ""mtrand.pyx"":4501 *                           RuntimeWarning', '                    ""`x` isn\'t a recognized object; `shuffle` is not guaranteed ""                    ""to behave correctly. E.g., non-numpy array/tensor objects ""                    ""with view semantics may contain duplicates after shuffling."",                    UserWarning, stacklevel=2                ', '(""This function is deprecated. Please call ""             # <<<<<<<<<<<<<< *                            ""randint({low}, {high} + 1', ' *                         ""covariance is not symmetric positive-semidefinite."", */      __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_check_valid, __pyx_n_s_warn, Py_EQ', '""covariance is not positive-semidefinite."", */  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np', '""covariance is not positive-semidefinite."",             # <<<<<<<<<<<<<< *                                   RuntimeWarning', '""covariance is not positive-semidefinite."",                        RuntimeWarning'}",set()
numpy.ma.MaskedArray.mini,np.ma.minimum.reduce,set(),set()
numpy.lib.function_base.unique,numpy.unique,set(),set()
numpy.rank,np.ndim,"{'        ""`rank` is deprecated; use the `ndim` attribute or function instead. ""        ""To find the rank of a matrix see `numpy.linalg.matrix_rank`."",        VisibleDeprecationWarning, stacklevel=2', '        ""`rank` is deprecated; use the `ndim` attribute or function instead. ""        ""To find the rank of a matrix see `numpy.linalg.matrix_rank`."",        VisibleDeprecationWarning, stacklevel=3', '        ""`rank` is deprecated; use the `ndim` function instead. "",        np.VisibleDeprecationWarning', '        ""`rank` is deprecated; use the `ndim` attribute or function instead. ""        ""To find the rank of a matrix see `numpy.linalg.matrix_rank`."",        VisibleDeprecationWarning', '        ""`rank` is deprecated; use the `ndim` function instead. "",        np.VisibleDeprecationWarning, stacklevel=2'}","{'the ndim attribute or function', 'the ndim function'}"
numpy.testing.rand,np.random.rand,"{'message=""numpy.testing.rand is deprecated in numpy 1.11. ""                   ""Use numpy.random.rand instead.""'}",{'numpy.random.rand'}
numpy.ndarray.tostring,tobytes,set(),set()
numpy.sctypeNA,np.typeDict,set(),set()
numpy.typeNA,np.typeDict,set(),set()
numpy.ma.MaskedArray.mini,np.ma.minimum.reduce,set(),set()
