DEPRECATED_API,KNOWN_REPLACEMENT,MENTIONED_IN_REL_NOTES,REPLACEMENT_FOUND,PROPOSED_REPLACEMENT,EXTRACT_FROM_DOCUMENTATION
numpy.distutils.exec_command,subprocess.Popen,1,0,, dataRST/numpy/1.17.0-notes.rst Deprecate `numpy.distutils.exec_command` and ``temp_file_name`` --------------------------------------------------------------- The internal use of these functions has been refactored and there are better `temp_file_name <numpy.distutils.exec_command>` with `tempfile.mkstemp`. Writeable flag of C-API wrapped arrays --------------------------------------
numpy.alen,numpy.len,1,1, len, dataRST/numpy/1.18.0-notes.rst Deprecate ``np.alen`` --------------------- ``np.alen`` was deprecated. Use ``len`` instead. ``np.alen`` was deprecated. Use ``len`` instead. (`gh-14181 <https://github.com/numpy/numpy/pull/14181>`__) Deprecate the financial functions
numpy.core.typeNA,numpy.sctypeDict,1,1, numpy.sctypeDict, dataRST/numpy/1.16.0-notes.rst * The type dictionaries `numpy.core.typeNA` and `numpy.core.sctypeNA` are   deprecated. They were buggy and not documented and will be removed in the   1.18 release. Use`numpy.sctypeDict` instead.
numpy.core.sctypeNA,numpy.sctypeDict,1,1, numpy.sctypeDict, dataRST/numpy/1.16.0-notes.rst * The type dictionaries `numpy.core.typeNA` and `numpy.core.sctypeNA` are   deprecated. They were buggy and not documented and will be removed in the   1.18 release. Use`numpy.sctypeDict` instead.
numpy.testing.utils,numpy.testing,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.testing.utils`   * `numpy.testing.decorators`   * `numpy.testing.nosetester`
numpy.testing.decorators,numpy.testing,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.testing.decorators`   * `numpy.testing.nosetester`   * `numpy.testing.noseclasses`
numpy.testing.nosetester,numpy.testing,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.testing.nosetester`   * `numpy.testing.noseclasses`   * `numpy.core.umath_tests`
numpy.testing.noseclasses,numpy.testing,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.testing.noseclasses`   * `numpy.core.umath_tests` * Giving a generator to `numpy.sum` is now deprecated. This was undocumented
numpy.core.umath_tests,,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.core.umath_tests` * Giving a generator to `numpy.sum` is now deprecated. This was undocumented   behavior, but worked. Previously, it would calculate the sum of the generator
numpy.FloatFormat,numpy.FloatingFormat,1,1, FloatingFormat, dataRST/numpy/1.14.0-notes.rst The ``FloatFormat`` and ``LongFloatFormat`` classes are deprecated and should both be replaced by ``FloatingFormat``. Similarly ``ComplexFormat`` and ``LongComplexFormat`` should be replaced by ``ComplexFloatingFormat``. dataRST/numpy/1.18.0-notes.rst * ``arrayprint.FloatFormat``, ``arrayprint.LongFloatFormat`` has been removed,   use ``FloatingFormat`` instead * ``arrayprint.ComplexFormat``, ``arrayprint.LongComplexFormat`` has been
numpy.LongFloatFormat,numpy.FloatingFormat,1,1, FloatingFormat, dataRST/numpy/1.14.0-notes.rst The ``FloatFormat`` and ``LongFloatFormat`` classes are deprecated and should both be replaced by ``FloatingFormat``. Similarly ``ComplexFormat`` and ``LongComplexFormat`` should be replaced by ``ComplexFloatingFormat``. dataRST/numpy/1.18.0-notes.rst * ``arrayprint.FloatFormat``, ``arrayprint.LongFloatFormat`` has been removed,   use ``FloatingFormat`` instead * ``arrayprint.ComplexFormat``, ``arrayprint.LongComplexFormat`` has been
numpy.unique1d,numpy.unique,1,0,, dataRST/numpy/1.6.0-notes.rst The deprecated functions ``numpy.unique1d``, ``numpy.setmember1d``, ``numpy.intersect1d_nu`` and ``numpy.lib.ufunclike.log2`` were removed. ``numpy.ma``
numpy.intersect1d_nu,numpy.intersect1d,1,0,, dataRST/numpy/1.6.0-notes.rst ``numpy.intersect1d_nu`` and ``numpy.lib.ufunclike.log2`` were removed. ``numpy.ma`` ------------
numpy.setmember1d,numpy.in1d,1,0,, dataRST/numpy/1.6.0-notes.rst The deprecated functions ``numpy.unique1d``, ``numpy.setmember1d``, ``numpy.intersect1d_nu`` and ``numpy.lib.ufunclike.log2`` were removed. ``numpy.ma``
numpy.asscalar,numpy.ndarray.item,1,1, numpy.ndarray.item, dataRST/numpy/1.16.0-notes.rst * The `numpy.asscalar` function is deprecated. It is an alias to the more   powerful `numpy.ndarray.item`, not tested, and fails for scalars. * The `numpy.set_array_ops` and `numpy.get_array_ops` functions are deprecated.
numpy.loads,pickle.loads,1,1, pickle.loads, dataRST/numpy/1.15.0-notes.rst   * `numpy.loads`   * `numpy.core.numeric.load`   * `numpy.core.numeric.loads` dataRST/numpy/1.22.0-notes.rst ``numpy.loads`` was deprecated in v1.15, with the recommendation that users use ``pickle.loads`` instead.  ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate
numpy.core.numeric.load,pickle.load,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.core.numeric.load`   * `numpy.core.numeric.loads`   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.core.numeric.loads`   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on
numpy.core.numeric.loads,pickle.loads,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.core.numeric.loads`   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on
numpy.ma.loads,pickle.loads,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on     python 3 when called with a string.
numpy.ma.dumps,pickle.dumps,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on     python 3 when called with a string.
numpy.ma.load,pickle.load,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on     python 3 when called with a string.   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on     python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means
numpy.ma.dump,pickle.dump,1,0,, dataRST/numpy/1.15.0-notes.rst   * `numpy.ma.loads`, `numpy.ma.dumps`   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on     python 3 when called with a string.   * `numpy.ma.load`, `numpy.ma.dump` - these functions already failed on     python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means
numpy.lib.npyio.NpzFile.iteritem,numpy.lib.npyio.NpzFile.item,1,0,, dataRST/numpy/1.15.0-notes.rst For python 3, this means that ``.iteritems()``, ``.iterkeys()`` have been deprecated, and ``.keys()`` and ``.items()`` now return views and not lists. This is consistent with how the builtin ``dict`` type changed between python 2
numpy.lib.npyio.NpzFile.iterkeys,numpy.lib.npyio.NpzFile.iterkeys,1,0,, dataRST/numpy/1.15.0-notes.rst For python 3, this means that ``.iteritems()``, ``.iterkeys()`` have been deprecated, and ``.keys()`` and ``.items()`` now return views and not lists. This is consistent with how the builtin ``dict`` type changed between python 2
numpy.ndfromtxt,numpy.genfromtxt,1,1, numpy.genfromtxt, dataRST/numpy/1.22.0-notes.rst Expired deprecations for ``loads``, ``ndfromtxt``, and ``mafromtxt`` in npyio ----------------------------------------------------------------------------- ``numpy.loads`` was deprecated in v1.15, with the recommendation that users use ``pickle.loads`` instead.  ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate value for the ``usemask`` parameter.
numpy.mafromtxt,numpy.genfromtxt,1,1, numpy.genfromtxt, dataRST/numpy/1.22.0-notes.rst Expired deprecations for ``loads``, ``ndfromtxt``, and ``mafromtxt`` in npyio ----------------------------------------------------------------------------- ``numpy.loads`` was deprecated in v1.15, with the recommendation that users use ``pickle.loads`` instead.  ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate value for the ``usemask`` parameter.
numpy.fv,numpy_financial.fv,1,0,, dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package dataRST/numpy/1.20.0-notes.rst from NumPy 1.20. The functions that have been removed are ``fv``, ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the
numpy.pmt,numpy_financial.pmt,1,0,, dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_
numpy.nper,numpy_financial.nper,1,0,, dataRST/numpy/1.10.0-notes.rst new `nanmedian` or `nanpercentile` functions. Functions available from numpy.ma.testutils have changed -------------------------------------------------------- dataRST/numpy/1.15.0-notes.rst * `numpy.nanquantile` function, an interface to ``nanpercentile`` without   factors of 100 * `numpy.printoptions`, a context manager that sets print options temporarily Like ``np.percentile`` and ``np.nanpercentile``, but takes quantiles in [0, 1] rather than percentiles in [0, 100]. ``np.percentile`` is now a thin wrapper around ``np.quantile`` with the extra step of dividing by 100. dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ dataRST/numpy/1.9.0-notes.rst * Addition of `nanmedian` and `nanpercentile` rounds out the nanfunction set. Dropped Support =============== The ``np.nanmedian`` and ``np.nanpercentile`` functions behave like the median and percentile functions except that NaNs are ignored. NumpyVersion class added
numpy.ipmt,numpy_financial.ipmt,1,0,, dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_
numpy.ppmt,numpy_financial.ppmt,1,0,, dataRST/numpy/1.18.0-notes.rst ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_
numpy.pv,numpy_financial.pv,1,0,, dataRST/numpy/1.16.0-notes.rst These are in addition to our continued use of travis, appveyor (for wheels) and LGTM Changes dataRST/numpy/1.18.0-notes.rst ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. dataRST/numpy/1.18.3-notes.rst * `#15954 <https://github.com/numpy/numpy/pull/15954>`__: BUG: Check that `pvals` is 1D in `_generator.multinomial`. * `#16017 <https://github.com/numpy/numpy/pull/16017>`__: BUG: Alpha parameter must be 1D in `generator.dirichlet` dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. dataRST/numpy/1.21.5-notes.rst * `#20462 <https://github.com/numpy/numpy/pull/20462>`__: BUG: Fix float16 einsum fastpaths using wrong tempvar * `#20463 <https://github.com/numpy/numpy/pull/20463>`__: BUG, DIST: Print os error message when the executable not exist * `#20464 <https://github.com/numpy/numpy/pull/20464>`__: BLD: Verify the ability to compile C++ sources before initiating... dataRST/numpy/1.8.0-notes.rst Fix to financial.npv -------------------- The npv function had a bug. Contrary to what the documentation stated, it The npv function had a bug. Contrary to what the documentation stated, it summed from indexes ``1`` to ``M`` instead of from ``0`` to ``M - 1``. The fix changes the returned value. The mirr function called the npv function, fix changes the returned value. The mirr function called the npv function, but worked around the problem, so that was also fixed and the return value of the mirr function remains unchanged.
numpy.rate,numpy_financial.rate,1,0,, dataRST/numpy/1.10.0-notes.rst object arrays that were generated on Python 2. MaskedArray support for more complicated base classes ----------------------------------------------------- The cblas versions of dot, inner, and vdot have been integrated into the multiarray module. In particular, vdot is now a multiarray function, which it was not before. dataRST/numpy/1.10.1-notes.rst * Change Intel compiler options so that code will also be generated to   support systems without SSE4.2. * Some _config test functions needed an explicit integer return in dataRST/numpy/1.10.2-notes.rst PyArray_IS_F_CONTIGUOUS. You may want to regenerate swigged files using the updated numpy.i Deprecate views changing dimensions in fortran order * gh-6532 numpy.inner return wrong inaccurate value sometimes. * gh-6563 Intent(out) broken in recent versions of f2py. * gh-6569 Cannot run tests after 'python setup.py build_ext -i' dataRST/numpy/1.10.4-notes.rst bugs in the toolchain we use to generate those files. Hopefully that problem will be fixed for the next release. In the meantime, we suggest using one of the providers of windows binaries. dataRST/numpy/1.11.0-notes.rst versions for float types.  The results should be marginally more accurate or outright bug fixes compared to the previous results, but they may differ significantly in cases where roundoff makes a difference in the integer   fortran extension to be specified for generated temp files. For instance,   the files can be specifies to be ``*.f90``. The ``verbose`` argument is   also activated, it was previously ignored.   Random ndarrays of the following types can now be generated:   - ``np.bool_``,   - ``np.int8``, ``np.uint8``,   generated arrays are always in native byte order. * A new ``np.moveaxis`` function allows for moving one or more array axes   to a new position by explicitly providing source and destination axes. The method ``build_src.generate_a_pyrex_source`` will remain available; it has been monkeypatched by users to support Cython instead of Pyrex.  It's recommended to switch to a better supported method of build Cython dataRST/numpy/1.12.0-notes.rst   non-zero counts to be generated on more than just a flattened   array object. BLIS support in ``numpy.distutils`` where expansion into polynomial coefficients is inaccurate at machine precision. New array creation function ``geomspace`` added The new function ``geomspace`` generates a geometric sequence.  It is similar to ``logspace``, but with start and stop specified directly: ``geomspace(start, stop)`` behaves the same as To help people migrate their code bases from Python 2 to Python 3, the python interpreter has a handy option -3, which issues warnings at runtime. One of its warnings is for integer division:: dataRST/numpy/1.13.0-notes.rst approximately twice as fast as calling the functions separately. ``np.isnat`` ufunc tests for NaT special datetime and timedelta values ---------------------------------------------------------------------- being iterated over. ``.ndim`` property added to ``dtype`` to complement ``.shape`` -------------------------------------------------------------- To illustrate a previously undefined operation::     >>> x = np.arange(16).astype(float)     >>> np.add(x[1:], x[:-1], out=x[1:]) Extensions that incorporate Fortran libraries can now be built using the free MinGW_ toolset, also under Python 3.5. This works best for extensions that only do calculations and uses the runtime modestly (reading and writing from files, dataRST/numpy/1.14.0-notes.rst * ``MaskedArray`` arrays now separate printed elements with commas, always   print the dtype, and correctly wrap the elements of long arrays to multiple   lines. If there is more than 1 dimension, the array attributes are now Some specific loop structures which have an accelerated loop version did not release the GIL prior to NumPy 1.14.0.  This oversight has been fixed. are provided to generate these decimal representations. A new option ``floatmode`` has been added to ``np.set_printoptions`` and ``np.array2string``, which gives control over uniqueness and rounding of dataRST/numpy/1.14.1-notes.rst * `#10610 <https://github.com/numpy/numpy/pull/10610>`__: BUG: Align type definition with generated lapack * `#10612 <https://github.com/numpy/numpy/pull/10612>`__: BUG/ENH: Improve output for structured non-void types * `#10622 <https://github.com/numpy/numpy/pull/10622>`__: BUG: deallocate recursive closure in arrayprint.py (1.14 backport) * `#10624 <https://github.com/numpy/numpy/pull/10624>`__: BUG: Correctly identify comma separated dtype strings * `#10629 <https://github.com/numpy/numpy/pull/10629>`__: BUG: deallocate recursive closure in arrayprint.py (backport... * `#10630 <https://github.com/numpy/numpy/pull/10630>`__: REL: Prepare for 1.14.1 release. dataRST/numpy/1.14.2-notes.rst * `#10726 <https://github.com/numpy/numpy/pull/10726>`__: BUG: Fix f2py generated code to work on PyPy * `#10727 <https://github.com/numpy/numpy/pull/10727>`__: BUG: Fix missing NPY_VISIBILITY_HIDDEN on npy_longdouble_to_PyLong * `#10729 <https://github.com/numpy/numpy/pull/10729>`__: DOC: Create 1.14.2 notes and changelog. dataRST/numpy/1.15.0-notes.rst ``np.flip`` can operate over multiple axes ------------------------------------------ ``np.flip`` now accepts None, or tuples of int, in its ``axis`` argument. If One can control over which axes a generalized ufunc operates by passing in an ``axes`` argument, a list of tuples with indices of particular axes.  For instance, for a signature of ``(i,j),(j,k)->(i,k)`` appropriate for matrix For simplicity, for generalized ufuncs that operate on 1-dimensional arrays (vectors), a single integer is accepted instead of a single-element tuple, and for generalized ufuncs for which all outputs are scalars, the (empty) output dataRST/numpy/1.16.0-notes.rst Integrated squared error (ISE) estimator added to ``histogram`` --------------------------------------------------------------- This method (``bins='stone'``) for optimizing the bin number is a are very similar to generalized ufuncs in that they operate over core dimensions, but one could not present them as such because they were able to deal with inputs in which a dimension is missing. To support this, it is now and `np.core.multiarray` were separate c-extension modules. They are now python wrappers to the single `np.core/_multiarray_math` c-extension module. .. _`NEP 15` : http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html dataRST/numpy/1.16.4-notes.rst ``np.random.multinomial`` if a 0 is generated in the underlying MT19937 random stream. There is a 1 in :math:`10^{53}` chance of this occurring, and so the probability that the stream changes for any given seed is extremely small. If a 0 is encountered in the dataRST/numpy/1.17.0-notes.rst   resulting in faster, more accurate transforms and better handling of datasets   of prime length. See below under Improvements. * New radix sort and timsort sorting methods. It is currently not possible to `~RandomState.multinomial` if a ``0`` is generated in the underlying `MT19937` random stream.  There is a ``1`` in :math:`10^{53}` chance of this occurring, so the probability that the stream `distutils` now uses an environment variable, comma-separated and case insensitive, to determine the detection order for BLAS libraries. By default ``NPY_BLAS_ORDER=mkl,blis,openblas,atlas,accelerate,blas``. By default ``NPY_BLAS_ORDER=mkl,blis,openblas,atlas,accelerate,blas``. However, to force the use of OpenBLAS simply do::    NPY_BLAS_ORDER=openblas python setup.py build ``numpy.distutils`` now uses an environment variable, comma-separated and case insensitive, to determine the detection order for LAPACK libraries. By default ``NPY_LAPACK_ORDER=mkl,openblas,flame,atlas,accelerate,lapack``. By default ``NPY_LAPACK_ORDER=mkl,openblas,flame,atlas,accelerate,lapack``. However, to force the use of OpenBLAS simply do::    NPY_LAPACK_ORDER=openblas python setup.py build dataRST/numpy/1.17.1-notes.rst * `#14301 <https://github.com/numpy/numpy/pull/14301>`__: BUG: Fix leak in the f2py-generated module init and `PyMem_Del`... * `#14302 <https://github.com/numpy/numpy/pull/14302>`__: BUG: Fix formatting error in exception message * `#14307 <https://github.com/numpy/numpy/pull/14307>`__: MAINT: random: Match type of SeedSequence.pool_size to DEFAULT_POOL_SIZE. dataRST/numpy/1.18.0-notes.rst `numpy.random.Generator`.  This method generates random variates from the multivariate hypergeometric probability distribution. (`gh-13794 <https://github.com/numpy/numpy/pull/13794>`__) ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. dataRST/numpy/1.19.0-notes.rst generated by ``dirichlet`` in this case will be different from previous releases. (`gh-14924 <https://github.com/numpy/numpy/pull/14924>`__) dataRST/numpy/1.20.0-notes.rst a separate 1-D array for every combination of the other indexes. For example, it is now possible to permute the rows or columns of a 2-D array. (`gh-15121 <https://github.com/numpy/numpy/pull/15121>`__) ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. f2py generated code may return unicode instead of byte strings -------------------------------------------------------------- Some byte strings previously returned by f2py generated code may now be unicode Some byte strings previously returned by f2py generated code may now be unicode strings. This results from the ongoing Python2 -> Python3 cleanup. (`gh-17068 <https://github.com/numpy/numpy/pull/17068>`__) New ``__f2py_numpy_version__`` attribute for f2py generated modules. -------------------------------------------------------------------- Because f2py is released together with NumPy, ``__f2py_numpy_version__`` provides a way to track the version f2py used to generate the module. (`gh-16594 <https://github.com/numpy/numpy/pull/16594>`__) ``mypy`` tests can be run via runtests.py That will use any of the accelerated libraries instead. (`gh-17219 <https://github.com/numpy/numpy/pull/17219>`__) Allow passing optimizations arguments to asv build Remove the Accelerate library as a candidate LAPACK library ----------------------------------------------------------- Apple no longer supports Accelerate. Remove it. Apple no longer supports Accelerate. Remove it. (`gh-15759 <https://github.com/numpy/numpy/pull/15759>`__) Object arrays containing multi-line objects have a more readable ``repr`` -  **New auto-generated C header ``core/src/common/_cpu_dispatch.h``**    This header is generated by the distutils module ``ccompiler_opt``, and    contains all the #definitions and headers of instruction sets, that had been    This header is generated by the distutils module ``ccompiler_opt``, and    contains all the #definitions and headers of instruction sets, that had been    configured through command arguments '--cpu-baseline' and '--cpu-dispatch'. dataRST/numpy/1.21.0-notes.rst and silently swapped, so that if ``low > high``, the value generated was ``high + (low - high) * random()``. (`gh-17921 <https://github.com/numpy/numpy/pull/17921>`__) version, which allows the compiler to generate code that does not set floating point warnings/errors correctly. (`gh-19049 <https://github.com/numpy/numpy/pull/19049>`__) When ``np.unique`` operated on an array with multiple ``NaN`` entries, its return included a ``NaN`` for each entry that was ``NaN`` in the original array. This is now improved such that the returned array contains just one ``NaN`` as the This change breaks the stream of variates generated  when variates from either of these distributions are produced. (`gh-18666 <https://github.com/numpy/numpy/pull/18666>`__) Enable Accelerate Framework ---------------------------- With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework's implementation of BLAS and LAPACK should be resolved.  This change enables the Accelerate Framework as an option on macOS.  If additional issues are found, please file a bug report LAPACK should be resolved.  This change enables the Accelerate Framework as an option on macOS.  If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK dataRST/numpy/1.22.0-notes.rst Generate C/C++ API reference documentation from comments blocks is now possible ------------------------------------------------------------------------------- This feature depends on Doxygen_ in the generation process and on Breathe_ to integrate it with Sphinx. .. _`Doxygen`: https://www.doxygen.nl/index.html .. _`Breathe`: https://breathe.readthedocs.io/en/latest/ dataRST/numpy/1.22.2-notes.rst * `#20982 <https://github.com/numpy/numpy/pull/20982>`__: MAINT: f2py: don't generate code that triggers ``-Wsometimes-uninitialized``. * `#20983 <https://github.com/numpy/numpy/pull/20983>`__: BUG: Fix incorrect return type in reduce without initial value * `#20984 <https://github.com/numpy/numpy/pull/20984>`__: ENH: review return values for PyArray_DescrNew dataRST/numpy/1.3.0-notes.rst Separate core math library -------------------------- The core math functions (sin, cos, etc... for basic C types) have been put into a separate library; it acts as a compatibility layer, to support most C99 maths functions (real only for now). The library includes platform-specific fixes for various maths functions, such as using those versions should be more robust dataRST/numpy/1.4.0-notes.rst iterate over the items in a neighborhood of an array, and can handle boundaries conditions automatically. Zero and one padding are available, as well as arbitrary constant value, mirror and circular padding.     #. PyArray_NeighborhoodIterNew - a new iterator to iterate over a        neighborhood of a point, with automatic boundaries handling. It is        documented in the iterators section of the C-API reference, and you can        the decorated test.     #. assert_array_almost_equal_nulps: new method to compare two arrays of        floating point values. With this function, two values are considered     #. assert_warns: raise an AssertionError if a callable does not generate a        warning of the appropriate class, without altering the warning state. Reusing npymath The source code of multiarray and umath has been split into separate logic compilation units. This should make the source code more amenable for newcomers. Separate compilation -------------------- By default, every file of multiarray (and umath) is merged into one for compilation as was the case before, but if NPY_SEPARATE_COMPILATION env variable is set to a non-negative value, experimental individual compilation of each file is enabled. This makes the compile/debug cycle much faster when Separate core math library -------------------------- New functions which have been added: dataRST/numpy/1.5.0-notes.rst small/large values, the result is often more accurate than that obtained by simple multiplication. new header * A trimdeg method has been added to the Polynomial class. It operates like   truncate except that the argument is the desired degree of the result,   not the number of coefficients. * A trimdeg method has been added to the Chebyshev class. It operates like   truncate except that the argument is the desired degree of the result,   not the number of coefficients. dataRST/numpy/1.7.0-notes.rst A generic sampling function has been added which will generate samples from a given array-like. The samples can be with or without replacement, and with uniform or given non-uniform probabilities. converted to the array type (of possibly larger size) as illustrated by the following examples::     >>> (np.zeros((2,), dtype=np.uint8) + np.int16(257)).dtype dataRST/numpy/1.8.0-notes.rst Numpy has switched its build system to using 'separate compilation' by default.  In previous releases this was supported, but not default. This should produce the same results as the old system, but if you're trying to system by exporting the shell variable NPY_SEPARATE_COMPILATION=0. For the AdvancedNew iterator the ``oa_ndim`` flag should now be -1 to indicate that no ``op_axes`` and ``itershape`` are passed in. The ``oa_ndim == 0`` is more accurate, allows for faster code that makes fewer unnecessary copies, and simplifies numpy's code internally. However, it may also break third-party libraries that make too-strong assumptions about the The separate compilation mode is now enabled by default. Several changes to np.insert and np.delete: * Previously, negative indices and indices that pointed past the end of   generate an error. * Previously, boolean indices were treated as if they were integers (always   referring to either the 0th or 1st item in the array). In the future, they dataRST/numpy/1.8.1-notes.rst cases the arrays being iterated are as large as the iterator so that such a problem cannot occur. Optional reduced verbosity for np.distutils dataRST/numpy/1.9.0-notes.rst A bug in one of the algorithms to generate a binomial random variate has been fixed. This change will likely alter the number of random draws performed, and hence the sequence location will be different after a cases the arrays being iterated are as large as the iterator so that such a problem cannot occur. This change was already applied to the 1.8.1 release. dataRST/numpy/1.9.1-notes.rst * gh-4007: workaround Accelerate sgemv crash on OSX 10.9 * gh-5100: restore object dtype inference from iterable objects without `len()` * gh-5163: avoid gcc-4.1.2 (red hat 5) miscompilation causing a crash
numpy.irr,numpy_financial.irr,1,0,, dataRST/numpy/1.13.0-notes.rst This behavior mirrors that of np.ndarray, and accounts for nested arrays in MaskedArrays of object dtype, and ellipsis combined with other forms of indexing. dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ dataRST/numpy/1.4.0-notes.rst arbitrary constant value, mirror and circular padding. New polynomial support ---------------------- dataRST/numpy/1.8.0-notes.rst fix changes the returned value. The mirr function called the npv function, but worked around the problem, so that was also fixed and the return value of the mirr function remains unchanged. of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers ------------------------------------------- dataRST/numpy/1.8.1-notes.rst * gh-4253: IRR was returning nan instead of valid negative answer * gh-4254: fix unnecessary byte order flag change for byte arrays * gh-3263: numpy.random.shuffle clobbers mask of a MaskedArray
numpy.npv,numpy_financial.npv,1,0,, dataRST/numpy/1.18.0-notes.rst ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ dataRST/numpy/1.8.0-notes.rst Fix to financial.npv -------------------- The npv function had a bug. Contrary to what the documentation stated, it The npv function had a bug. Contrary to what the documentation stated, it summed from indexes ``1`` to ``M`` instead of from ``0`` to ``M - 1``. The fix changes the returned value. The mirr function called the npv function, fix changes the returned value. The mirr function called the npv function, but worked around the problem, so that was also fixed and the return value of the mirr function remains unchanged.
numpy.mirr,numpy_financial.mirr,1,0,, dataRST/numpy/1.13.0-notes.rst This behavior mirrors that of np.ndarray, and accounts for nested arrays in MaskedArrays of object dtype, and ellipsis combined with other forms of indexing. dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv`` and ``rate`` are deprecated, and will be removed from NumPy 1.20.The replacement for these functions is the Python package dataRST/numpy/1.20.0-notes.rst ``ipmt``, ``irr``, ``mirr``, ``nper``, ``npv``, ``pmt``, ``ppmt``, ``pv``, and ``rate``.  These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ dataRST/numpy/1.4.0-notes.rst arbitrary constant value, mirror and circular padding. New polynomial support ---------------------- dataRST/numpy/1.8.0-notes.rst fix changes the returned value. The mirr function called the npv function, but worked around the problem, so that was also fixed and the return value of the mirr function remains unchanged. of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers -------------------------------------------
numpy.random.RandomState.random_integers,numpy.random.RandomState.randint,1,1, np.random.randint, dataRST/numpy/1.11.0-notes.rst interval over the closed one, ``np.random.random_integers`` is being deprecated in favor of calling ``np.random.randint``, which has been enhanced with the ``dtype`` parameter as described under "New Features". However, ``np.random.random_integers`` will not be removed anytime soon. FutureWarnings ============== dataRST/numpy/1.17.4-notes.rst - Fixed `random.random_integers` biased generation of 8 and 16 bit integers. - Fixed `np.einsum` regression on Power9 and z/Linux. - Fixed histogram problem with signed integer arrays.
numpy.PolyBase,ABCPolyBase,1,1, ABCPolyBase, dataRST/numpy/1.13.0-notes.rst The ABCPolyBase class, from which the convenience classes are derived, sets ``__array_ufun__ = None`` in order of opt out of ufuncs. If a polynomial convenience class instance is passed as an argument to a ufunc, a ``TypeError`` dataRST/numpy/1.20.0-notes.rst ``nickname`` attribute removed from ABCPolyBase ----------------------------------------------- An abstract property ``nickname`` has been removed from  ``ABCPolyBase`` as it An abstract property ``nickname`` has been removed from  ``ABCPolyBase`` as it was no longer used in the derived convenience classes. This may affect users who have derived classes from ``ABCPolyBase`` and This may affect users who have derived classes from ``ABCPolyBase`` and overridden the methods for representation and display, e.g. ``__str__``, ``__repr__``, ``_repr_latex``, etc. dataRST/numpy/1.21.0-notes.rst * The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please   use the abstract ``ABCPolyBase`` class instead.   (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__)   use the abstract ``ABCPolyBase`` class instead.   (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__) * The unused ``PolyError`` and ``PolyDomainError`` exceptions are Remove deprecated ``PolyBase`` and unused ``PolyError`` and ``PolyDomainError`` ------------------------------------------------------------------------------- The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please use The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please use the abstract ``ABCPolyBase`` class instead. Furthermore, the unused ``PolyError`` and ``PolyDomainError`` exceptions are the abstract ``ABCPolyBase`` class instead. Furthermore, the unused ``PolyError`` and ``PolyDomainError`` exceptions are removed from the `numpy.polynomial`. dataRST/numpy/1.9.0-notes.rst Polynomial Classes no longer derived from PolyBase -------------------------------------------------- This may cause problems with folks who depended on the polynomial classes being derived from PolyBase. They are now all derived from the abstract base class ABCPolyBase. Strictly speaking, there should be a deprecation involved, but no external code making use of the old baseclass could be base class ABCPolyBase. Strictly speaking, there should be a deprecation involved, but no external code making use of the old baseclass could be found.
numpy.typeDict,np.sctypeDict,1,1, np.sctypeDict, dataRST/numpy/1.20.0-notes.rst   have been removed from the public API. Use ``np.typeDict`` instead.   (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__) * The 14-year deprecation of ``np.ctypeslib.ctypes_load_library`` is expired. from ``np.sctypeDict`` and ``np.typeDict``.  You should use the lower case versions instead.  Note that ``"Complex64"`` corresponds to ``"complex128"`` and ``"Complex32"`` corresponds dataRST/numpy/1.21.0-notes.rst ``np.typeDict`` has been formally deprecated -------------------------------------------- ``np.typeDict`` is a deprecated alias for ``np.sctypeDict`` and ``np.typeDict`` is a deprecated alias for ``np.sctypeDict`` and has been so for over 14 years (6689502_). A deprecation warning will now be issued whenever getting ``np.typeDict``. A deprecation warning will now be issued whenever getting ``np.typeDict``. .. _6689502: https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d (`gh-17586 <https://github.com/numpy/numpy/pull/17586>`__)
numpy._ctypes.get_data,_ctypes.data,1,0,, dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_data`` (use ``_ctypes.data`` instead) * ``_ctypes.get_shape`` (use ``_ctypes.shape`` instead) * ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead)
numpy._ctypes.get_shape,_ctypes.shape,1,0,, dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_shape`` (use ``_ctypes.shape`` instead) * ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead) * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead)
numpy._ctypes.get_strides,_ctypes.strides,1,0,, dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead) * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead) (`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__)
numpy._ctypes.get_as_parameter,_ctypes._as_parameter_`,1,0,, dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead) (`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__) Expired deprecations
numpy.random.random_integers,np.random.randint,1,1, np.random.randint, dataRST/numpy/1.11.0-notes.rst interval over the closed one, ``np.random.random_integers`` is being deprecated in favor of calling ``np.random.randint``, which has been enhanced with the ``dtype`` parameter as described under "New Features". However, ``np.random.random_integers`` will not be removed anytime soon. FutureWarnings ==============
numpy.ma.MaskedArray.mini,np.ma.minimum.reduce,1,1, np.ma.minimum.reduce, dataRST/numpy/1.13.0-notes.rst * ``np.ma.MaskedArray.mini`` is deprecated, as it almost duplicates the   functionality of ``np.MaskedArray.min``. Exactly equivalent behaviour   can be obtained with ``np.ma.minimum.reduce``.
numpy.lib.function_base.unique,numpy.unique,1,1, numpy.unique, dataRST/numpy/1.16.0-notes.rst * ``np.lib.function_base.unique`` was removed, finishing a deprecation cycle   begun in NumPy 1.4. Use `numpy.unique` instead. * multi-field indexing now returns views instead of copies, finishing a
numpy.rank,np.ndim,1,1, np.ndim, dataRST/numpy/1.18.0-notes.rst * ``np.rank`` has been removed. This was deprecated in NumPy 1.10   and has been replaced by ``np.ndim``.   (`gh-14039 <https://github.com/numpy/numpy/pull/14039>`__)
numpy.testing.rand,np.random.rand,1,1, np.random.rand, dataRST/numpy/1.18.0-notes.rst * ``np.testing.rand`` has been removed. This was deprecated in NumPy 1.11   and has been replaced by ``np.random.rand``.   (`gh-14325 <https://github.com/numpy/numpy/pull/14325>`__)
numpy.ndarray.tostring,tobytes,1,1, tobytes(), dataRST/numpy/1.19.0-notes.rst ``numpy.ndarray.tostring()`` is deprecated in favor of ``tobytes()`` -------------------------------------------------------------------- ``~numpy.ndarray.tobytes`` has existed since the 1.9 release, but until this release ``~numpy.ndarray.tostring`` emitted no warning. The change to emit a warning brings NumPy in line with the builtin ``array.array`` methods of the same name.
numpy.sctypeNA,np.typeDict,1,1, np.typeDict, dataRST/numpy/1.20.0-notes.rst * The deprecation of ``np.sctypeNA`` and ``np.typeNA`` is expired. Both   have been removed from the public API. Use ``np.typeDict`` instead.   (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__)
numpy.typeNA,np.typeDict,1,1, np.typeDict, dataRST/numpy/1.20.0-notes.rst * The deprecation of ``np.sctypeNA`` and ``np.typeNA`` is expired. Both   have been removed from the public API. Use ``np.typeDict`` instead.   (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__)
