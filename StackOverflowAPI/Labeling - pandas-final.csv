DEPRECATED_API,KNOWN_REPLACEMENT,MENTIONED_IN_REL_NOTES,correct REPLACEMENT_FOUND ?,PROPOSED_REPLACEMENT,EXTRACT_FROM_DOCUMENTATION,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.SparseSeries,pandas.Series,1,1,['SparseDataFrame.loc[]'] ['SparseDataFrame'] ['SparseDataFrame'] ['SparseArray'] ['SparseArray'] ['repeats'] ['iloc'] ['.iat[]'] ['Series'] ['Series(..)'] ['SparseArray.dtype'] ['concat'] ['DataFrame[column]'] ['raise_on_error'] ['~'],dataRST/pandas/v0.10.0.rst - ``SparseSeries`` now has a ``density`` property (:issue:`2384`) - enable ``Series.str.strip/lstrip/rstrip`` methods to take an input argument to strip arbitrary characters (:issue:`2411`) - implement ``value_vars`` in ``melt`` to limit values to certain columns and add ``melt`` to pandas namespace (:issue:`2412`) dataRST/pandas/v0.13.0.rst and is non-consolidatable. ``SparseSeries`` and ``SparseDataFrame`` now inherit more methods from there hierarchy (Series/DataFrame),and no longer inherit from ``SparseArray`` (which instead is the object of the ``SparseBlock``) - Sparse suite now supports integration with non-sparse data. Non-float sparse data is supportable (partially implemented) - enable setitem on ``SparseSeries`` for boolean/integer/slices - ``SparsePanels`` implementation is unchanged (e.g. not using BlockManager,needs work) - added ``ftypes`` method to Series/DataFrame,similar to ``dtypes``,but indicates if the underlying is sparse/dense (as well as the dtype) - All ``NDFrame`` objects can now use ``__finalize__()`` to specify various dataRST/pandas/v0.16.0.rst Added :meth:`SparseSeries.to_coo` and :meth:`SparseSeries.from_coo` methods (:issue:`8048`) for converting to and from ``scipy.sparse.coo_matrix`` instances (see :ref:`here <sparse.scipysparse>`). For example,given a SparseSeries with MultiIndex we can convert to a ``scipy.sparse.coo_matrix`` by specifying the row and column labels as index levels: .. code-block:: python s = pd.Series([3.0,np.nan,1,3,np.nan,np.nan]) s.index = pd.MultiIndex.from_tuples([(1,2,a',0),(1,2,a',1),# SparseSeries ss = s.to_sparse() ss A,rows,columns = ss.to_coo(row_levels=['A',B'],column_levels=['C',D'],The from_coo method is a convenience method for creating a ``SparseSeries`` from a ``scipy.sparse.coo_matrix``: .. code-block:: python from scipy import sparse A = sparse.coo_matrix(([3.0,1,2.0],([1,0,0],[0,2,3])),ss = pd.SparseSeries.from_coo(A) ss .. _whatsnew_0160.enhancements.string: String methods enhancements ^^^^^^^^^^^^^^^^^^^^^^^^^^^ - ``SparseSeries`` and ``SparsePanel`` now accept zero argument constructors (same as their non-sparse counterparts) (:issue:`9272`). - Regression in merging ``Categorical`` and ``object`` dtypes (:issue:`9426`) - Bug in ``read_csv`` with buffer overflows with certain malformed input files (:issue:`9205`) - Bug in groupby MultiIndex with missing pair (:issue:`9049`,:issue:`9344`) - Fixed bug in ``Series.groupby`` where grouping on ``MultiIndex`` levels would ignore the sort argument (:issue:`9444`) dataRST/pandas/v0.16.2.rst - Bug in ``SparseSeries.abs`` resets ``name`` (:issue:`10241`) - Bug in ``TimedeltaIndex`` slicing may reset freq (:issue:`10292`) - Bug in ``GroupBy.get_group`` raises ``ValueError`` when group key contains ``NaT`` (:issue:`6992`) - Bug in ``SparseSeries`` constructor ignores input data name (:issue:`10258`) - Bug in ``Categorical.remove_categories`` causing a ``ValueError`` when removing the ``NaN`` category if underlying dtype is floating-point (:issue:`10156`) - Bug in ``SparseSeries`` constructor ignores input data name (:issue:`10258`) - Bug in ``Categorical.remove_categories`` causing a ``ValueError`` when removing the ``NaN`` category if underlying dtype is floating-point (:issue:`10156`) - Bug where infer_freq infers time rule (WOM-5XXX) unsupported by to_offset (:issue:`9425`) - Bug in ``DataFrame.to_hdf()`` where table format would raise a seemingly unrelated error for invalid (non-string) column names. This is now explicitly forbidden. (:issue:`9057`) - Bug to handle masking empty ``DataFrame`` (:issue:`10126`). dataRST/pandas/v0.18.1.rst - Bug in ``SparseSeries[]`` indexing with ``Ellipsis`` raises ``KeyError`` (:issue:`9467`) - Bug in ``SparseArray[]`` indexing with tuples are not handled properly (:issue:`12966`) - Bug in ``SparseSeries.loc[]`` with list-like input raises ``TypeError`` (:issue:`10560`) - Bug in ``SparseSeries.iloc[]`` with scalar input may raise ``IndexError`` (:issue:`10560`) - Bug in ``SparseSeries.loc[]``,``.iloc[]`` with ``slice`` returns ``SparseArray``,rather than ``SparseSeries`` (:issue:`10560`) - Bug in ``SparseSeries.loc[]`` with list-like input raises ``TypeError`` (:issue:`10560`) - Bug in ``SparseSeries.iloc[]`` with scalar input may raise ``IndexError`` (:issue:`10560`) - Bug in ``SparseSeries.loc[]``,``.iloc[]`` with ``slice`` returns ``SparseArray``,rather than ``SparseSeries`` (:issue:`10560`) - Bug in ``SparseDataFrame.loc[]``,``.iloc[]`` may results in dense ``Series``,rather than ``SparseSeries`` (:issue:`12787`) - Bug in ``SparseArray`` addition ignores ``fill_value`` of right hand side (:issue:`12910`) - Bug in ``SparseSeries.iloc[]`` with scalar input may raise ``IndexError`` (:issue:`10560`) - Bug in ``SparseSeries.loc[]``,``.iloc[]`` with ``slice`` returns ``SparseArray``,rather than ``SparseSeries`` (:issue:`10560`) - Bug in ``SparseDataFrame.loc[]``,``.iloc[]`` may results in dense ``Series``,rather than ``SparseSeries`` (:issue:`12787`) - Bug in ``SparseArray`` addition ignores ``fill_value`` of right hand side (:issue:`12910`) - Bug in ``SparseArray`` mod raises ``AttributeError`` (:issue:`12910`) - Bug in ``SparseSeries.loc[]``,``.iloc[]`` with ``slice`` returns ``SparseArray``,rather than ``SparseSeries`` (:issue:`10560`) - Bug in ``SparseDataFrame.loc[]``,``.iloc[]`` may results in dense ``Series``,rather than ``SparseSeries`` (:issue:`12787`) - Bug in ``SparseArray`` addition ignores ``fill_value`` of right hand side (:issue:`12910`) - Bug in ``SparseArray`` mod raises ``AttributeError`` (:issue:`12910`) - Bug in ``SparseArray`` pow calculates ``1 ** np.nan`` as ``np.nan`` which must be 1 (:issue:`12910`) - Bug in ``SparseDataFrame.loc[]``,``.iloc[]`` may results in dense ``Series``,rather than ``SparseSeries`` (:issue:`12787`) - Bug in ``SparseArray`` addition ignores ``fill_value`` of right hand side (:issue:`12910`) - Bug in ``SparseArray`` mod raises ``AttributeError`` (:issue:`12910`) - Bug in ``SparseArray`` pow calculates ``1 ** np.nan`` as ``np.nan`` which must be 1 (:issue:`12910`) - Bug in ``SparseArray`` comparison output may incorrect result or raise ``ValueError`` (:issue:`12971`) - Bug in ``SparseSeries.__repr__`` raises ``TypeError`` when it is longer than ``max_rows`` (:issue:`10560`) - Bug in ``SparseSeries.shape`` ignores ``fill_value`` (:issue:`10452`) - Bug in ``SparseSeries`` and ``SparseArray`` may have different ``dtype`` from its dense values (:issue:`12908`) - Bug in ``SparseSeries.reindex`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``SparseArray.to_frame()`` results in ``DataFrame``,rather than ``SparseDataFrame`` (:issue:`9850`) - Bug in ``SparseSeries.shape`` ignores ``fill_value`` (:issue:`10452`) - Bug in ``SparseSeries`` and ``SparseArray`` may have different ``dtype`` from its dense values (:issue:`12908`) - Bug in ``SparseSeries.reindex`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``SparseArray.to_frame()`` results in ``DataFrame``,rather than ``SparseDataFrame`` (:issue:`9850`) - Bug in ``SparseSeries.value_counts()`` does not count ``fill_value`` (:issue:`6749`) - Bug in ``SparseSeries`` and ``SparseArray`` may have different ``dtype`` from its dense values (:issue:`12908`) - Bug in ``SparseSeries.reindex`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``SparseArray.to_frame()`` results in ``DataFrame``,rather than ``SparseDataFrame`` (:issue:`9850`) - Bug in ``SparseSeries.value_counts()`` does not count ``fill_value`` (:issue:`6749`) - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`) - Bug in ``SparseSeries.reindex`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``SparseArray.to_frame()`` results in ``DataFrame``,rather than ``SparseDataFrame`` (:issue:`9850`) - Bug in ``SparseSeries.value_counts()`` does not count ``fill_value`` (:issue:`6749`) - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`) - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``SparseSeries.value_counts()`` does not count ``fill_value`` (:issue:`6749`) - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`) - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``pd.concat()`` of ``SparseSeries`` results in dense (:issue:`10536`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` incorrectly handle ``fill_value`` (:issue:`9765`) - Bug in ``pd.concat()`` of ``SparseSeries`` results in dense (:issue:`10536`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` incorrectly handle ``fill_value`` (:issue:`9765`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` may raise ``AttributeError`` (:issue:`12174`) - Bug in ``SparseArray.shift()`` may raise ``NameError`` or ``TypeError`` (:issue:`12908`) .. _whatsnew_0181.api: dataRST/pandas/v0.19.0.rst s = pd.SparseSeries([0,2,0,1],fill_value=0,dtype=np.int64) s.dtype s + 1 - Sparse data structure now support ``astype`` to convert internal ``dtype`` (:issue:`13900`) .. code-block:: python s = pd.SparseSeries([1.0,0,2,0.0],fill_value=0) s s.astype(np.int64) ``astype`` fails if data contains values which cannot be converted to specified ``dtype``. Note that the limitation is applied to ``fill_value`` which default is ``np.nan``. In [7]: pd.SparseSeries([1.,np.nan,2,np.nan],"fill_value=np.nan).astype(np.int64) Out[7]: ValueError: unable to coerce current fill_value nan to int64 dtype Other sparse fixes """""""""""""""""""""""""""""""""""" - Subclassed ``SparseDataFrame`` and ``SparseSeries`` now preserve class types when slicing or transposing. (:issue:`13787`) - ``SparseArray`` with ``bool`` dtype now supports logical (bool) operators (:issue:`14000`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing may raise ``IndexError`` (:issue:`13144`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing result may have normal ``Index`` (:issue:`13144`) - Bug in ``SparseDataFrame`` in which ``axis=None`` did not default to ``axis=0`` (:issue:`13048`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing may raise ``IndexError`` (:issue:`13144`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing result may have normal ``Index`` (:issue:`13144`) - Bug in ``SparseDataFrame`` in which ``axis=None`` did not default to ``axis=0`` (:issue:`13048`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` creation with ``object`` dtype may raise ``TypeError`` (:issue:`11633`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing result may have normal ``Index`` (:issue:`13144`) - Bug in ``SparseDataFrame`` in which ``axis=None`` did not default to ``axis=0`` (:issue:`13048`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` creation with ``object`` dtype may raise ``TypeError`` (:issue:`11633`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` creation with ``object`` dtype may raise ``TypeError`` (:issue:`11633`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s",types were previously forced to float (:issue:`13917`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s,types were previously forced to float (:issue:`13917`) - Bug in ``SparseSeries`` slicing changes integer dtype to float (:issue:`8292`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s,types were previously forced to float (:issue:`13917`) - Bug in ``SparseSeries`` slicing changes integer dtype to float (:issue:`8292`) - Bug in ``SparseDataFarme`` comparison ops may raise ``TypeError`` (:issue:`13001`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s,types were previously forced to float (:issue:`13917`) - Bug in ``SparseSeries`` slicing changes integer dtype to float (:issue:`8292`) - Bug in ``SparseDataFarme`` comparison ops may raise ``TypeError`` (:issue:`13001`) - Bug in ``SparseDataFarme.isnull`` raises ``ValueError`` (:issue:`8276`) - Bug in ``SparseSeries`` slicing changes integer dtype to float (:issue:`8292`) - Bug in ``SparseDataFarme`` comparison ops may raise ``TypeError`` (:issue:`13001`) - Bug in ``SparseDataFarme.isnull`` raises ``ValueError`` (:issue:`8276`) - Bug in ``SparseSeries`` representation with ``bool`` dtype may raise ``IndexError`` (:issue:`13110`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` of ``bool`` or ``int64`` dtype may display its values like ``float64`` dtype (:issue:`13110`) - Bug in ``SparseSeries`` representation with ``bool`` dtype may raise ``IndexError`` (:issue:`13110`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` of ``bool`` or ``int64`` dtype may display its values like ``float64`` dtype (:issue:`13110`) - Bug in sparse indexing using ``SparseArray`` with ``bool`` dtype may return incorrect result (:issue:`13985`) - Bug in ``SparseArray`` created from ``SparseSeries`` may lose ``dtype`` (:issue:`13999`) - Bug in ``SparseSeries`` comparison with dense returns normal ``Series`` rather than ``SparseSeries`` (:issue:`13999`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` of ``bool`` or ``int64`` dtype may display its values like ``float64`` dtype (:issue:`13110`) - Bug in sparse indexing using ``SparseArray`` with ``bool`` dtype may return incorrect result (:issue:`13985`) - Bug in ``SparseArray`` created from ``SparseSeries`` may lose ``dtype`` (:issue:`13999`) - Bug in ``SparseSeries`` comparison with dense returns normal ``Series`` rather than ``SparseSeries`` (:issue:`13999`) .. _whatsnew_0190.indexer_dtype: - Bug in ``SparseArray`` created from ``SparseSeries`` may lose ``dtype`` (:issue:`13999`) - Bug in ``SparseSeries`` comparison with dense returns normal ``Series`` rather than ``SparseSeries`` (:issue:`13999`) .. _whatsnew_0190.indexer_dtype: Indexer dtype changes ^^^^^^^^^^^^^^^^^^^^^ - Bug in ``SparseSeries`` comparison with dense returns normal ``Series`` rather than ``SparseSeries`` (:issue:`13999`) .. _whatsnew_0190.indexer_dtype: Indexer dtype changes ^^^^^^^^^^^^^^^^^^^^^ .. note:: dataRST/pandas/v0.20.0.rst - ``SparseArray.cumsum()`` and ``SparseSeries.cumsum()`` will now always return ``SparseArray`` and ``SparseSeries`` respectively (:issue:`12855`) - ``DataFrame.applymap()`` with an empty ``DataFrame`` will return a copy of the empty ``DataFrame`` instead of a ``Series`` (:issue:`8222`) - ``Series.map()`` now respects default values of dictionary subclasses with a ``__missing__`` method,such as ``collections.Counter`` (:issue:`15999`) - ``.loc`` has compat with ``.ix`` for accepting iterators,and NamedTuples (:issue:`15120`) - ``interpolate()`` and ``fillna()`` will raise a ``ValueError`` if the ``limit`` keyword argument is not greater than 0. (:issue:`9217`) - ``SparseSeries.to_dense()`` has deprecated the ``sparse_only`` parameter (:issue:`14647`) - ``Series.repeat()`` has deprecated the ``reps`` parameter in favor of ``repeats`` (:issue:`12662`) - The ``Series`` constructor and ``.astype`` method have deprecated accepting timestamp dtypes without a frequency (e.g. ``np.datetime64``) for the ``dtype`` parameter (:issue:`15524`) - ``Index.repeat()`` and ``MultiIndex.repeat()`` have deprecated the ``n`` parameter in favor of ``repeats`` (:issue:`12662`) - ``Categorical.searchsorted()`` and ``Series.searchsorted()`` have deprecated the ``v`` parameter in favor of ``value`` (:issue:`12662`) and ``SparseSeries``,are removed (:issue:`10890`,:issue:`15098`). - ``Series.is_time_series`` is dropped in favor of ``Series.index.is_all_dates`` (:issue:`15098`) - The deprecated ``irow``,``icol``,``iget`` and ``iget_value`` methods are removed in favor of ``iloc`` and ``iat`` as explained :ref:`here <whatsnew_0170.deprecations>` (:issue:`10711`). - The deprecated ``DataFrame.iterkv()`` has been removed in favor of ``DataFrame.iteritems()`` (:issue:`10711`) - Bug in ``SparseSeries.reindex`` on single level with list of length 1 (:issue:`15447`) - Bug in repr-formatting a ``SparseDataFrame`` after a value was set on (a copy of) one of its series (:issue:`15488`) - Bug in ``SparseDataFrame`` construction with lists not coercing to dtype (:issue:`15682`) - Bug in sparse array indexing in which indices were not being validated (:issue:`15863`) Reshaping dataRST/pandas/v0.21.0.rst - ``.get_value`` and ``.set_value`` on ``Series``,``DataFrame``,``Panel``,``SparseSeries``,and ``SparseDataFrame`` are deprecated in favor of using ``.iat[]`` or ``.at[]`` accessors (:issue:`15269`) - Passing a non-existent column in ``.to_excel(...,columns=)`` is deprecated and will raise a ``KeyError`` in the future (:issue:`17295`) - ``raise_on_error`` parameter to :func:`Series.where`,:func:`Series.mask`,:func:`DataFrame.where`,:func:`DataFrame.mask` is deprecated,in favor of ``errors=`` (:issue:`14968`) - Using :meth:`DataFrame.rename_axis` and :meth:`Series.rename_axis` to alter index or column *labels* is now deprecated in favor of using ``.rename``. ``rename_axis`` may still be used to alter the name of the index or columns (:issue:`17833`). - :meth:`~DataFrame.reindex_axis` has been deprecated in favor of :meth:`~DataFrame.reindex`. See :ref:`here <whatsnew_0210.enhancements.rename_reindex_axis>` for more (:issue:`17833`). - Bug in ``SparseSeries`` raises ``AttributeError`` when a dictionary is passed in as data (:issue:`16905`) - Bug in :func:`SparseDataFrame.fillna` not filling all NaNs when frame was instantiated from SciPy sparse matrix (:issue:`16112`) - Bug in :func:`SparseSeries.unstack` and :func:`SparseDataFrame.stack` (:issue:`16614`,:issue:`15045`) - Bug in :func:`make_sparse` treating two numeric/boolean data,which have same bits,as same when array ``dtype`` is ``object`` (:issue:`17574`) - :func:`SparseArray.all` and :func:`SparseArray.any` are now implemented to handle ``SparseArray``,these were used but not implemented (:issue:`17570`) - Bug in :func:`SparseSeries.unstack` and :func:`SparseDataFrame.stack` (:issue:`16614`,:issue:`15045`) - Bug in :func:`make_sparse` treating two numeric/boolean data,which have same bits,as same when array ``dtype`` is ``object`` (:issue:`17574`) - :func:`SparseArray.all` and :func:`SparseArray.any` are now implemented to handle ``SparseArray``,these were used but not implemented (:issue:`17570`) Reshaping ^^^^^^^^^ dataRST/pandas/v0.23.0.rst used for all relevant pandas types (``Series``,``DataFrame``,``SparseSeries`` and ``SparseDataFrame``). If you wish to retain the old behavior while using Python >= 3.6,you can use ``.sort_index()``: .. ipython:: python - ``Series.from_array`` and ``SparseSeries.from_array`` are deprecated. Use the normal constructor ``Series(..)`` and ``SparseSeries(..)`` instead (:issue:`18213`). - ``DataFrame.as_matrix`` is deprecated. Use ``DataFrame.values`` instead (:issue:`18458`). - ``Series.asobject``,``DatetimeIndex.asobject``,``PeriodIndex.asobject`` and ``TimeDeltaIndex.asobject`` have been deprecated. Use ``.astype(object)`` instead (:issue:`18572`) - Grouping by a tuple of keys now emits a ``FutureWarning`` and is deprecated. In the future,a tuple passed to ``'by'`` will always refer to a single key - Bug in :class:`SparseSeries.memory_usage` which caused segfault by accessing non sparse elements (:issue:`19368`) - Bug in constructing a :class:`SparseArray`: if ``data`` is a scalar and ``index`` is defined it will coerce to ``float64`` regardless of scalar's dtype. (:issue:`19163`) Reshaping ^^^^^^^^^ - Bug in :func:`DataFrame.merge` where referencing a ``CategoricalIndex`` by name,where the ``by`` kwarg would ``KeyError`` (:issue:`20777`) dataRST/pandas/v0.24.0.rst ``SparseArray``,the array backing ``SparseSeries`` and the columns in a ``SparseDataFrame``,is now an extension array (:issue:`21978`,:issue:`19056`,:issue:`22835`). To conform to this interface and for consistency with the rest of pandas,some API breaking changes were made: - ``SparseArray`` is no longer a subclass of :class:`numpy.ndarray`. To convert a ``SparseArray`` to a NumPy array,use :func:`numpy.asarray`. - ``SparseArray.dtype`` and ``SparseSeries.dtype`` are now instances of :class:`SparseDtype`,rather than ``np.dtype``. Access the underlying dtype with ``SparseDtype.subtype``. - ``numpy.asarray(sparse_array)`` now returns a dense array with all the values,not just the non-fill-value values (:issue:`14167`) - ``SparseArray.take`` now matches the API of :meth:`pandas.api.extensions.ExtensionArray.take` (:issue:`19506`): * The default value of ``allow_fill`` has changed from ``False`` to ``True``. * The ``out`` and ``mode`` parameters are now longer accepted (previously,this raised if they were specified). - The result of :func:`concat` with a mix of sparse and dense Series is a Series with sparse values,rather than a ``SparseSeries``. - ``SparseDataFrame.combine`` and ``DataFrame.combine_first`` no longer supports combining a sparse column with a dense column while preserving the sparse subtype. The result will be an object-dtype SparseArray. - Setting :attr:`SparseArray.fill_value` to a fill value with a different dtype is now allowed. - ``DataFrame[column]`` is now a :class:`Series` with sparse values,rather than a :class:`SparseSeries`,when slicing a single column with sparse values (:issue:`23559`). - The result of :meth:`Series.where` is now a ``Series`` with sparse values,like with other extension arrays (:issue:`24077`) - ``DataFrame[column]`` is now a :class:`Series` with sparse values,rather than a :class:`SparseSeries`,when slicing a single column with sparse values (:issue:`23559`). - The result of :meth:`Series.where` is now a ``Series`` with sparse values,like with other extension arrays (:issue:`24077`) Some new warnings are issued for operations that require or are likely to materialize a large dense array: - A :class:`errors.PerformanceWarning` is issued when using fillna with a ``method``,as a dense array is constructed to create the filled array. Filling with a ``value`` is the efficient way to fill a sparse array. - A :class:`errors.PerformanceWarning` is now issued when concatenating sparse Series with differing fill values. The fill value from the first sparse array continues to be used. - The result of ``SparseSeries.unstack`` is now a :class:`DataFrame` with sparse values,rather than a :class:`SparseDataFrame` (:issue:`24372`). - :class:`DatetimeIndex` and :class:`TimedeltaIndex` no longer ignore the dtype precision. Passing a non-nanosecond resolution dtype will raise a ``ValueError`` (:issue:`24753`) .. _whatsnew_0240.api.extension: Extension type changes ~~~~~~~~~~~~~~~~~~~~~~ - :meth:`SparseSeries.to_dense` has dropped the ``sparse_only`` parameter (:issue:`14686`) - :meth:`DataFrame.astype` and :meth:`Series.astype` have renamed the ``raise_on_error`` argument to ``errors`` (:issue:`14967`) - ``is_sequence``,``is_any_int_dtype``,and ``is_floating_dtype`` have been removed from ``pandas.api.types`` (:issue:`16163`,:issue:`16189`) .. _whatsnew_0240.performance: Performance improvements - Bug in unary inversion operator (``~``) on a ``SparseSeries`` with boolean values. The performance of this has also been improved (:issue:`22835`) - Bug in :meth:`SparseArary.unique` not returning the unique values (:issue:`19595`) - Bug in :meth:`SparseArray.nonzero` and :meth:`SparseDataFrame.dropna` returning shifted/incorrect results (:issue:`21172`) - Bug in :meth:`DataFrame.apply` where dtypes would lose sparseness (:issue:`23744`) - Bug in :func:`concat` when concatenating a list of :class:`Series` with all-sparse values changing the ``fill_value`` and converting to a dense Series (:issue:`24371`) dataRST/pandas/v0.25.0.rst Providing any ``SparseSeries`` or ``SparseDataFrame`` to :func:`concat` will cause a ``SparseSeries`` or ``SparseDataFrame`` to be returned,as before. The ``.str``-accessor performs stricter type checks ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Due to the lack of more fine-grained dtypes,:attr:`Series.str` so far only checked whether the data was cause a ``SparseSeries`` or ``SparseDataFrame`` to be returned,as before. The ``.str``-accessor performs stricter type checks ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Due to the lack of more fine-grained dtypes,:attr:`Series.str` so far only checked whether the data was of ``object`` dtype. :attr:`Series.str` will now infer the dtype data *within* the Series; in particular,"The ``SparseSeries`` and ``SparseDataFrame`` subclasses are deprecated. Their functionality is better-provided by a ``Series`` or ``DataFrame`` with sparse values. **Previous way** .. code-block:: python df = pd.SparseDataFrame({""A"": [0",0,1,2]}) dataRST/pandas/v0.4.x.rst - Altered binary operations on differently-indexed SparseSeries objects to use the integer-based (dense) alignment logic which is faster with a larger number of blocks (:issue:`205`) - Wrote faster Cython data alignment / merging routines resulting in substantial speed increases dataRST/pandas/v0.6.1.rst data structures. SparseSeries now derives from SparseArray (:issue:`463`) - :ref:`Better console printing options <basics.console_output>` (:issue:`453`) - Implement fast :ref:`data ranking <computation.ranking>` for Series and DataFrame,fast versions of scipy.stats.rankdata (:issue:`428`) - Implement ``DataFrame.from_items`` alternate dataRST/pandas/v1.0.0.rst **Removed SparseSeries and SparseDataFrame** ``SparseSeries``,``SparseDataFrame`` and the ``DataFrame.to_sparse`` method have been removed (:issue:`28425`). We recommend using a ``Series`` or ``DataFrame`` with sparse values instead. See :ref:`sparse.migration` for help with migrating existing code. ``SparseSeries``,``SparseDataFrame`` and the ``DataFrame.to_sparse`` method have been removed (:issue:`28425`). We recommend using a ``Series`` or ``DataFrame`` with sparse values instead. See :ref:`sparse.migration` for help with migrating existing code. .. _whatsnew_100.matplotlib_units:,,,,,,,,,,,,,,,,,,,,,,,
pandas.SparseDataFrame,pandas.DataFrame,1,1,['SparseSeries'] ['get_dummies'] ['pd.get_dummies'] ['SparseSeries'] ['SparseSeries'] ['.iat[]'] ['SparseSeries.unstack'] ['SparseDataFrame'] ['concat'] ['DataFrame'] ['SparseSeries.unstack'] ['SparseArray.nonzero'] ['Series'] ['concat'] ['DataFrame'] ['SparseSeries'] ['SparseSeries'] ['SparseSeries'],dataRST/pandas/v0.13.0.rst and is non-consolidatable. ``SparseSeries`` and ``SparseDataFrame`` now inherit more methods from there hierarchy (Series/DataFrame),and no longer inherit from ``SparseArray`` (which instead is the object of the ``SparseBlock``) - Sparse suite now supports integration with non-sparse data. Non-float sparse data is supportable (partially implemented) dataRST/pandas/v0.16.1.rst - ``get_dummies`` function now accepts ``sparse`` keyword. If set to ``True``,the return ``DataFrame`` is sparse,e.g. ``SparseDataFrame``. (:issue:`8823`) - ``Period`` now accepts ``datetime64`` as value input. (:issue:`9054`) - Allow timedelta string conversion when leading zero is missing from time definition,ie ``0:00:00`` vs ``00:00:00``. (:issue:`9570`) - Allow ``Panel.shift`` with ``axis='items'`` (:issue:`9890`) - Trying to write an excel file now raises ``NotImplementedError`` if the ``DataFrame`` has a ``MultiIndex`` instead of writing a broken Excel file. (:issue:`9794`) - Bug in which ``SparseDataFrame`` could not take ``nan`` as a column name (:issue:`8822`) - Bug in ``to_msgpack`` and ``read_msgpack`` zlib and blosc compression support (:issue:`9783`) - Bug ``GroupBy.size`` doesn't attach index name properly if grouped by ``TimeGrouper`` (:issue:`9925`) - Bug causing an exception in slice assignments because ``length_of_indexer`` returns wrong results (:issue:`9995`) - Bug in csv parser causing lines with initial white space plus one non-space character to be skipped. (:issue:`9710`) dataRST/pandas/v0.17.0.rst - Bug in ``pd.get_dummies`` with ``sparse=True`` not returning ``SparseDataFrame`` (:issue:`10531`) - Bug in ``Index`` subtypes (such as ``PeriodIndex``) not returning their own type for ``.drop`` and ``.insert`` methods (:issue:`10620`) - Bug in ``algos.outer_join_indexer`` when ``right`` array is empty (:issue:`10618`) - Bug in ``filter`` (regression from 0.16.0) and ``transform`` when grouping on multiple keys,one of which is datetime-like (:issue:`10114`) - Bug in ``to_datetime`` and ``to_timedelta`` causing ``Index`` name to be lost (:issue:`10875`) dataRST/pandas/v0.18.1.rst - Bug in ``SparseDataFrame.loc[]``,``.iloc[]`` may results in dense ``Series``,rather than ``SparseSeries`` (:issue:`12787`) - Bug in ``SparseArray`` addition ignores ``fill_value`` of right hand side (:issue:`12910`) - Bug in ``SparseArray`` mod raises ``AttributeError`` (:issue:`12910`) - Bug in ``SparseArray`` pow calculates ``1 ** np.nan`` as ``np.nan`` which must be 1 (:issue:`12910`) - Bug in ``SparseArray`` comparison output may incorrect result or raise ``ValueError`` (:issue:`12971`) - Bug in ``SparseArray.to_frame()`` results in ``DataFrame``,rather than ``SparseDataFrame`` (:issue:`9850`) - Bug in ``SparseSeries.value_counts()`` does not count ``fill_value`` (:issue:`6749`) - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`) - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``pd.concat()`` of ``SparseSeries`` results in dense (:issue:`10536`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` incorrectly handle ``fill_value`` (:issue:`9765`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` may raise ``AttributeError`` (:issue:`12174`) - Bug in ``SparseArray.shift()`` may raise ``NameError`` or ``TypeError`` (:issue:`12908`) .. _whatsnew_0181.api: API changes - Bug in ``pd.concat()`` of ``SparseDataFrame`` may raise ``AttributeError`` (:issue:`12174`) - Bug in ``SparseArray.shift()`` may raise ``NameError`` or ``TypeError`` (:issue:`12908`) .. _whatsnew_0181.api: API changes ~~~~~~~~~~~ sp = pd.SparseDataFrame([1,2,3]) sp Previous behaviour: .. code-block:: ipython In [2]: np.cumsum(sp,axis=0) dataRST/pandas/v0.19.0.rst - Subclassed ``SparseDataFrame`` and ``SparseSeries`` now preserve class types when slicing or transposing. (:issue:`13787`) - ``SparseArray`` with ``bool`` dtype now supports logical (bool) operators (:issue:`14000`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing may raise ``IndexError`` (:issue:`13144`) - Bug in ``SparseSeries`` with ``MultiIndex`` ``[]`` indexing result may have normal ``Index`` (:issue:`13144`) - Bug in ``SparseDataFrame`` in which ``axis=None`` did not default to ``axis=0`` (:issue:`13048`) - Bug in ``SparseDataFrame`` in which ``axis=None`` did not default to ``axis=0`` (:issue:`13048`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` creation with ``object`` dtype may raise ``TypeError`` (:issue:`11633`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` creation with ``object`` dtype may raise ``TypeError`` (:issue:`11633`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s,types were previously forced to float (:issue:`13917`) - Bug in ``SparseDataFrame`` doesn't respect passed ``SparseArray`` or ``SparseSeries`` 's dtype and ``fill_value`` (:issue:`13866`) - Bug in ``SparseArray`` and ``SparseSeries`` don't apply ufunc to ``fill_value`` (:issue:`13853`) - Bug in ``SparseSeries.abs`` incorrectly keeps negative ``fill_value`` (:issue:`13853`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s,types were previously forced to float (:issue:`13917`) - Bug in ``SparseSeries`` slicing changes integer dtype to float (:issue:`8292`) - Bug in single row slicing on multi-type ``SparseDataFrame`` s,types were previously forced to float (:issue:`13917`) - Bug in ``SparseSeries`` slicing changes integer dtype to float (:issue:`8292`) - Bug in ``SparseDataFarme`` comparison ops may raise ``TypeError`` (:issue:`13001`) - Bug in ``SparseDataFarme.isnull`` raises ``ValueError`` (:issue:`8276`) - Bug in ``SparseSeries`` representation with ``bool`` dtype may raise ``IndexError`` (:issue:`13110`) - Bug in ``SparseSeries`` and ``SparseDataFrame`` of ``bool`` or ``int64`` dtype may display its values like ``float64`` dtype (:issue:`13110`) - Bug in sparse indexing using ``SparseArray`` with ``bool`` dtype may return incorrect result (:issue:`13985`) - Bug in ``SparseArray`` created from ``SparseSeries`` may lose ``dtype`` (:issue:`13999`) - Bug in ``SparseSeries`` comparison with dense returns normal ``Series`` rather than ``SparseSeries`` (:issue:`13999`) .. _whatsnew_0190.indexer_dtype: dataRST/pandas/v0.20.0.rst SciPy sparse matrix from/to SparseDataFrame ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pandas now supports creating sparse dataframes directly from ``scipy.sparse.spmatrix`` instances. See the :ref:`documentation <sparse.scipysparse>` for more information. (:issue:`4343`) All sparse formats are supported,but matrices that are not in :mod:`COOrdinate <scipy.sparse>` format will be converted,copying data as needed. sdf = pd.SparseDataFrame(sp_arr) sdf To convert a ``SparseDataFrame`` back to sparse SciPy matrix in COO format,you can use: .. code-block:: python sdf.to_coo() To convert a ``SparseDataFrame`` back to sparse SciPy matrix in COO format,you can use: .. code-block:: python sdf.to_coo() .. _whatsnew_0200.enhancements.style_excel: Excel output for styled DataFrames - ``SparseDataFrame.default_fill_value`` will be 0,previously was ``nan`` in the return from ``pd.get_dummies(...,sparse=True)`` (:issue:`15594`) - The default behaviour of ``Series.str.match`` has changed from extracting groups to matching the pattern. The extracting behaviour was deprecated since pandas version 0.13.0 and can be done with the ``Series.str.extract`` method (:issue:`5224`). As a consequence,the ``as_indexer`` keyword is - Bug in repr-formatting a ``SparseDataFrame`` after a value was set on (a copy of) one of its series (:issue:`15488`) - Bug in ``SparseDataFrame`` construction with lists not coercing to dtype (:issue:`15682`) - Bug in sparse array indexing in which indices were not being validated (:issue:`15863`) Reshaping ^^^^^^^^^ - Bug in ``SparseDataFrame`` construction with lists not coercing to dtype (:issue:`15682`) - Bug in sparse array indexing in which indices were not being validated (:issue:`15863`) Reshaping ^^^^^^^^^ - Bug in ``pd.merge_asof()`` where ``left_index`` or ``right_index`` caused a failure when multiple ``by`` was specified (:issue:`15676`) dataRST/pandas/v0.20.2.rst - Bug in construction of ``SparseDataFrame`` from ``scipy.sparse.dok_matrix`` (:issue:`16179`) Reshaping ^^^^^^^^^ - Bug in ``DataFrame.stack`` with unsorted levels in ``MultiIndex`` columns (:issue:`16323`) - Bug in ``pd.wide_to_long()`` where no error was raised when ``i`` was not a unique identifier (:issue:`16382`) dataRST/pandas/v0.21.0.rst - ``.get_value`` and ``.set_value`` on ``Series``,``DataFrame``,``Panel``,``SparseSeries``,and ``SparseDataFrame`` are deprecated in favor of using ``.iat[]`` or ``.at[]`` accessors (:issue:`15269`) - Passing a non-existent column in ``.to_excel(...,columns=)`` is deprecated and will raise a ``KeyError`` in the future (:issue:`17295`) - ``raise_on_error`` parameter to :func:`Series.where`,:func:`Series.mask`,:func:`DataFrame.where`,:func:`DataFrame.mask` is deprecated,in favor of ``errors=`` (:issue:`14968`) - Using :meth:`DataFrame.rename_axis` and :meth:`Series.rename_axis` to alter index or column *labels* is now deprecated in favor of using ``.rename``. ``rename_axis`` may still be used to alter the name of the index or columns (:issue:`17833`). - :meth:`~DataFrame.reindex_axis` has been deprecated in favor of :meth:`~DataFrame.reindex`. See :ref:`here <whatsnew_0210.enhancements.rename_reindex_axis>` for more (:issue:`17833`). - Improved performance of instantiating :class:`SparseDataFrame` (:issue:`16773`) - :attr:`Series.dt` no longer performs frequency inference,yielding a large speedup when accessing the attribute (:issue:`17210`) - Improved performance of :meth:`~Series.cat.set_categories` by not materializing the values (:issue:`17508`) - :attr:`Timestamp.microsecond` no longer re-computes on attribute access (:issue:`17331`) - Improved performance of the :class:`CategoricalIndex` for data that is already categorical dtype (:issue:`17513`) - Bug in :func:`SparseDataFrame.fillna` not filling all NaNs when frame was instantiated from SciPy sparse matrix (:issue:`16112`) - Bug in :func:`SparseSeries.unstack` and :func:`SparseDataFrame.stack` (:issue:`16614`,:issue:`15045`) - Bug in :func:`make_sparse` treating two numeric/boolean data,which have same bits,as same when array ``dtype`` is ``object`` (:issue:`17574`) - :func:`SparseArray.all` and :func:`SparseArray.any` are now implemented to handle ``SparseArray``,these were used but not implemented (:issue:`17570`) Reshaping - Bug in :func:`SparseSeries.unstack` and :func:`SparseDataFrame.stack` (:issue:`16614`,:issue:`15045`) - Bug in :func:`make_sparse` treating two numeric/boolean data,which have same bits,as same when array ``dtype`` is ``object`` (:issue:`17574`) - :func:`SparseArray.all` and :func:`SparseArray.any` are now implemented to handle ``SparseArray``,these were used but not implemented (:issue:`17570`) Reshaping ^^^^^^^^^ dataRST/pandas/v0.23.0.rst and ``SparseDataFrame``). If you wish to retain the old behavior while using Python >= 3.6,you can use ``.sort_index()``: .. ipython:: python pd.Series({'Income': 2000,- Bug in which creating a :class:`SparseDataFrame` from a dense ``Series`` or an unsupported type raised an uncontrolled exception (:issue:`19374`) - Bug in :class:`SparseDataFrame.to_csv` causing exception (:issue:`19384`) - Bug in :class:`SparseSeries.memory_usage` which caused segfault by accessing non sparse elements (:issue:`19368`) - Bug in constructing a :class:`SparseArray`: if ``data`` is a scalar and ``index`` is defined it will coerce to ``float64`` regardless of scalar's dtype. (:issue:`19163`) Reshaping - Bug in :class:`SparseDataFrame.to_csv` causing exception (:issue:`19384`) - Bug in :class:`SparseSeries.memory_usage` which caused segfault by accessing non sparse elements (:issue:`19368`) - Bug in constructing a :class:`SparseArray`: if ``data`` is a scalar and ``index`` is defined it will coerce to ``float64`` regardless of scalar's dtype. (:issue:`19163`) Reshaping ^^^^^^^^^ - Bug in :func:`concat` when concatenating sparse and dense series it returns only a ``SparseDataFrame``. Should be a ``DataFrame``. (:issue:`18914`,:issue:`18686`,and :issue:`16874`) - Improved error message for :func:`DataFrame.merge` when there is no common merge key (:issue:`19427`) - Bug in :func:`DataFrame.join` which does an ``outer`` instead of a ``left`` join when being called with multiple DataFrames and some have non-unique indices (:issue:`19624`) - :func:`Series.rename` now accepts ``axis`` as a kwarg (:issue:`18589`) - Bug in :func:`~DataFrame.rename` where an Index of same-length tuples was converted to a MultiIndex (:issue:`19497`) dataRST/pandas/v0.24.0.rst ``SparseArray``,the array backing ``SparseSeries`` and the columns in a ``SparseDataFrame``,is now an extension array (:issue:`21978`,:issue:`19056`,:issue:`22835`). To conform to this interface and for consistency with the rest of pandas,some API breaking changes were made: - ``SparseArray`` is no longer a subclass of :class:`numpy.ndarray`. To convert a ``SparseArray`` to a NumPy array,use :func:`numpy.asarray`. - ``SparseDataFrame.combine`` and ``DataFrame.combine_first`` no longer supports combining a sparse column with a dense column while preserving the sparse subtype. The result will be an object-dtype SparseArray. - Setting :attr:`SparseArray.fill_value` to a fill value with a different dtype is now allowed. - ``DataFrame[column]`` is now a :class:`Series` with sparse values,rather than a :class:`SparseSeries`,when slicing a single column with sparse values (:issue:`23559`). - The result of :meth:`Series.where` is now a ``Series`` with sparse values,like with other extension arrays (:issue:`24077`) Some new warnings are issued for operations that require or are likely to materialize a large dense array: a :class:`DataFrame` or a :class:`SparseDataFrame`,depending on whether all or a just a subset of the columns were dummy-encoded. Now,"a :class:`DataFrame` is always returned (:issue:`24284`). *Previous behavior* The first :func:`get_dummies` returns a :class:`DataFrame` because the column ``A`` is not dummy encoded. When just ``[""B""","""C""]`` are passed to ``get_dummies``",then all the columns are dummy-encoded,"and a :class:`SparseDataFrame` was returned. .. code-block:: ipython In [2]: df = pd.DataFrame({""A"": [1",2],"""B"": ['a'",b'],"""C"": ['a'",a']}) In [3]: type(pd.get_dummies(df,"sparse=True)) Out[3]: pandas.core.frame.DataFrame Out[4]: pandas.core.sparse.frame.SparseDataFrame .. ipython:: python :suppress: df = pd.DataFrame({""A"": [1",2],"""B"": ['a'",b'],"""C"": ['a'",a']}) *New behavior* There's no difference in memory usage between a :class:`SparseDataFrame` and a :class:`DataFrame` with sparse values. The memory usage will be the same as in the previous version of pandas. .. _whatsnew_0240.api_breaking.frame_to_dict_index_orient: Raise ValueError in ``DataFrame.to_dict(orient='index')`` - The result of ``SparseSeries.unstack`` is now a :class:`DataFrame` with sparse values,rather than a :class:`SparseDataFrame` (:issue:`24372`). - :class:`DatetimeIndex` and :class:`TimedeltaIndex` no longer ignore the dtype precision. Passing a non-nanosecond resolution dtype will raise a ``ValueError`` (:issue:`24753`) .. _whatsnew_0240.api.extension: Extension type changes ~~~~~~~~~~~~~~~~~~~~~~ - Bug in :meth:`SparseArray.nonzero` and :meth:`SparseDataFrame.dropna` returning shifted/incorrect results (:issue:`21172`) - Bug in :meth:`DataFrame.apply` where dtypes would lose sparseness (:issue:`23744`) - Bug in :func:`concat` when concatenating a list of :class:`Series` with all-sparse values changing the ``fill_value`` and converting to a dense Series (:issue:`24371`) Style ^^^^^ dataRST/pandas/v0.25.0.rst :class:`Series` or :class:`DataFrame` with sparse values,"rather than a :class:`SparseDataFrame` (:issue:`25702`). .. ipython:: python :okwarning: df = pd.DataFrame({""A"": pd.SparseArray([0",1])}) *Previous behavior*: pandas.core.sparse.frame.SparseDataFrame *New behavior*: .. ipython:: python type(pd.concat([df,df])) This now matches the existing behavior of :class:`concat` on ``Series`` with sparse values. :func:`concat` will continue to return a ``SparseDataFrame`` when all the values are instances of ``SparseDataFrame``. This change also affects routines using :func:`concat` internally,like :func:`get_dummies`,which now returns a :class:`DataFrame` in all cases (previously a ``SparseDataFrame`` was returned if all the columns were dummy encoded,and a :class:`DataFrame` otherwise). are instances of ``SparseDataFrame``. This change also affects routines using :func:`concat` internally,like :func:`get_dummies`,which now returns a :class:`DataFrame` in all cases (previously a ``SparseDataFrame`` was returned if all the columns were dummy encoded,and a :class:`DataFrame` otherwise). Providing any ``SparseSeries`` or ``SparseDataFrame`` to :func:`concat` will which now returns a :class:`DataFrame` in all cases (previously a ``SparseDataFrame`` was returned if all the columns were dummy encoded,and a :class:`DataFrame` otherwise). Providing any ``SparseSeries`` or ``SparseDataFrame`` to :func:`concat` will cause a ``SparseSeries`` or ``SparseDataFrame`` to be returned,as before. The ``.str``-accessor performs stricter type checks Providing any ``SparseSeries`` or ``SparseDataFrame`` to :func:`concat` will cause a ``SparseSeries`` or ``SparseDataFrame`` to be returned,as before. The ``.str``-accessor performs stricter type checks ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Due to the lack of more fine-grained dtypes,:attr:`Series.str` so far only checked whether the data was cause a ``SparseSeries`` or ``SparseDataFrame`` to be returned,as before. The ``.str``-accessor performs stricter type checks ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Due to the lack of more fine-grained dtypes,:attr:`Series.str` so far only checked whether the data was of ``object`` dtype. :attr:`Series.str` will now infer the dtype data *within* the Series; in particular,"The ``SparseSeries`` and ``SparseDataFrame`` subclasses are deprecated. Their functionality is better-provided by a ``Series`` or ``DataFrame`` with sparse values. **Previous way** .. code-block:: python df = pd.SparseDataFrame({""A"": [0",0,1,"2]}) df = pd.SparseDataFrame({""A"": [0",0,1,2]}) df.dtypes **New way** .. ipython:: python :okwarning: - Bug in :class:`SparseDataFrame` when adding a column in which the length of values does not match length of index,``AssertionError`` is raised instead of raising ``ValueError`` (:issue:`25484`) - Introduce a better error message in :meth:`Series.sparse.from_coo` so it returns a ``TypeError`` for inputs that are not coo matrices (:issue:`26554`) - Bug in :func:`numpy.modf` on a :class:`SparseArray`. Now a tuple of :class:`SparseArray` is returned (:issue:`26946`). Build changes ^^^^^^^^^^^^^ dataRST/pandas/v1.0.0.rst **Removed SparseSeries and SparseDataFrame** ``SparseSeries``,``SparseDataFrame`` and the ``DataFrame.to_sparse`` method have been removed (:issue:`28425`). We recommend using a ``Series`` or ``DataFrame`` with sparse values instead. See :ref:`sparse.migration` for help with migrating existing code. ``SparseSeries``,``SparseDataFrame`` and the ``DataFrame.to_sparse`` method have been removed (:issue:`28425`). We recommend using a ``Series`` or ``DataFrame`` with sparse values instead. See :ref:`sparse.migration` for help with migrating existing code. .. _whatsnew_100.matplotlib_units: - Bug in :class:`SparseDataFrame` arithmetic operations incorrectly casting inputs to float (:issue:`28107`) - Bug in ``DataFrame.sparse`` returning a ``Series`` when there was a column named ``sparse`` rather than the accessor (:issue:`30758`) - Fixed :meth:`operator.xor` with a boolean-dtype ``SparseArray``. Now returns a sparse result,rather than object dtype (:issue:`31025`) ExtensionArray ^^^^^^^^^^^^^^,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.SparseArray.values,np.asarray,1,1,['np.asarray(...)'],dataRST/pandas/v0.25.0.rst - The :attr:`SparseArray.values` attribute is deprecated. You can use ``np.asarray(...)`` or the :meth:`SparseArray.to_dense` method instead (:issue:`26421`). - The functions :func:`pandas.to_datetime` and :func:`pandas.to_timedelta` have deprecated the ``box`` keyword. Instead,use :meth:`to_numpy` or :meth:`Timestamp.to_datetime64` or :meth:`Timedelta.to_timedelta64`. (:issue:`24416`) - The :meth:`DataFrame.compound` and :meth:`Series.compound` methods are deprecated and will be removed in a future version (:issue:`26405`). - The internal attributes ``_start``,``_stop`` and ``_step`` attributes of :class:`RangeIndex` have been deprecated.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.to_datetime,"Timestamp.to_datetime64(), or Series.to_numpy()",1,1,['to_numpy'],dataRST/pandas/v0.25.0.rst - The functions :func:`pandas.to_datetime` and :func:`pandas.to_timedelta` have deprecated the ``box`` keyword. Instead,use :meth:`to_numpy` or :meth:`Timestamp.to_datetime64` or :meth:`Timedelta.to_timedelta64`. (:issue:`24416`) - The :meth:`DataFrame.compound` and :meth:`Series.compound` methods are deprecated and will be removed in a future version (:issue:`26405`). - The internal attributes ``_start``,``_stop`` and ``_step`` attributes of :class:`RangeIndex` have been deprecated. Use the public attributes :attr:`~RangeIndex.start`,:attr:`~RangeIndex.stop` and :attr:`~RangeIndex.step` instead (:issue:`26581`). - The :meth:`Series.ftype`,,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. dataRST/pandas/v1.0.0.rst - Bug in :func:`pandas.to_datetime` when called with ``None`` raising ``TypeError`` instead of returning ``NaT`` (:issue:`30011`) - Bug in :func:`pandas.to_datetime` failing for ``deques`` when using ``cache=True`` (the default) (:issue:`29403`) - Bug in :meth:`Series.item` with ``datetime64`` or ``timedelta64`` dtype,:meth:`DatetimeIndex.item`,and :meth:`TimedeltaIndex.item` returning an integer instead of a :class:`Timestamp` or :class:`Timedelta` (:issue:`30175`) - Bug in :class:`DatetimeIndex` addition when adding a non-optimized :class:`DateOffset` incorrectly dropping timezone information (:issue:`30336`) - Bug in :meth:`DataFrame.drop` where attempting to drop non-existent values from a DatetimeIndex would yield a confusing error message (:issue:`30399`) - Bug in :func:`pandas.to_datetime` failing for ``deques`` when using ``cache=True`` (the default) (:issue:`29403`) - Bug in :meth:`Series.item` with ``datetime64`` or ``timedelta64`` dtype,:meth:`DatetimeIndex.item`,and :meth:`TimedeltaIndex.item` returning an integer instead of a :class:`Timestamp` or :class:`Timedelta` (:issue:`30175`) - Bug in :class:`DatetimeIndex` addition when adding a non-optimized :class:`DateOffset` incorrectly dropping timezone information (:issue:`30336`) - Bug in :meth:`DataFrame.drop` where attempting to drop non-existent values from a DatetimeIndex would yield a confusing error message (:issue:`30399`) - Bug in :meth:`DataFrame.append` would remove the timezone-awareness of new data (:issue:`30238`) - Bug in :func:`pandas.to_datetime` when called with ``Series`` storing ``IntegerArray`` raising ``TypeError`` instead of returning ``Series`` (:issue:`30050`) - Bug in :func:`date_range` with custom business hours as ``freq`` and given number of ``periods`` (:issue:`30593`) - Bug in :class:`PeriodIndex` comparisons with incorrectly casting integers to :class:`Period` objects,inconsistent with the :class:`Period` comparison behavior (:issue:`30722`) - Bug in :meth:`DatetimeIndex.insert` raising a ``ValueError`` instead of a ``TypeError`` when trying to insert a timezone-aware :class:`Timestamp` into a timezone-naive :class:`DatetimeIndex`,or vice-versa (:issue:`30806`) Timedelta,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.ftype,dtype(),1,1,['Series.dtype'] ['DataFrame.ftypes'],,dataRST/pandas/v0.25.0.rst - The :meth:`Series.ftype`,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. Instead,use :meth:`Series.dtype` and :meth:`DataFrame.dtypes` (:issue:`26705`). - The :meth:`Series.get_values`,:meth:`DataFrame.get_values`,:meth:`Index.get_values`,:meth:`SparseArray.get_values` and :meth:`Categorical.get_values` methods are deprecated. One of ``np.asarray(..)`` or :meth:`~Series.to_numpy` can be used instead (:issue:`19617`). dataRST/pandas/v1.0.0.rst - Removed ``DataFrame.ftypes``,``Series.ftypes``,``Series.ftype`` (:issue:`26744`) - Removed ``Index.get_duplicates``,use ``idx[idx.duplicated()].unique()`` instead (:issue:`20239`) - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.ftypes,dtypes(),1,1,['Series.dtype'] ['DataFrame.ftypes'],,dataRST/pandas/v0.25.0.rst - The :meth:`Series.ftype`,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. Instead,use :meth:`Series.dtype` and :meth:`DataFrame.dtypes` (:issue:`26705`). - The :meth:`Series.get_values`,:meth:`DataFrame.get_values`,:meth:`Index.get_values`,:meth:`SparseArray.get_values` and :meth:`Categorical.get_values` methods are deprecated. One of ``np.asarray(..)`` or :meth:`~Series.to_numpy` can be used instead (:issue:`19617`). dataRST/pandas/v1.0.0.rst - Removed ``DataFrame.ftypes``,``Series.ftypes``,``Series.ftype`` (:issue:`26744`) - Removed ``Index.get_duplicates``,use ``idx[idx.duplicated()].unique()`` instead (:issue:`20239`) - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.ftypes,dtypes(),1,0,['Series.dtype'],,dataRST/pandas/v0.25.0.rst - The :meth:`Series.ftype`,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. Instead,use :meth:`Series.dtype` and :meth:`DataFrame.dtypes` (:issue:`26705`). - The :meth:`Series.get_values`,:meth:`DataFrame.get_values`,:meth:`Index.get_values`,:meth:`SparseArray.get_values` and :meth:`Categorical.get_values` methods are deprecated. One of ``np.asarray(..)`` or :meth:`~Series.to_numpy` can be used instead (:issue:`19617`). dataRST/pandas/v1.0.0.rst - Removed ``DataFrame.ftypes``,``Series.ftypes``,``Series.ftype`` (:issue:`26744`) - Removed ``Index.get_duplicates``,use ``idx[idx.duplicated()].unique()`` instead (:issue:`20239`) - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Index.contains,key in index,1,1,['x in cat'] ['key in index'] ['key in index'],dataRST/pandas/v0.24.0.rst (i.e. ``x in cat``-style checks are much faster). :meth:`CategoricalIndex.contains` is likewise much faster (:issue:`21369`,:issue:`21508`) - Improved performance of :meth:`HDFStore.groups` (and dependent functions like :meth:`HDFStore.keys`. (i.e. ``x in store`` checks are much faster) (:issue:`21372`) dataRST/pandas/v0.25.0.rst - :meth:`Index.contains` is deprecated. Use ``key in index`` (``__contains__``) instead (:issue:`17753`). - :meth:`DataFrame.get_dtype_counts` is deprecated. (:issue:`18262`) - :meth:`Categorical.ravel` will return a :class:`Categorical` instead of a ``np.ndarray`` (:issue:`27199`) .. _whatsnew_0250.prior_deprecations: Removal of prior version deprecations/changes dataRST/pandas/v1.0.0.rst - Removed ``Index.contains``,use ``key in index`` instead (:issue:`30103`) - Addition and subtraction of ``int`` or integer-arrays is no longer allowed in :class:`Timestamp`,:class:`DatetimeIndex`,:class:`TimedeltaIndex`,use ``obj + n * obj.freq`` instead of ``obj + n`` (:issue:`22535`) - Removed ``Series.ptp`` (:issue:`21614`) - Removed ``Series.from_array`` (:issue:`18258`) - Removed ``DataFrame.from_items`` (:issue:`18458`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.get_dtype_counts,pandas.DataFrame.dtypes.value_counts,0,0,['Series.idxmin'],"dataRST/pandas/v0.25.0.rst - :meth:`DataFrame.get_dtype_counts` is deprecated. (:issue:`18262`) - :meth:`Categorical.ravel` will return a :class:`Categorical` instead of a ``np.ndarray`` (:issue:`27199`) .. _whatsnew_0250.prior_deprecations: Removal of prior version deprecations/changes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ dataRST/pandas/v1.0.0.rst - Removed ``Series.get_dtype_counts`` and ``DataFrame.get_dtype_counts`` (:issue:`27145`) - Changed the default ""fill_value"" argument in :meth:`Categorical.take` from ``True`` to ``False`` (:issue:`20841`) - Changed the default value for the ``raw`` argument in :func:`Series.rolling().apply() <pandas.core.window.Rolling.apply>`",:func:`DataFrame.rolling().apply() <pandas.core.window.Rolling.apply>`,:func:`Series.expanding().apply() <pandas.core.window.Expanding.apply>`,and :func:`DataFrame.expanding().apply() <pandas.core.window.Expanding.apply>` from ``None`` to ``False`` (:issue:`20584`) - Removed deprecated behavior of :meth:`Series.argmin` and :meth:`Series.argmax`,use :meth:`Series.idxmin` and :meth:`Series.idxmax` for the old behavior (:issue:`16955`) - Passing a tz-aware ``datetime.datetime`` or :class:`Timestamp` into the :class:`Timestamp` constructor with the ``tz`` argument now raises a ``ValueError`` (:issue:`23621`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.MultiIndex.labels,pandas.MultiIndex.codes,1,1,['MultiIndex.codes'] ['23752'],dataRST/pandas/v0.24.0.rst - :attr:`MultiIndex.labels` has been deprecated and replaced by :attr:`MultiIndex.codes`. The functionality is unchanged. The new name better reflects the natures of these codes and makes the ``MultiIndex`` API more similar to the API for :class:`CategoricalIndex` (:issue:`13443`). As a consequence,other uses of the name ``labels`` in ``MultiIndex`` have also been deprecated and replaced with ``codes``: - You should initialize a ``MultiIndex`` instance using a parameter named ``codes`` rather than ``labels``. dataRST/pandas/v1.0.0.rst - Removed ``MultiIndex.labels``,"use :attr:`MultiIndex.codes` instead (:issue:`23752`) - Removed the previously deprecated keyword ""labels"" from the :class:`MultiIndex` constructor","use ""codes"" instead (:issue:`23752`) - Removed ``MultiIndex.set_labels``","use :meth:`MultiIndex.set_codes` instead (:issue:`23752`) - Removed the previously deprecated keyword ""labels"" from :meth:`MultiIndex.set_codes`",:meth:`MultiIndex.copy`,:meth:`MultiIndex.drop`,"use ""codes"" instead (:issue:`23752`) - Removed support for legacy HDF5 formats (:issue:`29787`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.MultiIndex.set_labels,pandas.MultiIndex.set_codes,1,0,['codes'] ['DatetimeTZDtype'],dataRST/pandas/v0.23.0.rst - Bug in :func:`MultiIndex.set_labels` which would cause casting (and potentially clipping) of the new labels if the ``level`` argument is not 0 or a list like [0,1,... ] (:issue:`19057`) - Bug in :func:`MultiIndex.get_level_values` which would return an invalid index on level of ints with missing values (:issue:`17924`) - Bug in :func:`MultiIndex.unique` when called on empty :class:`MultiIndex` (:issue:`20568`) - Bug in :func:`MultiIndex.unique` which would not preserve level names (:issue:`20570`) - Bug in :func:`MultiIndex.remove_unused_levels` which would fill nan values (:issue:`18417`) dataRST/pandas/v0.24.0.rst - ``MultiIndex.set_labels`` has been deprecated in favor of :meth:`MultiIndex.set_codes`. - For method :meth:`MultiIndex.copy`,the ``labels`` parameter has been deprecated and replaced by a ``codes`` parameter. - :meth:`DataFrame.to_stata`,:meth:`read_stata`,:class:`StataReader` and :class:`StataWriter` have deprecated the ``encoding`` argument. The encoding of a Stata dta file is determined by the file type and cannot be changed (:issue:`21244`) - :meth:`MultiIndex.to_hierarchical` is deprecated and will be removed in a future version (:issue:`21613`) - :meth:`Series.ptp` is deprecated. Use ``numpy.ptp`` instead (:issue:`21614`) dataRST/pandas/v1.0.0.rst - Removed ``MultiIndex.set_labels``,"use :meth:`MultiIndex.set_codes` instead (:issue:`23752`) - Removed the previously deprecated keyword ""labels"" from :meth:`MultiIndex.set_codes`",:meth:`MultiIndex.copy`,:meth:`MultiIndex.drop`,"use ""codes"" instead (:issue:`23752`) - Removed support for legacy HDF5 formats (:issue:`29787`) - Passing a dtype alias (e.g. 'datetime64[ns",UTC]') to :class:`DatetimeTZDtype` is no longer allowed,"use :meth:`DatetimeTZDtype.construct_from_string` instead (:issue:`23990`) - Removed the previously deprecated keyword ""skip_footer"" from :func:`read_excel`; use ""skipfooter"" instead (:issue:`18836`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.ptp,numpy.ptp,1,1,['numpy.ptp'],dataRST/pandas/v0.17.1.rst - ``Series.ptp`` will now ignore missing values by default (:issue:`11163`) .. _whatsnew_0171.deprecations: Deprecations ^^^^^^^^^^^^ - The ``pandas.io.ga`` module which implements ``google-analytics`` support is deprecated and will be removed in a future version (:issue:`11308`) dataRST/pandas/v0.24.0.rst - :meth:`Series.ptp` is deprecated. Use ``numpy.ptp`` instead (:issue:`21614`) - :meth:`Series.compress` is deprecated. Use ``Series[condition]`` instead (:issue:`18262`) - The signature of :meth:`Series.to_csv` has been uniformed to that of :meth:`DataFrame.to_csv`: the name of the first argument is now ``path_or_buf``,the order of subsequent arguments has changed,the ``header`` argument now defaults to ``True``. (:issue:`19715`) - :meth:`Categorical.from_codes` has deprecated providing float values for the ``codes`` argument. (:issue:`21767`) - :func:`pandas.read_table` is deprecated. Instead,use :func:`read_csv` passing ``sep='\t'`` if necessary. This deprecation has been removed in 0.25.0. (:issue:`21948`) dataRST/pandas/v1.0.0.rst - Removed ``Series.ptp`` (:issue:`21614`) - Removed ``Series.from_array`` (:issue:`18258`) - Removed ``DataFrame.from_items`` (:issue:`18458`) - Removed ``DataFrame.as_matrix``,``Series.as_matrix`` (:issue:`18458`) - Removed ``Series.asobject`` (:issue:`18477`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.compress,pandas.Series[condition],1,1,['Series[condition]'] ['19269'],dataRST/pandas/v0.24.0.rst - :meth:`Series.compress` is deprecated. Use ``Series[condition]`` instead (:issue:`18262`) - The signature of :meth:`Series.to_csv` has been uniformed to that of :meth:`DataFrame.to_csv`: the name of the first argument is now ``path_or_buf``,the order of subsequent arguments has changed,the ``header`` argument now defaults to ``True``. (:issue:`19715`) - :meth:`Categorical.from_codes` has deprecated providing float values for the ``codes`` argument. (:issue:`21767`) - :func:`pandas.read_table` is deprecated. Instead,"use :func:`read_csv` passing ``sep='\t'`` if necessary. This deprecation has been removed in 0.25.0. (:issue:`21948`) - :meth:`Series.str.cat` has deprecated using arbitrary list-likes *within* list-likes. A list-like container may still contain dataRST/pandas/v1.0.0.rst - Removed ``Series.compress`` (:issue:`21930`) - Removed the previously deprecated keyword ""fill_value"" from :meth:`Categorical.fillna`","use ""value"" instead (:issue:`19269`) - Removed the previously deprecated keyword ""data"" from :func:`andrews_curves`","use ""frame"" instead (:issue:`6956`) - Removed the previously deprecated keyword ""data"" from :func:`parallel_coordinates`","use ""frame"" instead (:issue:`6956`) - Removed the previously deprecated keyword ""colors"" from :func:`parallel_coordinates`","use ""color"" instead (:issue:`6956`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.api.types.is_period,pandas.api.types.is_period_dtype,1,0,['DatetimeTZDtype.construct_from_string'],dataRST/pandas/v0.24.0.rst - :func:`pandas.api.types.is_period` is deprecated in favor of ``pandas.api.types.is_period_dtype`` (:issue:`23917`) - :func:`pandas.api.types.is_datetimetz` is deprecated in favor of ``pandas.api.types.is_datetime64tz`` (:issue:`23917`) - Creating a :class:`TimedeltaIndex`,:class:`DatetimeIndex`,or :class:`PeriodIndex` by passing range arguments ``start``,``end``,and ``periods`` is deprecated in favor of :func:`timedelta_range`,:func:`date_range`,or :func:`period_range` (:issue:`23919`) - Passing a string alias like ``'datetime64[ns,UTC]'`` as the ``unit`` parameter to :class:`DatetimeTZDtype` is deprecated. Use :class:`DatetimeTZDtype.construct_from_string` instead (:issue:`23990`). - The ``skipna`` parameter of :meth:`~pandas.api.types.infer_dtype` will switch to ``True`` by default in a future version of pandas (:issue:`17066`,:issue:`24050`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.api.types.is_datetimetz,pandas.api.types.is_datetime64tz,1,0,['DatetimeTZDtype.construct_from_string'],dataRST/pandas/v0.24.0.rst - :func:`pandas.api.types.is_datetimetz` is deprecated in favor of ``pandas.api.types.is_datetime64tz`` (:issue:`23917`) - Creating a :class:`TimedeltaIndex`,:class:`DatetimeIndex`,or :class:`PeriodIndex` by passing range arguments ``start``,``end``,and ``periods`` is deprecated in favor of :func:`timedelta_range`,:func:`date_range`,or :func:`period_range` (:issue:`23919`) - Passing a string alias like ``'datetime64[ns,UTC]'`` as the ``unit`` parameter to :class:`DatetimeTZDtype` is deprecated. Use :class:`DatetimeTZDtype.construct_from_string` instead (:issue:`23990`). - The ``skipna`` parameter of :meth:`~pandas.api.types.infer_dtype` will switch to ``True`` by default in a future version of pandas (:issue:`17066`,:issue:`24050`) - In :meth:`Series.where` with Categorical data,providing an ``other`` that is not present in the categories is deprecated. Convert the categorical to a different dtype or add the ``other`` to the categories first (:issue:`24077`).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.nonzero,to_numpy().nonzero(),1,0,['obj.fillna(pd.Timedelta(...))'] ['23767'],dataRST/pandas/v0.24.0.rst - :meth:`Series.nonzero` is deprecated and will be removed in a future version (:issue:`18262`) - Passing an integer to :meth:`Series.fillna` and :meth:`DataFrame.fillna` with ``timedelta64[ns]`` dtypes is deprecated,will raise ``TypeError`` in a future version. Use ``obj.fillna(pd.Timedelta(...))`` instead (:issue:`24694`) - ``Series.cat.categorical``,``Series.cat.name`` and ``Series.cat.index`` have been deprecated. Use the attributes on ``Series.cat`` or ``Series`` directly. (:issue:`24751`). - Passing a dtype without a precision like ``np.dtype('datetime64')`` or ``timedelta64`` to :class:`Index`,:class:`DatetimeIndex` and :class:`TimedeltaIndex` is now deprecated. Use the nanosecond-precision dtype instead (:issue:`24753`). .. _whatsnew_0240.deprecations.datetimelike_int_ops: dataRST/pandas/v1.0.0.rst - Removed ``Series.nonzero``,use ``to_numpy().nonzero()`` instead (:issue:`24048`) - Passing floating dtype ``codes`` to :meth:`Categorical.from_codes` is no longer supported,"pass ``codes.astype(np.int64)`` instead (:issue:`21775`) - Removed the previously deprecated keyword ""pat"" from :meth:`Series.str.partition` and :meth:`Series.str.rpartition`","use ""sep"" instead (:issue:`23767`) - Removed ``Series.put`` (:issue:`27106`) - Removed ``Series.real``",``Series.imag`` (:issue:`27106`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.clip_lower,pandas.Series.clip,1,1,['Series.clip(lower=threshold)'] ['astype(object)'],dataRST/pandas/v0.24.0.rst - :meth:`Series.clip_lower`,:meth:`Series.clip_upper`,:meth:`DataFrame.clip_lower` and :meth:`DataFrame.clip_upper` are deprecated and will be removed in a future version. Use ``Series.clip(lower=threshold)``,``Series.clip(upper=threshold)`` and the equivalent ``DataFrame`` methods (:issue:`24203`) - :meth:`Series.nonzero` is deprecated and will be removed in a future version (:issue:`18262`) - Passing an integer to :meth:`Series.fillna` and :meth:`DataFrame.fillna` with ``timedelta64[ns]`` dtypes is deprecated,will raise ``TypeError`` in a future version. Use ``obj.fillna(pd.Timedelta(...))`` instead (:issue:`24694`) - ``Series.cat.categorical``,``Series.cat.name`` and ``Series.cat.index`` have been deprecated. Use the attributes on ``Series.cat`` or ``Series`` directly. (:issue:`24751`). - Passing a dtype without a precision like ``np.dtype('datetime64')`` or ``timedelta64`` to :class:`Index`,:class:`DatetimeIndex` and :class:`TimedeltaIndex` is now deprecated. Use the nanosecond-precision dtype instead (:issue:`24753`). dataRST/pandas/v1.0.0.rst - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`) - Removed ``DatetimeIndex.asobject``,``TimedeltaIndex.asobject``,``PeriodIndex.asobject``,"use ``astype(object)`` instead (:issue:`29801`) - Removed the previously deprecated keyword ""order"" from :func:`factorize` (:issue:`19751`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.clip_upper,pandas.Series.clip,1,1,['Series.clip(lower=threshold)'] ['astype(object)'],dataRST/pandas/v0.24.0.rst - :meth:`Series.clip_lower`,:meth:`Series.clip_upper`,:meth:`DataFrame.clip_lower` and :meth:`DataFrame.clip_upper` are deprecated and will be removed in a future version. Use ``Series.clip(lower=threshold)``,``Series.clip(upper=threshold)`` and the equivalent ``DataFrame`` methods (:issue:`24203`) - :meth:`Series.nonzero` is deprecated and will be removed in a future version (:issue:`18262`) - Passing an integer to :meth:`Series.fillna` and :meth:`DataFrame.fillna` with ``timedelta64[ns]`` dtypes is deprecated,will raise ``TypeError`` in a future version. Use ``obj.fillna(pd.Timedelta(...))`` instead (:issue:`24694`) - ``Series.cat.categorical``,``Series.cat.name`` and ``Series.cat.index`` have been deprecated. Use the attributes on ``Series.cat`` or ``Series`` directly. (:issue:`24751`). - Passing a dtype without a precision like ``np.dtype('datetime64')`` or ``timedelta64`` to :class:`Index`,:class:`DatetimeIndex` and :class:`TimedeltaIndex` is now deprecated. Use the nanosecond-precision dtype instead (:issue:`24753`). dataRST/pandas/v1.0.0.rst - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`) - Removed ``DatetimeIndex.asobject``,``TimedeltaIndex.asobject``,``PeriodIndex.asobject``,"use ``astype(object)`` instead (:issue:`29801`) - Removed the previously deprecated keyword ""order"" from :func:`factorize` (:issue:`19751`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.clip_lower,pandas.DataFrame.clip,1,0,['Series.clip(lower=threshold)'] ['astype(object)'],dataRST/pandas/v0.24.0.rst - :meth:`Series.clip_lower`,:meth:`Series.clip_upper`,:meth:`DataFrame.clip_lower` and :meth:`DataFrame.clip_upper` are deprecated and will be removed in a future version. Use ``Series.clip(lower=threshold)``,``Series.clip(upper=threshold)`` and the equivalent ``DataFrame`` methods (:issue:`24203`) - :meth:`Series.nonzero` is deprecated and will be removed in a future version (:issue:`18262`) - Passing an integer to :meth:`Series.fillna` and :meth:`DataFrame.fillna` with ``timedelta64[ns]`` dtypes is deprecated,will raise ``TypeError`` in a future version. Use ``obj.fillna(pd.Timedelta(...))`` instead (:issue:`24694`) - ``Series.cat.categorical``,``Series.cat.name`` and ``Series.cat.index`` have been deprecated. Use the attributes on ``Series.cat`` or ``Series`` directly. (:issue:`24751`). - Passing a dtype without a precision like ``np.dtype('datetime64')`` or ``timedelta64`` to :class:`Index`,:class:`DatetimeIndex` and :class:`TimedeltaIndex` is now deprecated. Use the nanosecond-precision dtype instead (:issue:`24753`). dataRST/pandas/v1.0.0.rst - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`) - Removed ``DatetimeIndex.asobject``,``TimedeltaIndex.asobject``,``PeriodIndex.asobject``,"use ``astype(object)`` instead (:issue:`29801`) - Removed the previously deprecated keyword ""order"" from :func:`factorize` (:issue:`19751`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.clip_upper,pandas.DataFrame.clip,1,0,['Series.clip(lower=threshold)'] ['astype(object)'],dataRST/pandas/v0.24.0.rst - :meth:`Series.clip_lower`,:meth:`Series.clip_upper`,:meth:`DataFrame.clip_lower` and :meth:`DataFrame.clip_upper` are deprecated and will be removed in a future version. Use ``Series.clip(lower=threshold)``,``Series.clip(upper=threshold)`` and the equivalent ``DataFrame`` methods (:issue:`24203`) - :meth:`Series.nonzero` is deprecated and will be removed in a future version (:issue:`18262`) - Passing an integer to :meth:`Series.fillna` and :meth:`DataFrame.fillna` with ``timedelta64[ns]`` dtypes is deprecated,will raise ``TypeError`` in a future version. Use ``obj.fillna(pd.Timedelta(...))`` instead (:issue:`24694`) - ``Series.cat.categorical``,``Series.cat.name`` and ``Series.cat.index`` have been deprecated. Use the attributes on ``Series.cat`` or ``Series`` directly. (:issue:`24751`). - Passing a dtype without a precision like ``np.dtype('datetime64')`` or ``timedelta64`` to :class:`Index`,:class:`DatetimeIndex` and :class:`TimedeltaIndex` is now deprecated. Use the nanosecond-precision dtype instead (:issue:`24753`). dataRST/pandas/v1.0.0.rst - Removed ``Series.clip_upper``,``Series.clip_lower``,``DataFrame.clip_upper``,``DataFrame.clip_lower`` (:issue:`24203`) - Removed the ability to alter :attr:`DatetimeIndex.freq`,:attr:`TimedeltaIndex.freq`,or :attr:`PeriodIndex.freq` (:issue:`20772`) - Removed ``DatetimeIndex.offset`` (:issue:`20730`) - Removed ``DatetimeIndex.asobject``,``TimedeltaIndex.asobject``,``PeriodIndex.asobject``,"use ``astype(object)`` instead (:issue:`29801`) - Removed the previously deprecated keyword ""order"" from :func:`factorize` (:issue:`19751`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.from_array,pandas.Series,1,1,['Series(..)'],dataRST/pandas/v0.23.0.rst - ``Series.from_array`` and ``SparseSeries.from_array`` are deprecated. Use the normal constructor ``Series(..)`` and ``SparseSeries(..)`` instead (:issue:`18213`). - ``DataFrame.as_matrix`` is deprecated. Use ``DataFrame.values`` instead (:issue:`18458`). - ``Series.asobject``,``DatetimeIndex.asobject``,``PeriodIndex.asobject`` and ``TimeDeltaIndex.asobject`` have been deprecated. Use ``.astype(object)`` instead (:issue:`18572`) - Grouping by a tuple of keys now emits a ``FutureWarning`` and is deprecated. In the future,a tuple passed to ``'by'`` will always refer to a single key dataRST/pandas/v1.0.0.rst - Removed ``Series.from_array`` (:issue:`18258`) - Removed ``DataFrame.from_items`` (:issue:`18458`) - Removed ``DataFrame.as_matrix``,``Series.as_matrix`` (:issue:`18458`) - Removed ``Series.asobject`` (:issue:`18477`) - Removed ``DataFrame.as_blocks``,``Series.as_blocks``,``DataFrame.blocks``,``Series.blocks`` (:issue:`17656`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.SparseSeries.from_array,pandas.Series,1,1,['Series(..)'],dataRST/pandas/v0.23.0.rst - ``Series.from_array`` and ``SparseSeries.from_array`` are deprecated. Use the normal constructor ``Series(..)`` and ``SparseSeries(..)`` instead (:issue:`18213`). - ``DataFrame.as_matrix`` is deprecated. Use ``DataFrame.values`` instead (:issue:`18458`). - ``Series.asobject``,``DatetimeIndex.asobject``,``PeriodIndex.asobject`` and ``TimeDeltaIndex.asobject`` have been deprecated. Use ``.astype(object)`` instead (:issue:`18572`) - Grouping by a tuple of keys now emits a ``FutureWarning`` and is deprecated. In the future,a tuple passed to ``'by'`` will always refer to a single key,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.valid,pandas.Series.dropna,1,1,['Series.dropna'] ['Series.dropna'],dataRST/pandas/v0.23.0.rst - ``Series.valid`` is deprecated. Use :meth:`Series.dropna` instead (:issue:`18800`). - :func:`read_excel` has deprecated the ``skip_footer`` parameter. Use ``skipfooter`` instead (:issue:`18836`) - :meth:`ExcelFile.parse` has deprecated ``sheetname`` in favor of ``sheet_name`` for consistency with :func:`read_excel` (:issue:`20920`). - The ``is_copy`` attribute is deprecated and will be removed in a future version (:issue:`18801`). - ``IntervalIndex.from_intervals`` is deprecated in favor of the :class:`IntervalIndex` constructor (:issue:`19263`) dataRST/pandas/v1.0.0.rst - Removed ``Series.valid``; use :meth:`Series.dropna` instead (:issue:`18800`) - Removed ``DataFrame.is_copy``,``Series.is_copy`` (:issue:`18812`) - Removed ``DataFrame.get_ftype_counts``,``Series.get_ftype_counts`` (:issue:`18243`) - Removed ``DataFrame.ftypes``,``Series.ftypes``,``Series.ftype`` (:issue:`26744`) - Removed ``Index.get_duplicates``,use ``idx[idx.duplicated()].unique()`` instead (:issue:`20239`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.from_items,pandas.DataFrame.from_dict,1,1,['DataFrame.from_dict'],dataRST/pandas/v0.23.0.rst - ``DataFrame.from_items`` is deprecated. Use :func:`DataFrame.from_dict` instead,or ``DataFrame.from_dict(OrderedDict())`` if you wish to preserve the key order (:issue:`17320`,:issue:`17312`) - Indexing a :class:`MultiIndex` or a :class:`FloatIndex` with a list containing some missing keys will now show a :class:`FutureWarning`,which is consistent with other types of indexes (:issue:`17758`). - The ``broadcast`` parameter of ``.apply()`` is deprecated in favor of ``result_type='broadcast'`` (:issue:`18577`) - The ``reduce`` parameter of ``.apply()`` is deprecated in favor of ``result_type='reduce'`` (:issue:`18577`) - The ``order`` parameter of :func:`factorize` is deprecated and will be removed in a future release (:issue:`19727`) dataRST/pandas/v0.6.1.rst - Implement ``DataFrame.from_items`` alternate constructor (:issue:`444`) - DataFrame.convert_objects method for :ref:`inferring better dtypes <basics.cast>` for object columns (:issue:`302`) - Add :ref:`rolling_corr_pairwise <window.corr_pairwise>` function for dataRST/pandas/v1.0.0.rst - Removed ``DataFrame.from_items`` (:issue:`18458`) - Removed ``DataFrame.as_matrix``,``Series.as_matrix`` (:issue:`18458`) - Removed ``Series.asobject`` (:issue:`18477`) - Removed ``DataFrame.as_blocks``,``Series.as_blocks``,``DataFrame.blocks``,``Series.blocks`` (:issue:`17656`) - :meth:`pandas.Series.str.cat` now defaults to aligning ``others``,using ``join='left'`` (:issue:`27611`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Timestamp.weekday_name,pandas.Timestamp.day_name,1,0,['Timestamp.weekday_name'] ['Series.plot'],dataRST/pandas/v0.21.0.rst - Bug in :attr:`Timestamp.weekday_name` returning a UTC-based weekday name when localized to a timezone (:issue:`17354`) - Bug in ``Timestamp.replace`` when replacing ``tzinfo`` around DST changes (:issue:`15683`) - Bug in ``Timedelta`` construction and arithmetic that would not propagate the ``Overflow`` exception (:issue:`17367`) - Bug in :meth:`~DataFrame.astype` converting to object dtype when passed extension type classes (``DatetimeTZDtype``,``CategoricalDtype``) rather than instances. Now a ``TypeError`` is raised when a class is passed (:issue:`17780`). - Bug in :meth:`to_numeric` in which elements were not always being coerced to numeric when ``errors='coerce'`` (:issue:`17007`,:issue:`17125`) dataRST/pandas/v0.23.0.rst - :attr:`Timestamp.weekday_name`,:attr:`DatetimeIndex.weekday_name`,and :attr:`Series.dt.weekday_name` are deprecated in favor of :meth:`Timestamp.day_name`,:meth:`DatetimeIndex.day_name`,and :meth:`Series.dt.day_name` (:issue:`12806`) - ``pandas.tseries.plotting.tsplot`` is deprecated. Use :func:`Series.plot` instead (:issue:`18627`) - ``Index.summary()`` is deprecated and will be removed in a future version (:issue:`18217`) - ``NDFrame.get_ftype_counts()`` is deprecated and will be removed in a future version (:issue:`18243`) - The ``convert_datetime64`` parameter in :func:`DataFrame.to_records` has been deprecated and will be removed in a future version. The NumPy bug motivating this parameter has been resolved. The default value for this parameter has also changed from ``True`` to ``None`` (:issue:`18160`). dataRST/pandas/v1.0.0.rst - Removed ``Timestamp.weekday_name``,``DatetimeIndex.weekday_name``,"and ``Series.dt.weekday_name`` (:issue:`18164`) - Removed the previously deprecated keyword ""errors"" in :meth:`Timestamp.tz_localize`",:meth:`DatetimeIndex.tz_localize`,"and :meth:`Series.tz_localize` (:issue:`22644`) - Changed the default ""ordered"" argument in :class:`CategoricalDtype` from ``None`` to ``False`` (:issue:`26336`) - :meth:`Series.set_axis` and :meth:`DataFrame.set_axis` now require ""labels"" as the first argument and ""axis"" as an optional named parameter (:issue:`30089`) - Removed ``to_msgpack``",``read_msgpack``,``DataFrame.to_msgpack``,``Series.to_msgpack`` (:issue:`27103`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DatetimeIndex.weekday_name,pandas.DatetimeIndex.day_name,1,0,['Series.plot'] ['Timestamp.weekday_name'],dataRST/pandas/v0.23.0.rst - :attr:`Timestamp.weekday_name`,:attr:`DatetimeIndex.weekday_name`,and :attr:`Series.dt.weekday_name` are deprecated in favor of :meth:`Timestamp.day_name`,:meth:`DatetimeIndex.day_name`,and :meth:`Series.dt.day_name` (:issue:`12806`) - ``pandas.tseries.plotting.tsplot`` is deprecated. Use :func:`Series.plot` instead (:issue:`18627`) - ``Index.summary()`` is deprecated and will be removed in a future version (:issue:`18217`) - ``NDFrame.get_ftype_counts()`` is deprecated and will be removed in a future version (:issue:`18243`) - The ``convert_datetime64`` parameter in :func:`DataFrame.to_records` has been deprecated and will be removed in a future version. The NumPy bug motivating this parameter has been resolved. The default value for this parameter has also changed from ``True`` to ``None`` (:issue:`18160`). dataRST/pandas/v1.0.0.rst - Removed ``Timestamp.weekday_name``,``DatetimeIndex.weekday_name``,"and ``Series.dt.weekday_name`` (:issue:`18164`) - Removed the previously deprecated keyword ""errors"" in :meth:`Timestamp.tz_localize`",:meth:`DatetimeIndex.tz_localize`,"and :meth:`Series.tz_localize` (:issue:`22644`) - Changed the default ""ordered"" argument in :class:`CategoricalDtype` from ``None`` to ``False`` (:issue:`26336`) - :meth:`Series.set_axis` and :meth:`DataFrame.set_axis` now require ""labels"" as the first argument and ""axis"" as an optional named parameter (:issue:`30089`) - Removed ``to_msgpack``",``read_msgpack``,``DataFrame.to_msgpack``,``Series.to_msgpack`` (:issue:`27103`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.dt.weekday_name,pandas.Series.dt.day_name,1,1,['Series.plot'] ['Timestamp.weekday_name'],dataRST/pandas/v0.23.0.rst - :attr:`Timestamp.weekday_name`,:attr:`DatetimeIndex.weekday_name`,and :attr:`Series.dt.weekday_name` are deprecated in favor of :meth:`Timestamp.day_name`,:meth:`DatetimeIndex.day_name`,and :meth:`Series.dt.day_name` (:issue:`12806`) - ``pandas.tseries.plotting.tsplot`` is deprecated. Use :func:`Series.plot` instead (:issue:`18627`) - ``Index.summary()`` is deprecated and will be removed in a future version (:issue:`18217`) - ``NDFrame.get_ftype_counts()`` is deprecated and will be removed in a future version (:issue:`18243`) - The ``convert_datetime64`` parameter in :func:`DataFrame.to_records` has been deprecated and will be removed in a future version. The NumPy bug motivating this parameter has been resolved. The default value for this parameter has also changed from ``True`` to ``None`` (:issue:`18160`). dataRST/pandas/v1.0.0.rst - Removed ``Timestamp.weekday_name``,``DatetimeIndex.weekday_name``,"and ``Series.dt.weekday_name`` (:issue:`18164`) - Removed the previously deprecated keyword ""errors"" in :meth:`Timestamp.tz_localize`",:meth:`DatetimeIndex.tz_localize`,"and :meth:`Series.tz_localize` (:issue:`22644`) - Changed the default ""ordered"" argument in :class:`CategoricalDtype` from ``None`` to ``False`` (:issue:`26336`) - :meth:`Series.set_axis` and :meth:`DataFrame.set_axis` now require ""labels"" as the first argument and ""axis"" as an optional named parameter (:issue:`30089`) - Removed ``to_msgpack``",``read_msgpack``,``DataFrame.to_msgpack``,``Series.to_msgpack`` (:issue:`27103`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tseries.plotting.tsplot,pandas.Series.plot,1,1,['Series.plot'] ['23053'],dataRST/pandas/v0.23.0.rst - ``pandas.tseries.plotting.tsplot`` is deprecated. Use :func:`Series.plot` instead (:issue:`18627`) - ``Index.summary()`` is deprecated and will be removed in a future version (:issue:`18217`) - ``NDFrame.get_ftype_counts()`` is deprecated and will be removed in a future version (:issue:`18243`) - The ``convert_datetime64`` parameter in :func:`DataFrame.to_records` has been deprecated and will be removed in a future version. The NumPy bug motivating this parameter has been resolved. The default value for this parameter has also changed from ``True`` to ``None`` (:issue:`18160`). - :func:`Series.rolling().apply() <pandas.core.window.Rolling.apply>`,:func:`DataFrame.rolling().apply() <pandas.core.window.Rolling.apply>`,"dataRST/pandas/v1.0.0.rst - Removed ``pandas.tseries.plotting.tsplot`` (:issue:`18627`) - Removed the previously deprecated keywords ""reduce"" and ""broadcast"" from :meth:`DataFrame.apply` (:issue:`18577`) - Removed the previously deprecated ``assert_raises_regex`` function in ``pandas._testing`` (:issue:`29174`) - Removed the previously deprecated ``FrozenNDArray`` class in ``pandas.core.indexes.frozen`` (:issue:`29335`) - Removed the previously deprecated keyword ""nthreads"" from :func:`read_feather`","use ""use_threads"" instead (:issue:`23053`)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tseries.register,pandas.plotting.register_matplotlib_converters,1,1,['pandas.plotting.register_matplotlib_converters'],dataRST/pandas/v0.21.1.rst - ``pandas.tseries.register`` has been renamed to :func:`pandas.plotting.register_matplotlib_converters` (:issue:`18301`) .. _whatsnew_0211.performance: Performance improvements ~~~~~~~~~~~~~~~~~~~~~~~~,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.from_csv,pandas.read_csv,1,0,['sheetname'],dataRST/pandas/v0.21.0.rst - :meth:`DataFrame.from_csv` and :meth:`Series.from_csv` have been deprecated in favor of :func:`read_csv()` (:issue:`4191`) - :func:`read_excel()` has deprecated ``sheetname`` in favor of ``sheet_name`` for consistency with ``.to_excel()`` (:issue:`10559`). - :func:`read_excel()` has deprecated ``parse_cols`` in favor of ``usecols`` for consistency with :func:`read_csv` (:issue:`4988`) - :func:`read_csv()` has deprecated the ``tupleize_cols`` argument. Column tuples will always be converted to a ``MultiIndex`` (:issue:`17060`) - :meth:`DataFrame.to_csv` has deprecated the ``tupleize_cols`` argument. MultiIndex columns will be always written as rows in the CSV file (:issue:`17060`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.from_csv,pandas.read_csv,1,0,['sheetname'] ['DataFrame.from.csv'],dataRST/pandas/v0.17.0.rst - Bug in ``Series.from_csv`` with ``header`` kwarg not setting the ``Series.name`` or the ``Series.index.name`` (:issue:`10483`) - Bug in ``groupby.var`` which caused variance to be inaccurate for small float values (:issue:`10448`) - Bug in ``Series.plot(kind='hist')`` Y Label not informative (:issue:`10485`) - Bug in ``read_csv`` when using a converter which generates a ``uint8`` type (:issue:`9266`) - Bug causes memory leak in time-series line and area plot (:issue:`9003`) dataRST/pandas/v0.21.0.rst - :meth:`DataFrame.from_csv` and :meth:`Series.from_csv` have been deprecated in favor of :func:`read_csv()` (:issue:`4191`) - :func:`read_excel()` has deprecated ``sheetname`` in favor of ``sheet_name`` for consistency with ``.to_excel()`` (:issue:`10559`). - :func:`read_excel()` has deprecated ``parse_cols`` in favor of ``usecols`` for consistency with :func:`read_csv` (:issue:`4988`) - :func:`read_csv()` has deprecated the ``tupleize_cols`` argument. Column tuples will always be converted to a ``MultiIndex`` (:issue:`17060`) - :meth:`DataFrame.to_csv` has deprecated the ``tupleize_cols`` argument. MultiIndex columns will be always written as rows in the CSV file (:issue:`17060`) dataRST/pandas/v0.25.0.rst - Removed the previously deprecated ``DataFrame.from.csv`` and ``Series.from_csv`` (:issue:`17812`) - Removed the previously deprecated ``raise_on_error`` keyword argument in :meth:`DataFrame.where` and :meth:`DataFrame.mask` (:issue:`17744`) - Removed the previously deprecated ``ordered`` and ``categories`` keyword arguments in ``astype`` (:issue:`17742`) - Removed the previously deprecated ``cdate_range`` (:issue:`17691`) - Removed the previously deprecated ``True`` option for the ``dropna`` keyword argument in :func:`SeriesGroupBy.nth` (:issue:`17493`) dataRST/pandas/v0.6.1.rst - Add ``Series.from_csv`` function (:issue:`482`) - :ref:`Can pass <window.cov_corr>` DataFrame/DataFrame and DataFrame/Series to rolling_corr/rolling_cov (GH #462) - MultiIndex.get_level_values can :ref:`accept the level name <advanced.get_level_values>` Performance improvements,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.options.html.borde,pd.options.display.html.border,1,1,['pd.options.display.html.border'],dataRST/pandas/v0.21.0.rst - ``pd.options.html.border`` has been deprecated in favor of ``pd.options.display.html.border`` (:issue:`15793`). - :func:`SeriesGroupBy.nth` has deprecated ``True`` in favor of ``'all'`` for its kwarg ``dropna`` (:issue:`11038`). - :func:`DataFrame.as_blocks` is deprecated,as this is exposing the internal implementation (:issue:`17302`) - ``pd.TimeGrouper`` is deprecated in favor of :class:`pandas.Grouper` (:issue:`16747`) - ``cdate_range`` has been deprecated in favor of :func:`bdate_range`,which has gained ``weekmask`` and ``holidays`` parameters for building custom frequency date ranges. See the :ref:`documentation <timeseries.custom-freq-ranges>` for more details (:issue:`17596`) dataRST/pandas/v0.25.0.rst - Removed the previously deprecated ``pd.options.html.border`` (:issue:`16970`) - Removed the previously deprecated ``convert_objects`` (:issue:`11221`) - Removed the previously deprecated ``select`` method of ``DataFrame`` and ``Series`` (:issue:`17633`) - Removed the previously deprecated behavior of :class:`Series` treated as list-like in :meth:`~Series.cat.rename_categories` (:issue:`17982`) - Removed the previously deprecated ``DataFrame.reindex_axis`` and ``Series.reindex_axis`` (:issue:`17842`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.TimeGrouper,pandas.Grouper,1,1,['groupBy.get_group'] ['GroupBy.size'] ['GroupBy.size'] ['apply'] ['pandas.Grouper'] ['Grouper'],"dataRST/pandas/v0.14.0.rst - Bug in TimeGrouper/resample when presented with a non-monotonic DatetimeIndex that would return invalid results. (:issue:`4161`) - Bug in index name propagation in TimeGrouper/resample (:issue:`4161`) - TimeGrouper has a more compatible API to the rest of the groupers (e.g. ``groups`` was missing) (:issue:`3881`) - Bug in multiple grouping with a TimeGrouper depending on target column order (:issue:`6764`) - Bug in ``pd.eval`` when parsing strings with possible tokens like ``'&'`` - Bug in index name propagation in TimeGrouper/resample (:issue:`4161`) - TimeGrouper has a more compatible API to the rest of the groupers (e.g. ``groups`` was missing) (:issue:`3881`) - Bug in multiple grouping with a TimeGrouper depending on target column order (:issue:`6764`) - Bug in ``pd.eval`` when parsing strings with possible tokens like ``'&'`` (:issue:`6351`) - TimeGrouper has a more compatible API to the rest of the groupers (e.g. ``groups`` was missing) (:issue:`3881`) - Bug in multiple grouping with a TimeGrouper depending on target column order (:issue:`6764`) - Bug in ``pd.eval`` when parsing strings with possible tokens like ``'&'`` (:issue:`6351`) - Bug correctly handle placements of ``-inf`` in Panels when dividing by integer 0 (:issue:`6178`) - Bug in multiple grouping with a TimeGrouper depending on target column order (:issue:`6764`) - Bug in ``pd.eval`` when parsing strings with possible tokens like ``'&'`` (:issue:`6351`) - Bug correctly handle placements of ``-inf`` in Panels when dividing by integer 0 (:issue:`6178`) - ``DataFrame.shift`` with ``axis=1`` was raising (:issue:`6371`) - Bug in ``groupBy.get_group`` created by ``TimeGrouper`` raises ``AttributeError`` (:issue:`6914`) - Bug in ``DatetimeIndex.tz_localize`` and ``DatetimeIndex.tz_convert`` converting ``NaT`` incorrectly (:issue:`5546`) - Bug in arithmetic operations affecting ``NaT`` (:issue:`6873`) - Bug in ``Series.str.extract`` where the resulting ``Series`` from a single group match wasn't renamed to the group name dataRST/pandas/v0.14.1.rst - Bug in ``TimeGrouper`` doesn't exclude column specified by ``key`` (:issue:`7227`) - Bug in ``DataFrame`` and ``Series`` bar and barh plot raises ``TypeError`` when ``bottom`` and ``left`` keyword is specified (:issue:`7226`) - Bug in ``DataFrame.hist`` raises ``TypeError`` when it contains non numeric column (:issue:`7277`) - Bug in ``Index.delete`` does not preserve ``name`` and ``freq`` attributes (:issue:`7302`) - Bug in ``GroupBy.size`` created by ``TimeGrouper`` raises ``AttributeError`` (:issue:`7453`) - Bug in single column bar plot is misaligned (:issue:`7498`). - Bug in area plot with tz-aware time series raises ``ValueError`` (:issue:`7471`) - Bug in non-monotonic ``Index.union`` may preserve ``name`` incorrectly (:issue:`7458`) - Bug in ``DatetimeIndex.intersection`` doesn't preserve timezone (:issue:`4690`) dataRST/pandas/v0.16.1.rst - Bug ``GroupBy.size`` doesn't attach index name properly if grouped by ``TimeGrouper`` (:issue:`9925`) - Bug causing an exception in slice assignments because ``length_of_indexer`` returns wrong results (:issue:`9995`) - Bug in csv parser causing lines with initial white space plus one non-space character to be skipped. (:issue:`9710`) - Bug in C csv parser causing spurious NaNs when data started with newline followed by white space. (:issue:`10022`) - Bug causing elements with a null group to spill into the final group when grouping by a ``Categorical`` (:issue:`9603`) dataRST/pandas/v0.18.1.rst Using ``apply`` on resampling groupby operations (using a ``pd.TimeGrouper``) now has the same output types as similar ``apply`` calls on other groupby operations. (:issue:`11742`). .. ipython:: python df = pd.DataFrame( {""date"": pd.to_datetime([""10/10/2000""","""11/10/2000""])","""value"": [10",13]} ) In [1]: df.groupby(pd.TimeGrouper(key='date',...: freq='M')).apply(lambda x: x.value.sum()) Out[1]: ... TypeError: cannot concatenate a non-NDFrame object In [2]: df.groupby(pd.TimeGrouper(key='date',...: freq='M')).apply(lambda x: x[['value']].sum()) Out[2]: date 2000-10-31 value 10 In [55]: df.groupby(pd.TimeGrouper(key='date',...: freq='M')).apply(lambda x: x.value.sum()) Out[55]: date 2000-10-31 10 In [56]: df.groupby(pd.TimeGrouper(key='date',...: freq='M')).apply(lambda x: x[['value']].sum()) Out[56]: value date - Bug in ``GroupBy.first()``,``.last()`` returns incorrect row when ``TimeGrouper`` is used (:issue:`7453`) - Bug in ``pd.read_csv()`` with the ``c`` engine when specifying ``skiprows`` with newlines in quoted items (:issue:`10911`,:issue:`12775`) - Bug in ``DataFrame`` timezone lost when assigning tz-aware datetime ``Series`` with alignment (:issue:`12981`) - Bug in ``.value_counts()`` when ``normalize=True`` and ``dropna=True`` where nulls still contributed to the normalized count (:issue:`12558`) - Bug in ``Series.value_counts()`` loses name if its dtype is ``category`` (:issue:`12835`) dataRST/pandas/v0.21.0.rst - ``pd.TimeGrouper`` is deprecated in favor of :class:`pandas.Grouper` (:issue:`16747`) - ``cdate_range`` has been deprecated in favor of :func:`bdate_range`,which has gained ``weekmask`` and ``holidays`` parameters for building custom frequency date ranges. See the :ref:`documentation <timeseries.custom-freq-ranges>` for more details (:issue:`17596`) - passing ``categories`` or ``ordered`` kwargs to :func:`Series.astype` is deprecated,in favor of passing a :ref:`CategoricalDtype <whatsnew_0210.enhancements.categorical_dtype>` (:issue:`17636`) - ``.get_value`` and ``.set_value`` on ``Series``,``DataFrame``,``Panel``,``SparseSeries``,and ``SparseDataFrame`` are deprecated in favor of using ``.iat[]`` or ``.at[]`` accessors (:issue:`15269`) - Passing a non-existent column in ``.to_excel(...,columns=)`` is deprecated and will raise a ``KeyError`` in the future (:issue:`17295`) - Bug in ``groupby.nunique()`` with ``TimeGrouper`` which cannot handle ``NaT`` correctly (:issue:`17575`) - Bug in ``DataFrame.groupby`` where a single level selection from a ``MultiIndex`` unexpectedly sorts (:issue:`17537`) - Bug in ``DataFrame.groupby`` where spurious warning is raised when ``Grouper`` object is used to override ambiguous column name (:issue:`17383`) - Bug in ``TimeGrouper`` differs when passes as a list and as a scalar (:issue:`17530`) Sparse - Bug in ``TimeGrouper`` differs when passes as a list and as a scalar (:issue:`17530`) Sparse ^^^^^^ - Bug in ``SparseSeries`` raises ``AttributeError`` when a dictionary is passed in as data (:issue:`16905`) - Bug in :func:`SparseDataFrame.fillna` not filling all NaNs when frame was instantiated from SciPy sparse matrix (:issue:`16112`) dataRST/pandas/v0.21.1.rst - :class:`Grouper` and :class:`TimeGrouper` now have a friendly repr output (:issue:`18203`). .. _whatsnew_0211.deprecations: Deprecations ~~~~~~~~~~~~ - ``pandas.tseries.register`` has been renamed to dataRST/pandas/v0.25.0.rst - Removed the previously deprecated ``TimeGrouper`` (:issue:`16942`) - Removed the previously deprecated ``parse_cols`` keyword in :func:`read_excel` (:issue:`16488`) - Removed the previously deprecated ``pd.options.html.border`` (:issue:`16970`) - Removed the previously deprecated ``convert_objects`` (:issue:`11221`) - Removed the previously deprecated ``select`` method of ``DataFrame`` and ``Series`` (:issue:`17633`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.cdate_range,pandas.bdate_range,1,1,['bdate_range'],dataRST/pandas/v0.21.0.rst - ``cdate_range`` has been deprecated in favor of :func:`bdate_range`,which has gained ``weekmask`` and ``holidays`` parameters for building custom frequency date ranges. See the :ref:`documentation <timeseries.custom-freq-ranges>` for more details (:issue:`17596`) - passing ``categories`` or ``ordered`` kwargs to :func:`Series.astype` is deprecated,in favor of passing a :ref:`CategoricalDtype <whatsnew_0210.enhancements.categorical_dtype>` (:issue:`17636`) - ``.get_value`` and ``.set_value`` on ``Series``,``DataFrame``,``Panel``,``SparseSeries``,and ``SparseDataFrame`` are deprecated in favor of using ``.iat[]`` or ``.at[]`` accessors (:issue:`15269`) - Passing a non-existent column in ``.to_excel(...,columns=)`` is deprecated and will raise a ``KeyError`` in the future (:issue:`17295`) - ``raise_on_error`` parameter to :func:`Series.where`,:func:`Series.mask`,:func:`DataFrame.where`,:func:`DataFrame.mask` is deprecated,in favor of ``errors=`` (:issue:`14968`) dataRST/pandas/v0.25.0.rst - Removed the previously deprecated ``cdate_range`` (:issue:`17691`) - Removed the previously deprecated ``True`` option for the ``dropna`` keyword argument in :func:`SeriesGroupBy.nth` (:issue:`17493`) - Removed the previously deprecated ``convert`` keyword argument in :meth:`Series.take` and :meth:`DataFrame.take` (:issue:`17352`) - Removed the previously deprecated behavior of arithmetic operations with ``datetime.date`` objects (:issue:`21152`) .. _whatsnew_0250.performance:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.rename_axis,pandas.DataFrame.rename,1,1,['Series.rename'] ['Series.rename_axis'] ['.rename'] ['Series.rename_axis'] ['Series.rename_axis'],dataRST/pandas/v0.18.1.rst - Bug in ``Series.rename``,``DataFrame.rename`` and ``DataFrame.rename_axis`` not treating ``Series`` as mappings to relabel (:issue:`12623`). - Clean in ``.rolling.min`` and ``.rolling.max`` to enhance dtype handling (:issue:`12373`) - Bug in ``groupby`` where complex types are coerced to float (:issue:`12902`) - Bug in ``Series.map`` raises ``TypeError`` if its dtype is ``category`` or tz-aware ``datetime`` (:issue:`12473`) - Bugs on 32bit platforms for some test comparisons (:issue:`12972`) dataRST/pandas/v0.21.0.rst - :func:`Series.rename_axis` and :func:`DataFrame.rename_axis` with ``inplace=True`` now return ``None`` while renaming the axis inplace. (:issue:`15704`) - :func:`api.types.infer_dtype` now infers decimals. (:issue:`15690`) - :func:`DataFrame.select_dtypes` now accepts scalar values for include/exclude as well as list-like. (:issue:`16855`) - :func:`date_range` now accepts 'YS' in addition to 'AS' as an alias for start of year. (:issue:`9313`) - :func:`date_range` now accepts 'Y' in addition to 'A' as an alias for end of year. (:issue:`9313`) - Using :meth:`DataFrame.rename_axis` and :meth:`Series.rename_axis` to alter index or column *labels* is now deprecated in favor of using ``.rename``. ``rename_axis`` may still be used to alter the name of the index or columns (:issue:`17833`). - :meth:`~DataFrame.reindex_axis` has been deprecated in favor of :meth:`~DataFrame.reindex`. See :ref:`here <whatsnew_0210.enhancements.rename_reindex_axis>` for more (:issue:`17833`). .. _whatsnew_0210.deprecations.select: Series.select and DataFrame.select ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dataRST/pandas/v0.24.0.rst :func:`DataFrame.rename_axis` now supports ``index`` and ``columns`` arguments and :func:`Series.rename_axis` supports ``index`` argument (:issue:`19978`). This change allows a dictionary to be passed so that some of the names of a ``MultiIndex`` can be changed. Example: dataRST/pandas/v0.24.1.rst - Fixed regression in :meth:`Series.rename_axis` and :meth:`DataFrame.rename_axis` where passing ``None`` failed to remove the axis name (:issue:`25034`) - Fixed regression in :func:`to_timedelta` with ``box=False`` incorrectly returning a ``datetime64`` object instead of a ``timedelta64`` object (:issue:`24961`) - Fixed regression where custom hashable types could not be used as column keys in :meth:`DataFrame.set_index` (:issue:`24969`) .. _whatsnew_0241.bug_fixes: Bug fixes dataRST/pandas/v0.25.0.rst - Removed the previously deprecated behavior of altering column or index labels with :meth:`Series.rename_axis` or :meth:`DataFrame.rename_axis` (:issue:`17842`) - Removed the previously deprecated ``tupleize_cols`` keyword argument in :meth:`read_html`,:meth:`read_csv`,and :meth:`DataFrame.to_csv` (:issue:`17877`,:issue:`17820`) - Removed the previously deprecated ``DataFrame.from.csv`` and ``Series.from_csv`` (:issue:`17812`) - Removed the previously deprecated ``raise_on_error`` keyword argument in :meth:`DataFrame.where` and :meth:`DataFrame.mask` (:issue:`17744`) - Removed the previously deprecated ``ordered`` and ``categories`` keyword arguments in ``astype`` (:issue:`17742`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.rename_axis,pandas.DataFrame.rename,1,1,['.rename'],dataRST/pandas/v0.21.0.rst - :func:`Series.rename_axis` and :func:`DataFrame.rename_axis` with ``inplace=True`` now return ``None`` while renaming the axis inplace. (:issue:`15704`) - :func:`api.types.infer_dtype` now infers decimals. (:issue:`15690`) - :func:`DataFrame.select_dtypes` now accepts scalar values for include/exclude as well as list-like. (:issue:`16855`) - :func:`date_range` now accepts 'YS' in addition to 'AS' as an alias for start of year. (:issue:`9313`) - :func:`date_range` now accepts 'Y' in addition to 'A' as an alias for end of year. (:issue:`9313`) - Using :meth:`DataFrame.rename_axis` and :meth:`Series.rename_axis` to alter index or column *labels* is now deprecated in favor of using ``.rename``. ``rename_axis`` may still be used to alter the name of the index or columns (:issue:`17833`). - :meth:`~DataFrame.reindex_axis` has been deprecated in favor of :meth:`~DataFrame.reindex`. See :ref:`here <whatsnew_0210.enhancements.rename_reindex_axis>` for more (:issue:`17833`). .. _whatsnew_0210.deprecations.select: Series.select and DataFrame.select ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dataRST/pandas/v0.24.0.rst and :func:`Series.rename_axis` supports ``index`` argument (:issue:`19978`). This change allows a dictionary to be passed so that some of the names of a ``MultiIndex`` can be changed. Example: .. ipython:: python dataRST/pandas/v0.24.1.rst - Fixed regression in :meth:`Series.rename_axis` and :meth:`DataFrame.rename_axis` where passing ``None`` failed to remove the axis name (:issue:`25034`) - Fixed regression in :func:`to_timedelta` with ``box=False`` incorrectly returning a ``datetime64`` object instead of a ``timedelta64`` object (:issue:`24961`) - Fixed regression where custom hashable types could not be used as column keys in :meth:`DataFrame.set_index` (:issue:`24969`) .. _whatsnew_0241.bug_fixes: Bug fixes dataRST/pandas/v0.25.0.rst - Removed the previously deprecated behavior of altering column or index labels with :meth:`Series.rename_axis` or :meth:`DataFrame.rename_axis` (:issue:`17842`) - Removed the previously deprecated ``tupleize_cols`` keyword argument in :meth:`read_html`,:meth:`read_csv`,and :meth:`DataFrame.to_csv` (:issue:`17877`,:issue:`17820`) - Removed the previously deprecated ``DataFrame.from.csv`` and ``Series.from_csv`` (:issue:`17812`) - Removed the previously deprecated ``raise_on_error`` keyword argument in :meth:`DataFrame.where` and :meth:`DataFrame.mask` (:issue:`17744`) - Removed the previously deprecated ``ordered`` and ``categories`` keyword arguments in ``astype`` (:issue:`17742`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.reindex_axis,pandas.reindex,0,0,['~DataFrame.reindex'] ['Add <basics.reindexing>'],dataRST/pandas/v0.13.0.rst - ``reindex,reindex_axis,take`` - ``truncate`` (moved to become part of ``NDFrame``) - These are API changes which make ``Panel`` more consistent with ``DataFrame`` - ``swapaxes`` on a ``Panel`` with the same axes specified now return a copy - support attribute access for setting dataRST/pandas/v0.21.0.rst .. _whatsnew_0210.enhancements.rename_reindex_axis: Methods ``rename``,``reindex`` now also accept axis keyword ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The :meth:`DataFrame.rename` and :meth:`DataFrame.reindex` methods have gained the ``axis`` keyword to specify the axis to target with the operation - :meth:`~DataFrame.reindex_axis` has been deprecated in favor of :meth:`~DataFrame.reindex`. See :ref:`here <whatsnew_0210.enhancements.rename_reindex_axis>` for more (:issue:`17833`). .. _whatsnew_0210.deprecations.select: Series.select and DataFrame.select ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The :meth:`Series.select` and :meth:`DataFrame.select` methods are deprecated in favor of using ``df.loc[labels.map(crit)]`` (:issue:`12401`) dataRST/pandas/v0.25.0.rst - Removed the previously deprecated ``DataFrame.reindex_axis`` and ``Series.reindex_axis`` (:issue:`17842`) - Removed the previously deprecated behavior of altering column or index labels with :meth:`Series.rename_axis` or :meth:`DataFrame.rename_axis` (:issue:`17842`) - Removed the previously deprecated ``tupleize_cols`` keyword argument in :meth:`read_html`,:meth:`read_csv`,and :meth:`DataFrame.to_csv` (:issue:`17877`,:issue:`17820`) - Removed the previously deprecated ``DataFrame.from.csv`` and ``Series.from_csv`` (:issue:`17812`) - Removed the previously deprecated ``raise_on_error`` keyword argument in :meth:`DataFrame.where` and :meth:`DataFrame.mask` (:issue:`17744`) dataRST/pandas/v0.7.0.rst - :ref:`Add <basics.reindexing>` ``reindex_axis`` method added to DataFrame - :ref:`Add <basics.stats>` ``level`` option to binary arithmetic functions on ``DataFrame`` and ``Series`` - :ref:`Add <advanced.advanced_reindex>` ``level`` option to the ``reindex`` and ``align`` methods on Series and DataFrame for broadcasting values across,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.select,df.loc[labels.map(crit)],1,1,['df.loc[labels.map(crit)]'] ['df.loc[labels.map(crit)]'],dataRST/pandas/v0.21.0.rst Series.select and DataFrame.select ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The :meth:`Series.select` and :meth:`DataFrame.select` methods are deprecated in favor of using ``df.loc[labels.map(crit)]`` (:issue:`12401`) .. ipython:: python df = pd.DataFrame({'A': [1,2,3]},index=['foo',bar',baz']) The :meth:`Series.select` and :meth:`DataFrame.select` methods are deprecated in favor of using ``df.loc[labels.map(crit)]`` (:issue:`12401`) .. ipython:: python df = pd.DataFrame({'A': [1,2,3]},index=['foo',bar',baz']) .. code-block:: ipython In [3]: df.select(lambda x: x in ['bar',baz']),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.select,df.loc[labels.map(crit)],0,0,,dataRST/pandas/v0.14.1.rst - New methods :meth:`~pandas.DataFrame.select_dtypes` to select columns based on the dtype and :meth:`~pandas.Series.sem` to calculate the standard error of the mean. - Support for dateutil timezones (see :ref:`docs <timeseries.timezone>`). - Support for ignoring full line comments in the :func:`~pandas.read_csv` - Add :meth:`~pandas.DataFrame.select_dtypes` method to allow selection of columns based on dtype (:issue:`7316`). See :ref:`the docs <basics.selectdtypes>`. - All ``offsets`` supports the ``normalize`` keyword to specify whether ``offsets.apply``,``rollforward`` and ``rollback`` resets the time (hour,minute,etc) or not (default ``False``,preserves time) (:issue:`7156`):,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.argmax,pandas.Series.idxmax,1,1,['Series.argmin'] ['index'] ['Series.idxmax'] ['pandas.Series.idxmax'] ['Series.argmin'] ['Series.argmin'] ['Series.idxmax'],dataRST/pandas/v0.13.0.rst - ``Series.argmin`` and ``Series.argmax`` are now aliased to ``Series.idxmin`` and ``Series.idxmax``. These return the *index* of the min or max element respectively. Prior to 0.13.0 these would return the position of the min / max element. (:issue:`6214`) Prior version deprecations/changes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ These were announced changes in 0.12 or prior that are taking effect as of 0.13.0 dataRST/pandas/v0.21.0.rst - :func:`Series.argmin` and :func:`Series.argmax` will now raise a ``TypeError`` when used with ``object`` dtypes,instead of a ``ValueError`` (:issue:`13595`) - :class:`Period` is now immutable,and will now raise an ``AttributeError`` when a user tries to assign a new value to the ``ordinal`` or ``freq`` attributes (:issue:`17116`). - :func:`to_datetime` when passed a tz-aware ``origin=`` kwarg will now raise a more informative ``ValueError`` rather than a ``TypeError`` (:issue:`16842`) - :func:`to_datetime` now raises a ``ValueError`` when format includes ``%W`` or ``%U`` without also including day of the week and calendar year (:issue:`16774`) - Renamed non-functional ``index`` to ``index_col`` in :func:`read_stata` to improve API consistency (:issue:`16342`) Series.argmax and Series.argmin ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The behavior of :func:`Series.argmax` and :func:`Series.argmin` have been deprecated in favor of :func:`Series.idxmax` and :func:`Series.idxmin`,respectively (:issue:`16830`). For compatibility with NumPy arrays,``pd.Series`` implements ``argmax`` and ``argmin``. Since pandas 0.13.0,``argmax`` has been an alias for The behavior of :func:`Series.argmax` and :func:`Series.argmin` have been deprecated in favor of :func:`Series.idxmax` and :func:`Series.idxmin`,respectively (:issue:`16830`). For compatibility with NumPy arrays,``pd.Series`` implements ``argmax`` and ``argmin``. Since pandas 0.13.0,``argmax`` has been an alias for :meth:`pandas.Series.idxmax`,and ``argmin`` has been an alias for :meth:`pandas.Series.idxmin`. They return the *label* of the maximum or minimum,We've deprecated the current behavior of ``Series.argmax`` and ``Series.argmin``. Using either of these will emit a ``FutureWarning``. Use :meth:`Series.idxmax` if you want the label of the maximum. Use ``Series.values.argmax()`` if you want the position of the maximum. Likewise for the minimum. In a future release ``Series.argmax`` and ``Series.argmin`` will the minimum. In a future release ``Series.argmax`` and ``Series.argmin`` will return the position of the maximum or minimum. .. _whatsnew_0210.prior_deprecations: Removal of prior version deprecations/changes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ - :func:`Series.argmin`,:func:`Series.argmax`,and their counterparts on ``DataFrame`` and groupby objects work correctly with floating point data that contains infinite values (:issue:`13595`). - Bug in :func:`unique` where checking a tuple of strings raised a ``TypeError`` (:issue:`17108`) - Bug in :func:`concat` where order of result index was unpredictable if it contained non-comparable elements (:issue:`17344`) - Fixes regression when sorting by multiple columns on a ``datetime64`` dtype ``Series`` with ``NaT`` values (:issue:`16836`) - Bug in :func:`pivot_table` where the result's columns did not preserve the categorical dtype of ``columns`` when ``dropna`` was ``False`` (:issue:`17842`) dataRST/pandas/v1.0.0.rst - Removed deprecated behavior of :meth:`Series.argmin` and :meth:`Series.argmax`,use :meth:`Series.idxmin` and :meth:`Series.idxmax` for the old behavior (:issue:`16955`) - Passing a tz-aware ``datetime.datetime`` or :class:`Timestamp` into the :class:`Timestamp` constructor with the ``tz`` argument now raises a ``ValueError`` (:issue:`23621`) - Removed ``Series.base``,``Index.base``,``Categorical.base``,``Series.flags``,``Index.flags``,``PeriodArray.flags``,``Series.strides``,``Index.strides``,``Series.itemsize``,``Index.itemsize``,``Series.data``,``Index.data`` (:issue:`20721`) - Changed :meth:`Timedelta.resolution` to match the behavior of the standard library ``datetime.timedelta.resolution``,for the old behavior,use :meth:`Timedelta.resolution_string` (:issue:`26839`) - Removed ``Timestamp.weekday_name``,``DatetimeIndex.weekday_name``,and ``Series.dt.weekday_name`` (:issue:`18164`) dataRST/pandas/v1.3.0.rst - Fixed bug where :meth:`Series.idxmax`,:meth:`Series.idxmin`,:meth:`Series.argmax`,and :meth:`Series.argmin` would fail when the underlying data is an :class:`ExtensionArray` (:issue:`32749`,:issue:`33719`,:issue:`36566`) - Fixed bug where some properties of subclasses of :class:`PandasExtensionDtype` where improperly cached (:issue:`40329`) - Bug in :meth:`DataFrame.mask` where masking a DataFrame with an :class:`ExtensionDtype` raises a ``ValueError`` (:issue:`40941`) Styler ^^^^^^,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.argmin,pandas.Series.idxmin,1,0,['index'] ['Series.idxmax'] ['pandas.Series.idxmax'] ['Series.argmax'] ['Series.argmin'] ['Series.idxmax'],dataRST/pandas/v0.13.0.rst - ``Series.argmin`` and ``Series.argmax`` are now aliased to ``Series.idxmin`` and ``Series.idxmax``. These return the *index* of the min or max element respectively. Prior to 0.13.0 these would return the position of the min / max element. (:issue:`6214`) Prior version deprecations/changes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ These were announced changes in 0.12 or prior that are taking effect as of 0.13.0 dataRST/pandas/v0.21.0.rst - :func:`Series.argmin` and :func:`Series.argmax` will now raise a ``TypeError`` when used with ``object`` dtypes,instead of a ``ValueError`` (:issue:`13595`) - :class:`Period` is now immutable,and will now raise an ``AttributeError`` when a user tries to assign a new value to the ``ordinal`` or ``freq`` attributes (:issue:`17116`). - :func:`to_datetime` when passed a tz-aware ``origin=`` kwarg will now raise a more informative ``ValueError`` rather than a ``TypeError`` (:issue:`16842`) - :func:`to_datetime` now raises a ``ValueError`` when format includes ``%W`` or ``%U`` without also including day of the week and calendar year (:issue:`16774`) - Renamed non-functional ``index`` to ``index_col`` in :func:`read_stata` to improve API consistency (:issue:`16342`) Series.argmax and Series.argmin ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ The behavior of :func:`Series.argmax` and :func:`Series.argmin` have been deprecated in favor of :func:`Series.idxmax` and :func:`Series.idxmin`,respectively (:issue:`16830`). For compatibility with NumPy arrays,``pd.Series`` implements ``argmax`` and ``argmin``. Since pandas 0.13.0,``argmax`` has been an alias for The behavior of :func:`Series.argmax` and :func:`Series.argmin` have been deprecated in favor of :func:`Series.idxmax` and :func:`Series.idxmin`,respectively (:issue:`16830`). For compatibility with NumPy arrays,``pd.Series`` implements ``argmax`` and ``argmin``. Since pandas 0.13.0,``argmax`` has been an alias for :meth:`pandas.Series.idxmax`,and ``argmin`` has been an alias for :meth:`pandas.Series.idxmin`. They return the *label* of the maximum or minimum,``Series.argmin``. Using either of these will emit a ``FutureWarning``. Use :meth:`Series.idxmax` if you want the label of the maximum. Use ``Series.values.argmax()`` if you want the position of the maximum. Likewise for the minimum. In a future release ``Series.argmax`` and ``Series.argmin`` will return the position of the maximum or minimum. the minimum. In a future release ``Series.argmax`` and ``Series.argmin`` will return the position of the maximum or minimum. .. _whatsnew_0210.prior_deprecations: Removal of prior version deprecations/changes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ - :func:`Series.argmin`,:func:`Series.argmax`,and their counterparts on ``DataFrame`` and groupby objects work correctly with floating point data that contains infinite values (:issue:`13595`). - Bug in :func:`unique` where checking a tuple of strings raised a ``TypeError`` (:issue:`17108`) - Bug in :func:`concat` where order of result index was unpredictable if it contained non-comparable elements (:issue:`17344`) - Fixes regression when sorting by multiple columns on a ``datetime64`` dtype ``Series`` with ``NaT`` values (:issue:`16836`) - Bug in :func:`pivot_table` where the result's columns did not preserve the categorical dtype of ``columns`` when ``dropna`` was ``False`` (:issue:`17842`) dataRST/pandas/v1.0.0.rst - Removed deprecated behavior of :meth:`Series.argmin` and :meth:`Series.argmax`,use :meth:`Series.idxmin` and :meth:`Series.idxmax` for the old behavior (:issue:`16955`) - Passing a tz-aware ``datetime.datetime`` or :class:`Timestamp` into the :class:`Timestamp` constructor with the ``tz`` argument now raises a ``ValueError`` (:issue:`23621`) - Removed ``Series.base``,``Index.base``,``Categorical.base``,``Series.flags``,``Index.flags``,``PeriodArray.flags``,``Series.strides``,``Index.strides``,``Series.itemsize``,``Index.itemsize``,``Series.data``,``Index.data`` (:issue:`20721`) - Changed :meth:`Timedelta.resolution` to match the behavior of the standard library ``datetime.timedelta.resolution``,for the old behavior,use :meth:`Timedelta.resolution_string` (:issue:`26839`) - Removed ``Timestamp.weekday_name``,``DatetimeIndex.weekday_name``,and ``Series.dt.weekday_name`` (:issue:`18164`) dataRST/pandas/v1.3.0.rst - Fixed bug where :meth:`Series.idxmax`,:meth:`Series.idxmin`,:meth:`Series.argmax`,and :meth:`Series.argmin` would fail when the underlying data is an :class:`ExtensionArray` (:issue:`32749`,:issue:`33719`,:issue:`36566`) - Fixed bug where some properties of subclasses of :class:`PandasExtensionDtype` where improperly cached (:issue:`40329`) - Bug in :meth:`DataFrame.mask` where masking a DataFrame with an :class:`ExtensionDtype` raises a ``ValueError`` (:issue:`40941`) Styler ^^^^^^,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tslib.NaTType,type(pandas.NaT),1,1,['type(pandas.NaT)'],dataRST/pandas/v0.20.0.rst - The type import ``pandas.tslib.NaTType`` is deprecated and can be replaced by using ``type(pandas.NaT)`` (:issue:`16146`) - The public functions in ``pandas.tools.hashing`` deprecated from that locations,but are now importable from ``pandas.util`` (:issue:`16223`) - The modules in ``pandas.util``: ``decorators``,``print_versions``,``doctools``,``validators``,``depr_module`` are now private. Only the functions exposed in ``pandas.util`` itself are public (:issue:`16223`) .. _whatsnew_0200.privacy.errors: ``pandas.errors``,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tools.plotting,pandas.plotting,1,1,['pandas.plotting'] ['pandas.plotting'],dataRST/pandas/v0.14.0.rst Also,helper function ``pandas.tools.plotting.table`` is added to create a table from ``DataFrame`` and ``Series``,and add it to an ``matplotlib.Axes``. - ``plot(legend='reverse')`` will now reverse the order of legend labels for most plot kinds. (:issue:`6014`) - Line plot and area plot can be stacked by ``stacked=True`` (:issue:`6656`) - Following keywords are now acceptable for :meth:`DataFrame.plot` with ``kind='bar'`` and ``kind='barh'``: dataRST/pandas/v0.20.0.rst A new public ``pandas.plotting`` module has been added that holds plotting functionality that was previously in either ``pandas.tools.plotting`` or in the top-level namespace. See the :ref:`deprecations sections <whatsnew_0200.privacy.deprecate_plotting>` for more details. .. _whatsnew_0200.privacy.development: Other development changes ^^^^^^^^^^^^^^^^^^^^^^^^^ - Building pandas for development now requires ``cython >= 0.23`` (:issue:`14831`) The ``pandas.tools.plotting`` module has been deprecated,in favor of the top level ``pandas.plotting`` module. All the public plotting functions are now available from ``pandas.plotting`` (:issue:`12548`). Furthermore,the top-level ``pandas.scatter_matrix`` and ``pandas.plot_params`` are deprecated. Users can import these from ``pandas.plotting`` as well. Previous script: dataRST/pandas/v0.7.3.rst from pandas.tools.plotting import scatter_matrix scatter_matrix(df,alpha=0.2) # noqa F821 - Add ``stacked`` argument to Series and DataFrame's ``plot`` method for :ref:`stacked bar plots <visualization.barplot>`. .. code-block:: python,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.scatter_matrix,pandas.plotting.scatter_matrix,0,0,['pandas.plotting'],dataRST/pandas/v0.20.0.rst Furthermore,the top-level ``pandas.scatter_matrix`` and ``pandas.plot_params`` are deprecated. Users can import these from ``pandas.plotting`` as well. Previous script: .. code-block:: python pd.tools.plotting.scatter_matrix(df),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.SparseArray.to_dense,pandas.arrays.SparseArray.to_dense,0,0,['repeats'] ['raise_on_error'] ['to_numpy'],dataRST/pandas/v0.18.1.rst - Bug in ``SparseArray.to_dense()`` does not preserve ``dtype`` (:issue:`10648`) - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``pd.concat()`` of ``SparseSeries`` results in dense (:issue:`10536`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` incorrectly handle ``fill_value`` (:issue:`9765`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` may raise ``AttributeError`` (:issue:`12174`) - Bug in ``SparseArray.to_dense()`` incorrectly handle ``fill_value`` (:issue:`12797`) - Bug in ``pd.concat()`` of ``SparseSeries`` results in dense (:issue:`10536`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` incorrectly handle ``fill_value`` (:issue:`9765`) - Bug in ``pd.concat()`` of ``SparseDataFrame`` may raise ``AttributeError`` (:issue:`12174`) - Bug in ``SparseArray.shift()`` may raise ``NameError`` or ``TypeError`` (:issue:`12908`) dataRST/pandas/v0.20.0.rst - ``SparseArray.to_dense()`` has deprecated the ``fill`` parameter,as that parameter was not being respected (:issue:`14647`) - ``SparseSeries.to_dense()`` has deprecated the ``sparse_only`` parameter (:issue:`14647`) - ``Series.repeat()`` has deprecated the ``reps`` parameter in favor of ``repeats`` (:issue:`12662`) - The ``Series`` constructor and ``.astype`` method have deprecated accepting timestamp dtypes without a frequency (e.g. ``np.datetime64``) for the ``dtype`` parameter (:issue:`15524`) - ``Index.repeat()`` and ``MultiIndex.repeat()`` have deprecated the ``n`` parameter in favor of ``repeats`` (:issue:`12662`) dataRST/pandas/v0.24.0.rst - :meth:`SparseArray.get_values` and :meth:`SparseArray.to_dense` have dropped the ``fill`` parameter (:issue:`14686`) - ``DataFrame.sortlevel`` and ``Series.sortlevel`` have been removed (:issue:`15099`) - :meth:`SparseSeries.to_dense` has dropped the ``sparse_only`` parameter (:issue:`14686`) - :meth:`DataFrame.astype` and :meth:`Series.astype` have renamed the ``raise_on_error`` argument to ``errors`` (:issue:`14967`) - ``is_sequence``,``is_any_int_dtype``,and ``is_floating_dtype`` have been removed from ``pandas.api.types`` (:issue:`16163`,:issue:`16189`) dataRST/pandas/v0.25.0.rst the :meth:`SparseArray.to_dense` method instead (:issue:`26421`). - The functions :func:`pandas.to_datetime` and :func:`pandas.to_timedelta` have deprecated the ``box`` keyword. Instead,use :meth:`to_numpy` or :meth:`Timestamp.to_datetime64` or :meth:`Timedelta.to_timedelta64`. (:issue:`24416`) - The :meth:`DataFrame.compound` and :meth:`Series.compound` methods are deprecated and will be removed in a future version (:issue:`26405`). - The internal attributes ``_start``,``_stop`` and ``_step`` attributes of :class:`RangeIndex` have been deprecated. Use the public attributes :attr:`~RangeIndex.start`,:attr:`~RangeIndex.stop` and :attr:`~RangeIndex.step` instead (:issue:`26581`).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Series.sortlevel,Series.sort_index,1,1,['Series.sort_index'] ['raise_on_error'],dataRST/pandas/v0.17.0.rst ``Series.sortlevel(level=...)`` ``Series.sort_index(level=...``) ``DataFrame.sort_index()`` ``DataFrame.sort_index()`` ``DataFrame.sortlevel(level=...)`` ``DataFrame.sort_index(level=...)`` \* ``DataFrame.sort()`` ``DataFrame.sort_index()`` ================================== ==================================== dataRST/pandas/v0.20.0.rst - ``Series.sortlevel`` and ``DataFrame.sortlevel`` have been deprecated in favor of ``Series.sort_index`` and ``DataFrame.sort_index`` (:issue:`15099`) - importing ``concat`` from ``pandas.tools.merge`` has been deprecated in favor of imports from the ``pandas`` namespace. This should only affect explicit imports (:issue:`15358`) - ``Series/DataFrame/Panel.consolidate()`` been deprecated as a public method. (:issue:`15483`) - The ``as_indexer`` keyword of ``Series.str.match()`` has been deprecated (ignored keyword) (:issue:`15257`). - The following top-level pandas functions have been deprecated and will be removed in a future version (:issue:`13790`,:issue:`15940`) dataRST/pandas/v0.24.0.rst - ``DataFrame.sortlevel`` and ``Series.sortlevel`` have been removed (:issue:`15099`) - :meth:`SparseSeries.to_dense` has dropped the ``sparse_only`` parameter (:issue:`14686`) - :meth:`DataFrame.astype` and :meth:`Series.astype` have renamed the ``raise_on_error`` argument to ``errors`` (:issue:`14967`) - ``is_sequence``,``is_any_int_dtype``,and ``is_floating_dtype`` have been removed from ``pandas.api.types`` (:issue:`16163`,:issue:`16189`) .. _whatsnew_0240.performance:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.DataFrame.sortlevel,DataFrame.sort_index,1,0,['Series.sort_index'] ['raise_on_error'],dataRST/pandas/v0.17.0.rst - ``Series/DataFrame.sortlevel`` worked only on a ``MultiIndex`` for sorting by index. To address these issues,we have revamped the API: - We have introduced a new method,:meth:`DataFrame.sort_values`,which is the merger of ``DataFrame.sort()``,``Series.sort()``,and ``Series.order()``,to handle sorting of **values**. - The existing methods ``Series.sort()``,``Series.order()``,and ``DataFrame.sort()`` have been deprecated and will be removed in a ``DataFrame.sortlevel(level=...)`` ``DataFrame.sort_index(level=...)`` \* ``DataFrame.sort()`` ``DataFrame.sort_index()`` ================================== ==================================== We have also deprecated and changed similar methods in two Series-like classes,``Index`` and ``Categorical``. ================================== ==================================== dataRST/pandas/v0.20.0.rst - ``Series.sortlevel`` and ``DataFrame.sortlevel`` have been deprecated in favor of ``Series.sort_index`` and ``DataFrame.sort_index`` (:issue:`15099`) - importing ``concat`` from ``pandas.tools.merge`` has been deprecated in favor of imports from the ``pandas`` namespace. This should only affect explicit imports (:issue:`15358`) - ``Series/DataFrame/Panel.consolidate()`` been deprecated as a public method. (:issue:`15483`) - The ``as_indexer`` keyword of ``Series.str.match()`` has been deprecated (ignored keyword) (:issue:`15257`). - The following top-level pandas functions have been deprecated and will be removed in a future version (:issue:`13790`,:issue:`15940`) dataRST/pandas/v0.24.0.rst - ``DataFrame.sortlevel`` and ``Series.sortlevel`` have been removed (:issue:`15099`) - :meth:`SparseSeries.to_dense` has dropped the ``sparse_only`` parameter (:issue:`14686`) - :meth:`DataFrame.astype` and :meth:`Series.astype` have renamed the ``raise_on_error`` argument to ``errors`` (:issue:`14967`) - ``is_sequence``,``is_any_int_dtype``,and ``is_floating_dtype`` have been removed from ``pandas.api.types`` (:issue:`16163`,:issue:`16189`) .. _whatsnew_0240.performance:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Term,,1,1,"['escapechar'] ['DataFrame.apply'] ['DataFrame'] ['axvlines'] ['DataFrame.diff'] ['clip'] ['isnull'] ['pd.Term'] ['pandas.io.formats.style.Styler'] ['pandas.io.formats.style.Styler'] ['20'] ['Interval.overlaps'] [""'\\r\\n'""] [""'\\n'""] ['os.linesep'] [""'\\r\\n'""] ['newline'] ['numpy.ptp'] ['v'] ['DataFrame.join'] ['DataFrame.itertuples'] ['DataFrame.join'] ['read_excel'] ['.Styler.background_gradient'] ['read_csv'] ['Styler.apply'] ['DataFrame.items']",dataRST/pandas/v0.10.0.rst - Easier CSV dialect options: ``escapechar``,``lineterminator``,``quotechar``,etc. - More robust handling of many exceptional kinds of files observed in the wild API changes ~~~~~~~~~~~ In [53]: store.select('wp',[pd.Term('major_axis>20000102'),....: pd.Term('minor_axis',=',['A',B'])]) ....: Out[53]: <class 'pandas.core.panel.Panel'> ....: pd.Term('minor_axis',=',['A',B'])]) ....: Out[53]: <class 'pandas.core.panel.Panel'> Dimensions: 2 (items) x 3 (major_axis) x 2 (minor_axis) In [54]: store.remove('wp',pd.Term('major_axis>20000103')) Out[54]: 8 In [55]: store.select('wp') Out[55]: <class 'pandas.core.panel.Panel'> - added ``Term`` method of specifying where conditions (:issue:`1996`). - ``del store['df']`` now call ``store.remove('df')`` for store deletion - deleting of consecutive rows is much faster than before - ``min_itemsize`` parameter can be specified in table creation to force a minimum size for indexing columns (the previous implementation would set the however,query terms using the prior (undocumented) methodology are unsupported. You must read in the entire file and write it out using the new format to take advantage of the updates. N dimensional panels (experimental) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Adding experimental support for Panel4D and factory functions to create n-dimensional named panels. dataRST/pandas/v0.10.1.rst ``Term('columns',"list_of_columns_to_filter)`` .. ipython:: python store.select(""df""","columns=[""A""","""B""]) ``HDFStore`` now serializes MultiIndex dataframes when appending tables. .. code-block:: ipython dataRST/pandas/v0.13.1.rst - ``DataFrame.apply`` will use the ``reduce`` argument to determine whether a ``Series`` or a ``DataFrame`` should be returned when the ``DataFrame`` is empty (:issue:`6007`). Previously",calling ``DataFrame.apply`` an empty ``DataFrame`` would return either a ``DataFrame`` if there were no columns,"or the function being dataRST/pandas/v0.15.0.rst a custom line terminator or ``delim_whitespace=True`` (:issue:`8122`). - Bug in ``read_html`` where empty tables caused a ``StopIteration`` (:issue:`7575`) - Bug in casting when setting a column in a same-dtype block (:issue:`7704`) - Bug in accessing groups from a ``GroupBy`` when the original grouper was a tuple (:issue:`8121`). - Bug in ``DataFrame`` terminal display: Setting max_column/max_rows to zero did not trigger auto-resizing of dfs to fit terminal width/height (:issue:`7180`). - Bug in OLS where running with ""cluster"" and ""nw_lags"" parameters did not work correctly",but also did not throw an error (:issue:`5884`). - Bug in ``DataFrame.dropna`` that interpreted non-existent columns in the subset argument as the 'last column' (:issue:`8303`) - Bug in ``Index.intersection`` on non-monotonic non-unique indexes (:issue:`8362`). dataRST/pandas/v0.15.2.rst - Added ``axvlines`` boolean option to parallel_coordinates plot function,determines whether vertical lines will be printed,default is True - Added ability to read table footers to read_html (:issue:`8552`) - ``to_sql`` now infers data types of non-NA values for columns that contain NA values and have dtype ``object`` (:issue:`8778`). .. _whatsnew_0152.performance: Performance dataRST/pandas/v0.16.1.rst - ``DataFrame.diff`` now takes an ``axis`` parameter that determines the direction of differencing (:issue:`9727`) - Allow ``clip``,``clip_lower``,and ``clip_upper`` to accept array-like arguments as thresholds (This is a regression from 0.11.0). These methods now have an ``axis`` parameter which determines how the Series or DataFrame will be aligned with the threshold(s). (:issue:`6966`) - ``DataFrame.mask()`` and ``Series.mask()`` now support same keywords as ``where`` (:issue:`8801`) - ``drop`` function can now accept ``errors`` keyword to suppress ``ValueError`` raised when any of label does not exist in the target data. (:issue:`6736`) .. ipython:: python - Allow ``clip``,``clip_lower``,and ``clip_upper`` to accept array-like arguments as thresholds (This is a regression from 0.11.0). These methods now have an ``axis`` parameter which determines how the Series or DataFrame will be aligned with the threshold(s). (:issue:`6966`) - ``DataFrame.mask()`` and ``Series.mask()`` now support same keywords as ``where`` (:issue:`8801`) - ``drop`` function can now accept ``errors`` keyword to suppress ``ValueError`` raised when any of label does not exist in the target data. (:issue:`6736`) .. ipython:: python df = pd.DataFrame(np.random.randn(3,3),"columns=[""A""","""B""","""C""]) dataRST/pandas/v0.17.1.rst - Bug in ``isnull`` where ``numpy.datetime64('NaT')`` in a ``numpy.array`` was not determined to be null(:issue:`11206`) - Bug in list-like indexing with a mixed-integer Index (:issue:`11320`) - Bug in ``pivot_table`` with ``margins=True`` when indexes are of ``Categorical`` dtype (:issue:`10993`) - Bug in ``DataFrame.plot`` cannot use hex strings colors (:issue:`10299`) - Regression in ``DataFrame.drop_duplicates`` from 0.16.2",causing incorrect results on integer values (:issue:`11376`) dataRST/pandas/v0.18.1.rst - Bug in ``pd.read_csv()`` when specifying ``delim_whitespace=True`` and ``lineterminator`` simultaneously with the ``c`` engine (:issue:`12912`) - Bug in ``Series.rename``,``DataFrame.rename`` and ``DataFrame.rename_axis`` not treating ``Series`` as mappings to relabel (:issue:`12623`). - Clean in ``.rolling.min`` and ``.rolling.max`` to enhance dtype handling (:issue:`12373`) - Bug in ``groupby`` where complex types are coerced to float (:issue:`12902`) - Bug in ``Series.map`` raises ``TypeError`` if its dtype is ``category`` or tz-aware ``datetime`` (:issue:`12473`) dataRST/pandas/v0.20.0.rst * ``pd.Term``,is removed,as it is not applicable to user code. Instead use in-line string expressions in the where clause when searching in HDFStore * ``pd.Expr``,is removed,as it is not applicable to user code. * ``pd.match()``,is removed. * ``pd.groupby()``,replaced by using the ``.groupby()`` method directly on a ``Series/DataFrame`` * ``pd.get_store()``,"replaced by a direct call to ``pd.HDFStore(...)`` dataRST/pandas/v0.20.2.rst - Silenced a warning on some Windows environments about ""tput: terminal attributes: No such device or address"" when detecting the terminal size. This fix only applies to python 3 (:issue:`16496`) - Bug in using ``pathlib.Path`` or ``py.path.local`` objects with io functions (:issue:`16291`) - Bug in ``Index.symmetric_difference()`` on two equal MultiIndex's",results in a ``TypeError`` (:issue:`13490`) - Bug in ``DataFrame.update()`` with ``overwrite=False`` and ``NaN values`` (:issue:`15593`) detecting the terminal size. This fix only applies to python 3 (:issue:`16496`) - Bug in using ``pathlib.Path`` or ``py.path.local`` objects with io functions (:issue:`16291`) - Bug in ``Index.symmetric_difference()`` on two equal MultiIndex's,results in a ``TypeError`` (:issue:`13490`) - Bug in ``DataFrame.update()`` with ``overwrite=False`` and ``NaN values`` (:issue:`15593`) - Passing an invalid engine to :func:`read_csv` now raises an informative dataRST/pandas/v0.21.0.rst We could do this in a multi-step operation,but expressing it in terms of piping can make the code more readable. First we set the data: .. ipython:: python import numpy as np dataRST/pandas/v0.23.0.rst - :class:`pandas.io.formats.style.Styler` now has method ``hide_index()`` to determine whether the index will be rendered in output (:issue:`14194`) - :class:`pandas.io.formats.style.Styler` now has method ``hide_columns()`` to determine whether columns will be hidden in output (:issue:`14194`) - Improved wording of ``ValueError`` raised in :func:`to_datetime` when ``unit=`` is passed with a non-convertible value (:issue:`14350`) - :func:`Series.fillna` now accepts a Series or a dict as a ``value`` for a categorical dtype (:issue:`17033`) - :func:`pandas.read_clipboard` updated to use qtpy,falling back to PyQt5 and then PyQt4,adding compatibility with Python3 and multiple python-qt bindings (:issue:`17722`) - :class:`pandas.io.formats.style.Styler` now has method ``hide_columns()`` to determine whether columns will be hidden in output (:issue:`14194`) - Improved wording of ``ValueError`` raised in :func:`to_datetime` when ``unit=`` is passed with a non-convertible value (:issue:`14350`) - :func:`Series.fillna` now accepts a Series or a dict as a ``value`` for a categorical dtype (:issue:`17033`) - :func:`pandas.read_clipboard` updated to use qtpy,falling back to PyQt5 and then PyQt4,adding compatibility with Python3 and multiple python-qt bindings (:issue:`17722`) - Improved wording of ``ValueError`` raised in :func:`read_csv` when the ``usecols`` argument cannot match all columns. (:issue:`17301`) Better pretty-printing of DataFrames in a terminal ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Previously,the default value for the maximum number of columns was ``pd.options.display.max_columns=20``. This meant that relatively wide data frames would not fit within the terminal width,and pandas would introduce line frames would not fit within the terminal width,and pandas would introduce line breaks to display these 20 columns. This resulted in an output that was relatively difficult to read: .. image:: ../_static/print_df_old.png If Python runs in a terminal,the maximum number of columns is now determined If Python runs in a terminal,the maximum number of columns is now determined automatically so that the printed data frame fits within the current terminal width (``pd.options.display.max_columns=0``) (:issue:`17023`). If Python runs as a Jupyter kernel (such as the Jupyter QtConsole or a Jupyter notebook,as well as in many IDEs),this value cannot be inferred automatically and is thus automatically so that the printed data frame fits within the current terminal width (``pd.options.display.max_columns=0``) (:issue:`17023`). If Python runs as a Jupyter kernel (such as the Jupyter QtConsole or a Jupyter notebook,as well as in many IDEs),this value cannot be inferred automatically and is thus set to ``20`` as in previous versions. In a terminal,this results in a much set to ``20`` as in previous versions. In a terminal,this results in a much nicer output: .. image:: ../_static/print_df_new.png Note that if you don't like the new default,you can always set this option yourself. To revert to the old setting,you can run this line: dataRST/pandas/v0.24.0.rst - Added :meth:`Interval.overlaps`,:meth:`arrays.IntervalArray.overlaps`,and :meth:`IntervalIndex.overlaps` for determining overlaps between interval-like objects (:issue:`21998`) - :func:`read_fwf` now accepts keyword ``infer_nrows`` (:issue:`15138`). - :func:`~DataFrame.to_parquet` now supports writing a ``DataFrame`` as a directory of parquet files partitioned by a subset of the columns when ``engine = 'pyarrow'`` (:issue:`23283`) - :meth:`Timestamp.tz_localize`,:meth:`DatetimeIndex.tz_localize`,and :meth:`Series.tz_localize` have gained the ``nonexistent`` argument for alternative handling of nonexistent times. See :ref:`timeseries.timezone_nonexistent` (:issue:`8917`,:issue:`24466`) - :meth:`Index.difference`,:meth:`Index.intersection`,:meth:`Index.union`,and :meth:`Index.symmetric_difference` now have an optional ``sort`` parameter to control whether the results should be sorted if possible (:issue:`17839`,:issue:`24471`) .. _whatsnew_0240.api_breaking.csv_line_terminator: ``os.linesep`` is used for ``line_terminator`` of ``DataFrame.to_csv`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ :func:`DataFrame.to_csv` now uses :func:`os.linesep` rather than ``'\n'`` for the default line terminator (:issue:`20353`). ``os.linesep`` is used for ``line_terminator`` of ``DataFrame.to_csv`` ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ :func:`DataFrame.to_csv` now uses :func:`os.linesep` rather than ``'\n'`` for the default line terminator (:issue:`20353`). This change only affects when running on Windows,where ``'\r\n'`` was used for line terminator for the default line terminator (:issue:`20353`). This change only affects when running on Windows,where ``'\r\n'`` was used for line terminator even when ``'\n'`` was passed in ``line_terminator``. *Previous behavior* on Windows: .. code-block:: ipython This change only affects when running on Windows,"where ``'\r\n'`` was used for line terminator even when ``'\n'`` was passed in ``line_terminator``. *Previous behavior* on Windows: .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","even when ``'\n'`` was passed in ``line_terminator``. *Previous behavior* on Windows: .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","...: ""string_with_crlf"": [""a\r\nbc""]}) ...: # line_terminator does not work",and csv is saved with '\r\n'. ...: # Also,"this converts all '\n's in the data to '\r\n'. ...: data.to_csv(""test.csv""",index=False,"line_terminator='\n') In [3]: with open(""test.csv""","mode='rb') as f: ...: print(f.read()) ...: data.to_csv(""test.csv""",index=False,"line_terminator='\n') In [3]: with open(""test.csv""",mode='rb') as f: ...: print(f.read()) Out[3]: b'string_with_lf,"string_with_crlf\r\n""a\r\nbc""",a\r\r\nbc\r\n' In [4]: # When passing file OBJECT with newline option to ...: # to_csv,"line_terminator works. ...: with open(""test2.csv""",mode='w',newline='\n') as f: ...: data.to_csv(f,index=False,"line_terminator='\n') In [5]: with open(""test2.csv""",mode='rb') as f: ...: print(f.read()) ...: data.to_csv(f,index=False,"line_terminator='\n') In [5]: with open(""test2.csv""",mode='rb') as f: ...: print(f.read()) Out[5]: b'string_with_lf,"string_with_crlf\n""a\nbc""",a\r\nbc\n' *New behavior* on Windows: Passing ``line_terminator`` explicitly,"set the ``line terminator`` to that character. .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","...: ""string_with_crlf"": [""a\r\nbc""]}) In [2]: data.to_csv(""test.csv""",index=False,"line_terminator='\n') In [2]: data.to_csv(""test.csv""",index=False,"line_terminator='\n') In [3]: with open(""test.csv""",mode='rb') as f: ...: print(f.read()) Out[3]: b'string_with_lf,"string_with_crlf\n""a\nbc""",a\r\nbc\n' On Windows,the value of ``os.linesep`` is ``'\r\n'``,so if ``line_terminator`` is not On Windows,the value of ``os.linesep`` is ``'\r\n'``,so if ``line_terminator`` is not set,"``'\r\n'`` is used for line terminator. .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","...: ""string_with_crlf"": [""a\r\nbc""]}) set","``'\r\n'`` is used for line terminator. .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","...: ""string_with_crlf"": [""a\r\nbc""]}) In [2]: data.to_csv(""test.csv""",index=False) For file objects,specifying ``newline`` is not sufficient to set the line terminator. You must pass in the ``line_terminator`` explicitly,"even in this case. .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","...: ""string_with_crlf"": [""a\r\nbc""]}) You must pass in the ``line_terminator`` explicitly","even in this case. .. code-block:: ipython In [1]: data = pd.DataFrame({""string_with_lf"": [""a\nbc""]","...: ""string_with_crlf"": [""a\r\nbc""]}) In [2]: with open(""test2.csv""",mode='w',newline='\n') as f: - :meth:`DataFrame.to_stata`,:meth:`read_stata`,:class:`StataReader` and :class:`StataWriter` have deprecated the ``encoding`` argument. The encoding of a Stata dta file is determined by the file type and cannot be changed (:issue:`21244`) - :meth:`MultiIndex.to_hierarchical` is deprecated and will be removed in a future version (:issue:`21613`) - :meth:`Series.ptp` is deprecated. Use ``numpy.ptp`` instead (:issue:`21614`) - :meth:`Series.compress` is deprecated. Use ``Series[condition]`` instead (:issue:`18262`) - The signature of :meth:`Series.to_csv` has been uniformed to that of :meth:`DataFrame.to_csv`: the name of the first argument is now ``path_or_buf``,the order of subsequent arguments has changed,the ``header`` argument now defaults to ``True``. (:issue:`19715`) - ``pandas.pnow``,``pandas.match``,``pandas.groupby``,``pd.get_store``,``pd.Expr``,and ``pd.Term`` have been removed (:issue:`15538`,:issue:`15940`) - :meth:`Categorical.searchsorted` and :meth:`Series.searchsorted` have renamed the ``v`` argument to ``value`` (:issue:`14645`) - ``pandas.parser``,``pandas.lib``,and ``pandas.tslib`` have been removed (:issue:`15537`) - :meth:`Index.searchsorted` have renamed the ``key`` argument to ``value`` (:issue:`14645`) - ``DataFrame.consolidate`` and ``Series.consolidate`` have been removed (:issue:`15501`) dataRST/pandas/v0.24.2.rst - Better handling of terminal printing when the terminal dimensions are not known (:issue:`25080`) - Bug in reading a HDF5 table-format ``DataFrame`` created in Python 2,in Python 3 (:issue:`24925`) - Bug in reading a JSON with ``orient='table'`` generated by :meth:`DataFrame.to_json` with ``index=False`` (:issue:`25170`) - Bug where float indexes could have misaligned values when printing (:issue:`25061`) **Categorical** dataRST/pandas/v0.25.0.rst determines the number of rows showed in the truncated repr: - For small Series or DataFrames,up to ``max_rows`` number of rows is shown (default: 60). - For larger Series of DataFrame with a length above ``max_rows``,only ``min_rows`` number of rows is shown (default: 10,i.e. the first and last dataRST/pandas/v0.4.x.rst - Refactored code related to ``DataFrame.join`` so that intermediate aligned copies of the data in each ``DataFrame`` argument do not need to be created. Substantial performance increases result (:issue:`176`) - Substantially improved performance of generic ``Index.intersection`` and ``Index.union`` dataRST/pandas/v1.0.0.rst - Bug where :meth:`DataFrame.itertuples` would incorrectly determine whether or not namedtuples could be used for dataframes of 255 columns (:issue:`28282`) - Handle nested NumPy ``object`` arrays in :func:`testing.assert_series_equal` for ExtensionArray implementations (:issue:`30841`) - Bug in :class:`Index` constructor incorrectly allowing 2-dimensional input arrays (:issue:`13601`,:issue:`27125`) .. --------------------------------------------------------------------------- .. _whatsnew_100.contributors: dataRST/pandas/v1.2.0.rst determines whether to exclude object-dtype columns on a column-by-column basis,instead of checking if *all* object-dtype columns can be considered boolean. This prevents pathological behavior where applying the reduction on a subset of columns could result in a larger Series result. See (:issue:`37799`). .. ipython:: python - Bug in :meth:`DataFrame.join` returned a non deterministic level-order for the resulting :class:`MultiIndex` (:issue:`36910`) - Bug in :meth:`DataFrame.combine_first` caused wrong alignment with dtype ``string`` and one level of ``MultiIndex`` containing only ``NA`` (:issue:`37591`) - Fixed regression in :func:`merge` on merging :class:`.DatetimeIndex` with empty DataFrame (:issue:`36895`) - Bug in :meth:`DataFrame.apply` not setting index of return value when ``func`` return type is ``dict`` (:issue:`37544`) - Bug in :meth:`DataFrame.merge` and :meth:`pandas.merge` returning inconsistent ordering in result for ``how=right`` and ``how=left`` (:issue:`35382`) dataRST/pandas/v1.3.0.rst - Bug in :func:`read_excel` would raise an error when pandas could not determine the file type even though the user specified the ``engine`` argument (:issue:`41225`) - Bug in :func:`read_clipboard` copying from an excel file shifts values into the wrong column if there are null values in first column (:issue:`41108`) - Bug in :meth:`DataFrame.to_hdf` and :meth:`Series.to_hdf` raising a ``TypeError`` when trying to append a string column to an incompatible column (:issue:`41897`) Period ^^^^^^ - Bug in :meth:`.Styler.background_gradient` where text-color was not determined correctly (:issue:`39888`) - Bug in :meth:`.Styler.set_table_styles` where multiple elements in CSS-selectors of the ``table_styles`` argument were not correctly added (:issue:`34061`) - Bug in :class:`.Styler` where copying from Jupyter dropped the top left cell and misaligned headers (:issue:`12147`) - Bug in :class:`Styler.where` where ``kwargs`` were not passed to the applicable callable (:issue:`40845`) - Bug in :class:`.Styler` causing CSS to duplicate on multiple renders (:issue:`39395`,:issue:`40334`) dataRST/pandas/v1.4.0.rst This made it difficult to determine where the warning was being generated from. Now pandas will inspect the call stack,reporting the first line outside of the pandas library that gave rise to the warning. The output of the above script is now:: setting_with_copy_warning.py:4: SettingWithCopyWarning: result will have the same index as the input. In order to determine if the operation is a transform,pandas compares the input's index to the result's and determines if it has been mutated. Previously in pandas 1.3,"different code paths used different definitions of ""mutated"": some would use Python's ``is`` whereas others would test only up to equality. determines if it has been mutated. Previously in pandas 1.3","different code paths used different definitions of ""mutated"": some would use Python's ``is`` whereas others would test only up to equality. This inconsistency has been removed",pandas now tests up to equality. .. ipython:: python determines that ``func`` is not a transform whereas the second tests up to equality and determines that ``func`` is a transform. In the first case,the result's index is not the same as the input's. *New behavior*: .. ipython:: python equality and determines that ``func`` is a transform. In the first case,the result's index is not the same as the input's. *New behavior*: .. ipython:: python df.groupby(['a']).apply(func) Now in both cases it is determined that ``func`` is a transform. In each case,the result has the same index as the input. .. _whatsnew_140.api_breaking: Backwards incompatible API changes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ - Bug in :func:`read_csv` not raising an ``ValueError`` when ``\n`` was specified as ``delimiter`` or ``sep`` which conflicts with ``lineterminator`` (:issue:`43528`) - Bug in :func:`to_csv` converting datetimes in categorical :class:`Series` to integers (:issue:`40754`) - Bug in :func:`read_csv` converting columns to numeric after date parsing failed (:issue:`11019`) - Bug in :func:`read_csv` not replacing ``NaN`` values with ``np.nan`` before attempting date conversion (:issue:`26203`) - Bug in :func:`read_csv` raising ``AttributeError`` when attempting to read a .csv file and infer index column dtype from an nullable integer type (:issue:`44079`) - Bug in :meth:`Styler.apply` where functions which returned :class:`Series` objects were not correctly handled in terms of aligning their index labels (:issue:`13657`,:issue:`42014`) - Bug when rendering an empty :class:`DataFrame` with a named :class:`Index` (:issue:`43305`) - Bug when rendering a single level :class:`MultiIndex` (:issue:`43383`) - Bug when combining non-sparse rendering and :meth:`.Styler.hide_columns` or :meth:`.Styler.hide_index` (:issue:`43464`) - Bug setting a table style when using multiple selectors in :class:`.Styler` (:issue:`44011`) dataRST/pandas/v1.5.0.rst - Deprecated the keyword ``line_terminator`` in :meth:`DataFrame.to_csv` and :meth:`Series.to_csv`,use ``lineterminator`` instead; this is for consistency with :func:`read_csv` and the standard library 'csv' module (:issue:`9568`) - Deprecated behavior of :meth:`SparseArray.astype`,:meth:`Series.astype`,and :meth:`DataFrame.astype` with :class:`SparseDtype` when passing a non-sparse ``dtype``. In a future version,this will cast to that non-sparse dtype instead of wrapping it in a :class:`SparseDtype` (:issue:`34457`) - Deprecated behavior of :meth:`DatetimeIndex.intersection` and :meth:`DatetimeIndex.symmetric_difference` (``union`` behavior was already deprecated in version 1.3.0) with mixed time zones; in a future version both will be cast to UTC instead of object dtype (:issue:`39328`,:issue:`45357`) - Deprecated :meth:`DataFrame.iteritems`,:meth:`Series.iteritems`,:meth:`HDFStore.iteritems` in favor of :meth:`DataFrame.items`,:meth:`Series.items`,:meth:`HDFStore.items` (:issue:`45321`) - Deprecated :meth:`Series.is_monotonic` and :meth:`Index.is_monotonic` in favor of :meth:`Series.is_monotonic_increasing` and :meth:`Index.is_monotonic_increasing` (:issue:`45422`,:issue:`21335`)
pandas.api.types:is_any_int_dtype,is_floating_dtype,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tseries.util.pivot_annual,pivot_table,1,1,['pivot_table'] ['pivot_table'],dataRST/pandas/v0.19.0.rst - ``pd.tseries.util.pivot_annual`` is deprecated. Use ``pivot_table`` as alternative,an example is :ref:`here <cookbook.pivot>` (:issue:`736`) - ``pd.tseries.util.isleapyear`` has been deprecated and will be removed in a subsequent release. Datetime-likes now have a ``.is_leap_year`` property (:issue:`13727`) - ``Panel4D`` and ``PanelND`` constructors are deprecated and will be removed in a future version. The recommended way to represent these types of n-dimensional data are with the `xarray package <http://xarray.pydata.org/en/stable/>`__. pandas provides a :meth:`~Panel4D.to_xarray` method to automate this conversion (:issue:`13564`). - ``pandas.tseries.frequencies.get_standard_freq`` is deprecated. Use ``pandas.tseries.frequencies.to_offset(freq).rule_code`` instead (:issue:`13874`) - ``pandas.tseries.frequencies.to_offset``'s ``freqstr`` keyword is deprecated in favor of ``freq`` (:issue:`13874`) dataRST/pandas/v0.23.0.rst - ``pd.tseries.util.pivot_annual`` has been removed (deprecated since v0.19). Use ``pivot_table`` instead (:issue:`18370`) - ``pd.tseries.util.isleapyear`` has been removed (deprecated since v0.19). Use ``.is_leap_year`` property in Datetime-likes instead (:issue:`18370`) - ``pd.ordered_merge`` has been removed (deprecated since v0.19). Use ``pd.merge_ordered`` instead (:issue:`18459`) - The ``SparseList`` class has been removed (:issue:`14007`) - The ``pandas.io.wb`` and ``pandas.io.data`` stub modules have been removed (:issue:`13735`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tseries.util.isleapyear,is_leap_year,1,1,['pandas.tseries.frequencies.to_offset(freq).rule_code'] ['.is_leap_year'],dataRST/pandas/v0.19.0.rst - ``pd.tseries.util.isleapyear`` has been deprecated and will be removed in a subsequent release. Datetime-likes now have a ``.is_leap_year`` property (:issue:`13727`) - ``Panel4D`` and ``PanelND`` constructors are deprecated and will be removed in a future version. The recommended way to represent these types of n-dimensional data are with the `xarray package <http://xarray.pydata.org/en/stable/>`__. pandas provides a :meth:`~Panel4D.to_xarray` method to automate this conversion (:issue:`13564`). - ``pandas.tseries.frequencies.get_standard_freq`` is deprecated. Use ``pandas.tseries.frequencies.to_offset(freq).rule_code`` instead (:issue:`13874`) - ``pandas.tseries.frequencies.to_offset``'s ``freqstr`` keyword is deprecated in favor of ``freq`` (:issue:`13874`) - ``Categorical.from_array`` has been deprecated and will be removed in a future version (:issue:`13854`) dataRST/pandas/v0.23.0.rst - ``pd.tseries.util.isleapyear`` has been removed (deprecated since v0.19). Use ``.is_leap_year`` property in Datetime-likes instead (:issue:`18370`) - ``pd.ordered_merge`` has been removed (deprecated since v0.19). Use ``pd.merge_ordered`` instead (:issue:`18459`) - The ``SparseList`` class has been removed (:issue:`14007`) - The ``pandas.io.wb`` and ``pandas.io.data`` stub modules have been removed (:issue:`13735`) - ``Categorical.from_array`` has been removed (:issue:`13854`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.io.json.json_normalize,pandas.json_normalize,1,1,[' parameter in :func:`read_csv` where error is not raised correctly when passing a string. (:issue:`20529`) - Bug in :func:`HDFStore.keys` when reading a file with a soft link causes exception (:issue:`20523`) - Bug in :func:`HDFStore.select_column` where a key which is not a valid store raised an '] ['json_normalize'],"dataRST/pandas/v0.13.0.rst - :meth:`~pandas.io.json.json_normalize` is a new method to allow you to create a flat table from semi-structured JSON data. See :ref:`the docs<io.json_normalize>` (:issue:`1067`) - Added PySide support for the qtpandas DataFrameModel and DataFrameWidget. - Python csv parser now supports usecols (:issue:`4335`) - Frequencies gained several new offsets: dataRST/pandas/v0.20.0.rst - ``pandas.io.json.json_normalize()`` gained the option ``errors='ignore'|'raise'``; the default is ``errors='raise'`` which is backward compatible. (:issue:`14583`) - ``pandas.io.json.json_normalize()`` with an empty ``list`` will return an empty ``DataFrame`` (:issue:`15534`) - ``pandas.io.json.json_normalize()`` has gained a ``sep`` option that accepts ``str`` to separate joined fields; the default is "".""",which is backward compatible. (:issue:`14883`) - :meth:`MultiIndex.remove_unused_levels` has been added to facilitate :ref:`removing unused levels <advanced.shown_levels>`. (:issue:`15694`) - ``pd.read_csv()`` will now raise a ``ParserError`` error whenever any parsing error occurs (:issue:`15913`,":issue:`15925`) - ``pandas.io.json.json_normalize()`` with an empty ``list`` will return an empty ``DataFrame`` (:issue:`15534`) - ``pandas.io.json.json_normalize()`` has gained a ``sep`` option that accepts ``str`` to separate joined fields; the default is "".""",which is backward compatible. (:issue:`14883`) - :meth:`MultiIndex.remove_unused_levels` has been added to facilitate :ref:`removing unused levels <advanced.shown_levels>`. (:issue:`15694`) - ``pd.read_csv()`` will now raise a ``ParserError`` error whenever any parsing error occurs (:issue:`15913`,":issue:`15925`) - ``pd.read_csv()`` now supports the ``error_bad_lines`` and ``warn_bad_lines`` arguments for the Python parser (:issue:`15925`) - ``pandas.io.json.json_normalize()`` has gained a ``sep`` option that accepts ``str`` to separate joined fields; the default is "".""",which is backward compatible. (:issue:`14883`) - :meth:`MultiIndex.remove_unused_levels` has been added to facilitate :ref:`removing unused levels <advanced.shown_levels>`. (:issue:`15694`) - ``pd.read_csv()`` will now raise a ``ParserError`` error whenever any parsing error occurs (:issue:`15913`,:issue:`15925`) - ``pd.read_csv()`` now supports the ``error_bad_lines`` and ``warn_bad_lines`` arguments for the Python parser (:issue:`15925`) - The ``display.show_dimensions`` option can now also be used to specify dataRST/pandas/v0.21.1.rst - Bug in :func:`pandas.io.json.json_normalize` to avoid modification of ``meta`` (:issue:`18610`) - Bug in :func:`to_latex` where repeated MultiIndex values were not printed even though a higher level index differed from the previous row (:issue:`14484`) - Bug when reading NaN-only categorical columns in :class:`HDFStore` (:issue:`18413`) - Bug in :meth:`DataFrame.to_latex` with ``longtable=True`` where a latex multicolumn always spanned over three columns (:issue:`17959`) Plotting dataRST/pandas/v0.23.0.rst - Bug in :meth:`pandas.io.json.json_normalize` where sub-records are not properly normalized if any sub-records values are NoneType (:issue:`20030`) - Bug in ``usecols`` parameter in :func:`read_csv` where error is not raised correctly when passing a string. (:issue:`20529`) - Bug in :func:`HDFStore.keys` when reading a file with a soft link causes exception (:issue:`20523`) - Bug in :func:`HDFStore.select_column` where a key which is not a valid store raised an ``AttributeError`` instead of a ``KeyError`` (:issue:`17912`) Plotting dataRST/pandas/v0.23.1.rst - Fixed regression in :meth:`pandas.io.json.json_normalize` when called with ``None`` values in nested levels in JSON,and to not drop keys with value as ``None`` (:issue:`21158`,:issue:`21356`). - Bug in :meth:`~DataFrame.to_csv` causes encoding error when compression and encoding are specified (:issue:`21241`,:issue:`21118`) - Bug preventing pandas from being importable with -OO optimization (:issue:`21071`) - Bug in :meth:`Categorical.fillna` incorrectly raising a ``TypeError`` when ``value`` the individual categories are iterable and ``value`` is an iterable (:issue:`21097`,:issue:`19788`) dataRST/pandas/v0.24.0.rst - Bug in :func:`pandas.io.json.json_normalize` that caused it to raise ``TypeError`` when two consecutive elements of ``record_path`` are dicts (:issue:`22706`) - Bug in :meth:`DataFrame.to_stata`,:class:`pandas.io.stata.StataWriter` and :class:`pandas.io.stata.StataWriter117` where a exception would leave a partially written and invalid dta file (:issue:`23573`) - Bug in :meth:`DataFrame.to_stata` and :class:`pandas.io.stata.StataWriter117` that produced invalid files when using strLs with non-ASCII characters (:issue:`23573`) - Bug in :class:`HDFStore` that caused it to raise ``ValueError`` when reading a Dataframe in Python 3 from fixed format written in Python 2 (:issue:`24510`) - Bug in :func:`DataFrame.to_string()` and more generally in the floating ``repr`` formatter. Zeros were not trimmed if ``inf`` was present in a columns while it was the case with NA values. Zeros are now trimmed as in the presence of NA (:issue:`24861`). dataRST/pandas/v1.0.0.rst Usage of ``json_normalize`` as ``pandas.io.json.json_normalize`` is now deprecated and it is recommended to use ``json_normalize`` as :func:`pandas.json_normalize` instead (:issue:`27586`). - The ``numpy`` argument of :meth:`pandas.read_json` is deprecated (:issue:`28512`). - :meth:`DataFrame.to_stata`,:meth:`DataFrame.to_feather`,"and :meth:`DataFrame.to_parquet` argument ""fname"" is deprecated","use ""path"" instead (:issue:`23574`) - The deprecated internal attributes ``_start``",``_stop`` and ``_step`` of :class:`RangeIndex` now raise a ``FutureWarning`` instead of a ``DeprecationWarning`` (:issue:`26581`) - Bug in :func:`pandas.io.json.json_normalize` where a missing value in the location specified by ``record_path`` would raise a ``TypeError`` (:issue:`30148`) - :func:`read_excel` now accepts binary data (:issue:`15914`) - Bug in :meth:`read_csv` in which encoding handling was limited to just the string ``utf-16`` for the C engine (:issue:`24130`) Plotting ^^^^^^^^ dataRST/pandas/v1.1.0.rst - Bug in :func:`pandas.io.json.json_normalize` where location specified by ``record_path`` doesn't point to an array. (:issue:`26284`) - :func:`pandas.read_hdf` has a more explicit error message when loading an unsupported HDF file (:issue:`9539`) - Bug in :meth:`~DataFrame.read_feather` was raising an ``ArrowIOError`` when reading an s3 or http file path (:issue:`29055`) - Bug in :meth:`~DataFrame.to_excel` could not handle the column name ``render`` and was raising an ``KeyError`` (:issue:`34331`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.datetime,datetime,1,1,['datetime'],dataRST/pandas/v1.0.0.rst - The ``pandas.datetime`` class is now deprecated. Import from ``datetime`` instead (:issue:`30610`) - :class:`~DataFrame.diff` will raise a ``TypeError`` rather than implicitly losing the dtype of extension types in the future. Convert to the correct dtype before calling ``diff`` instead (:issue:`31025`) **Selecting Columns from a Grouped DataFrame** When selecting columns from a :class:`DataFrameGroupBy` object,passing individual keys (or a tuple of keys) inside single brackets is deprecated,a list of items should be used instead. (:issue:`23566`) For example:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.np,numpy,1,0,,dataRST/pandas/v1.0.0.rst - The ``pandas.np`` submodule is now deprecated. Import numpy directly instead (:issue:`30296`) - The ``pandas.datetime`` class is now deprecated. Import from ``datetime`` instead (:issue:`30610`) - :class:`~DataFrame.diff` will raise a ``TypeError`` rather than implicitly losing the dtype of extension types in the future. Convert to the correct dtype before calling ``diff`` instead (:issue:`31025`) **Selecting Columns from a Grouped DataFrame** When selecting columns from a :class:`DataFrameGroupBy` object,passing individual keys (or a tuple of keys) inside single brackets is deprecated,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.SparseArray,pandas.arrays.SparseArray,1,1,['pandas.arrays.SparseArray'],dataRST/pandas/v1.0.0.rst - ``pandas.SparseArray`` has been deprecated. Use ``pandas.arrays.SparseArray`` (:class:`arrays.SparseArray`) instead. (:issue:`30642`) - The parameter ``is_copy`` of :meth:`Series.take` and :meth:`DataFrame.take` has been deprecated and will be removed in a future version. (:issue:`27357`) - Support for multi-dimensional indexing (e.g. ``index[:,None]``) on a :class:`Index` is deprecated and will be removed in a future version,convert to a numpy array before indexing instead (:issue:`30588`) - The ``pandas.np`` submodule is now deprecated. Import numpy directly instead (:issue:`30296`) - The ``pandas.datetime`` class is now deprecated. Import from ``datetime`` instead (:issue:`30610`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.Categorical.take_nd,Categorical.take,1,0,['skipna'],dataRST/pandas/v1.0.0.rst - :meth:`Categorical.take_nd` and :meth:`CategoricalIndex.take_nd` are deprecated,use :meth:`Categorical.take` and :meth:`CategoricalIndex.take` instead (:issue:`27745`) - The parameter ``numeric_only`` of :meth:`Categorical.min` and :meth:`Categorical.max` is deprecated and replaced with ``skipna`` (:issue:`25303`) - The parameter ``label`` in :func:`lreshape` has been deprecated and will be removed in a future version (:issue:`29742`) - ``pandas.core.index`` has been deprecated and will be removed in a future version,the public classes are available in the top-level namespace (:issue:`19711`) - :func:`pandas.json_normalize` is now exposed in the top-level namespace.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.RangeIndex._start,pandas.RangeIndex.start,1,1,['NaT'] ['~RangeIndex.start'] ['pandas.testing'] ['Series(data).dt.tz_localize(None)'] ['DataFrame'],dataRST/pandas/v0.14.0.rst - Add ``is_month_start``,``is_month_end``,``is_quarter_start``,``is_quarter_end``,``is_year_start``,``is_year_end`` accessors for ``DateTimeIndex`` / ``Timestamp`` which return a boolean array of whether the timestamp(s) are at the start/end of the month/quarter/year defined by the frequency of the ``DateTimeIndex`` / ``Timestamp`` (:issue:`4565`,:issue:`6998`) - Local variable usage has changed in :func:`pandas.eval`/:meth:`DataFrame.eval`/:meth:`DataFrame.query` (:issue:`5987`). For the :class:`~pandas.DataFrame` methods,two things have changed dataRST/pandas/v0.20.0.rst - ``NaT`` will now correctly report ``False`` for datetimelike boolean operations such as ``is_month_start`` (:issue:`15781`) - ``NaT`` will now correctly return ``np.nan`` for ``Timedelta`` and ``Period`` accessors such as ``days`` and ``quarter`` (:issue:`15782`) - ``NaT`` will now returns ``NaT`` for ``tz_localize`` and ``tz_convert`` methods (:issue:`15830`) - ``DataFrame`` and ``Panel`` constructors with invalid input will now raise ``ValueError`` rather than ``PandasError``,if called with scalar inputs and not axes (:issue:`15541`) dataRST/pandas/v0.25.0.rst For `optional libraries <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. +-----------------+-----------------+ | Package | Minimum Version | - The internal attributes ``_start``,``_stop`` and ``_step`` attributes of :class:`RangeIndex` have been deprecated. Use the public attributes :attr:`~RangeIndex.start`,:attr:`~RangeIndex.stop` and :attr:`~RangeIndex.step` instead (:issue:`26581`). - The :meth:`Series.ftype`,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. Instead,use :meth:`Series.dtype` and :meth:`DataFrame.dtypes` (:issue:`26705`). - The :meth:`Series.get_values`,:meth:`DataFrame.get_values`,:meth:`Index.get_values`,dataRST/pandas/v1.0.0.rst For `optional libraries <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. +-----------------+-----------------+---------+ | Package | Minimum Version | Changed | - The deprecated internal attributes ``_start``,``_stop`` and ``_step`` of :class:`RangeIndex` now raise a ``FutureWarning`` instead of a ``DeprecationWarning`` (:issue:`26581`) - The ``pandas.util.testing`` module has been deprecated. Use the public API in ``pandas.testing`` documented at :ref:`api.general.testing` (:issue:`16232`). - ``pandas.SparseArray`` has been deprecated. Use ``pandas.arrays.SparseArray`` (:class:`arrays.SparseArray`) instead. (:issue:`30642`) - The parameter ``is_copy`` of :meth:`Series.take` and :meth:`DataFrame.take` has been deprecated and will be removed in a future version. (:issue:`27357`) - Support for multi-dimensional indexing (e.g. ``index[:,None]``) on a :class:`Index` is deprecated and will be removed in a future version,convert to a numpy array before indexing instead (:issue:`30588`) dataRST/pandas/v1.1.0.rst For `optional libraries <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. +-----------------+-----------------+---------+ | Package | Minimum Version | Changed | dataRST/pandas/v1.2.0.rst For `optional libraries <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. +-----------------+-----------------+---------+ | Package | Minimum Version | Changed | dataRST/pandas/v1.3.0.rst For `optional libraries <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. +-----------------+-----------------+---------+ | Package | Minimum Version | Changed | - Deprecated the :attr:`Timestamp.freq` attribute. For the properties that use it (``is_month_start``,``is_month_end``,``is_quarter_start``,``is_quarter_end``,``is_year_start``,``is_year_end``),when you have a ``freq``,use e.g. ``freq.is_month_start(ts)`` (:issue:`15146`) - Deprecated construction of :class:`Series` or :class:`DataFrame` with ``DatetimeTZDtype`` data and ``datetime64[ns]`` dtype. Use ``Series(data).dt.tz_localize(None)`` instead (:issue:`41555`,:issue:`33401`) - Deprecated behavior of :class:`Series` construction with large-integer values and small-integer dtype silently overflowing; use ``Series(data).astype(dtype)`` instead (:issue:`41734`) - Deprecated behavior of :class:`DataFrame` construction with floating data and integer dtype casting even when lossy; in a future version this will remain floating,matching :class:`Series` behavior (:issue:`41770`) - Deprecated inference of ``timedelta64[ns]``,``datetime64[ns]``,or ``DatetimeTZDtype`` dtypes in :class:`Series` construction when data containing strings is passed and no ``dtype`` is passed (:issue:`33558`) dataRST/pandas/v1.4.0.rst <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. - Deprecated the ``include_start`` and ``include_end`` arguments in :meth:`DataFrame.between_time`; in a future version passing ``include_start`` or ``include_end`` will raise (:issue:`40245`) - Deprecated the ``squeeze`` argument to :meth:`read_csv`,:meth:`read_table`,"and :meth:`read_excel`. Users should squeeze the :class:`DataFrame` afterwards with ``.squeeze(""columns"")`` instead (:issue:`43242`) - Deprecated the ``index`` argument to :class:`SparseArray` construction (:issue:`23089`) - Deprecated the ``closed`` argument in :meth:`date_range` and :meth:`bdate_range` in favor of ``inclusive`` argument; In a future version passing ``closed`` will raise (:issue:`40245`) - Deprecated :meth:`.Rolling.validate`",:meth:`.Expanding.validate`,and :meth:`.ExponentialMovingWindow.validate` (:issue:`43665`) dataRST/pandas/v1.5.0.rst For `optional libraries <https://pandas.pydata.org/docs/getting_started/install.html>`_ the general recommendation is to use the latest version. The following table lists the lowest version per library that is currently being tested throughout the development of pandas. Optional libraries below the lowest tested version may still work,but are not considered supported. +-----------------+-----------------+---------+ | Package | Minimum Version | Changed |,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.RangeIndex._stop,pandas.RangeIndex.stop,1,0,['~RangeIndex.start'] ['pandas.testing'],dataRST/pandas/v0.25.0.rst - The internal attributes ``_start``,``_stop`` and ``_step`` attributes of :class:`RangeIndex` have been deprecated. Use the public attributes :attr:`~RangeIndex.start`,:attr:`~RangeIndex.stop` and :attr:`~RangeIndex.step` instead (:issue:`26581`). - The :meth:`Series.ftype`,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. Instead,use :meth:`Series.dtype` and :meth:`DataFrame.dtypes` (:issue:`26705`). - The :meth:`Series.get_values`,:meth:`DataFrame.get_values`,:meth:`Index.get_values`,dataRST/pandas/v1.0.0.rst - The deprecated internal attributes ``_start``,``_stop`` and ``_step`` of :class:`RangeIndex` now raise a ``FutureWarning`` instead of a ``DeprecationWarning`` (:issue:`26581`) - The ``pandas.util.testing`` module has been deprecated. Use the public API in ``pandas.testing`` documented at :ref:`api.general.testing` (:issue:`16232`). - ``pandas.SparseArray`` has been deprecated. Use ``pandas.arrays.SparseArray`` (:class:`arrays.SparseArray`) instead. (:issue:`30642`) - The parameter ``is_copy`` of :meth:`Series.take` and :meth:`DataFrame.take` has been deprecated and will be removed in a future version. (:issue:`27357`) - Support for multi-dimensional indexing (e.g. ``index[:,None]``) on a :class:`Index` is deprecated and will be removed in a future version,convert to a numpy array before indexing instead (:issue:`30588`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.RangeIndex._step,pandas.RangeIndex.step,1,0,['~RangeIndex.start'] ['pandas.testing'],dataRST/pandas/v0.25.0.rst - The internal attributes ``_start``,``_stop`` and ``_step`` attributes of :class:`RangeIndex` have been deprecated. Use the public attributes :attr:`~RangeIndex.start`,:attr:`~RangeIndex.stop` and :attr:`~RangeIndex.step` instead (:issue:`26581`). - The :meth:`Series.ftype`,:meth:`Series.ftypes` and :meth:`DataFrame.ftypes` methods are deprecated and will be removed in a future version. Instead,use :meth:`Series.dtype` and :meth:`DataFrame.dtypes` (:issue:`26705`). - The :meth:`Series.get_values`,:meth:`DataFrame.get_values`,:meth:`Index.get_values`,dataRST/pandas/v1.0.0.rst - The deprecated internal attributes ``_start``,``_stop`` and ``_step`` of :class:`RangeIndex` now raise a ``FutureWarning`` instead of a ``DeprecationWarning`` (:issue:`26581`) - The ``pandas.util.testing`` module has been deprecated. Use the public API in ``pandas.testing`` documented at :ref:`api.general.testing` (:issue:`16232`). - ``pandas.SparseArray`` has been deprecated. Use ``pandas.arrays.SparseArray`` (:class:`arrays.SparseArray`) instead. (:issue:`30642`) - The parameter ``is_copy`` of :meth:`Series.take` and :meth:`DataFrame.take` has been deprecated and will be removed in a future version. (:issue:`27357`) - Support for multi-dimensional indexing (e.g. ``index[:,None]``) on a :class:`Index` is deprecated and will be removed in a future version,convert to a numpy array before indexing instead (:issue:`30588`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
pandas.tseries.frequencies.get_offset,pandas.tseries.frequencies.to_offse,1,0,['skipna'],dataRST/pandas/v1.0.0.rst - ``pandas.tseries.frequencies.get_offset`` is deprecated and will be removed in a future version,use ``pandas.tseries.frequencies.to_offset`` instead (:issue:`4205`) - :meth:`Categorical.take_nd` and :meth:`CategoricalIndex.take_nd` are deprecated,use :meth:`Categorical.take` and :meth:`CategoricalIndex.take` instead (:issue:`27745`) - The parameter ``numeric_only`` of :meth:`Categorical.min` and :meth:`Categorical.max` is deprecated and replaced with ``skipna`` (:issue:`25303`) - The parameter ``label`` in :func:`lreshape` has been deprecated and will be removed in a future version (:issue:`29742`) - ``pandas.core.index`` has been deprecated and will be removed in a future version,the public classes are available in the top-level namespace (:issue:`19711`),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,