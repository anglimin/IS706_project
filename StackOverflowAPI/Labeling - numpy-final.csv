DEPRECATED_API,KNOWN_REPLACEMENT,AVAILABLE_IN_REL_NOTES,REPLACEMENT_FOUND,CORRECT replacement ?,PROPOSED_REPLACEMENT,EXTRACT_FROM_DOCUMENTATION,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.distutils.exec_command,subprocess.Popen,1,1,1,['tempfile.mkstemp'],dataRST/numpy/1.17.0-notes.rst Deprecate `numpy.distutils.exec_command` and ``temp_file_name`` --------------------------------------------------------------- The internal use of these functions has been refactored and there are better alternatives. Replace ``exec_command`` with `subprocess.Popen` and `temp_file_name <numpy.distutils.exec_command>` with `tempfile.mkstemp`. `temp_file_name <numpy.distutils.exec_command>` with `tempfile.mkstemp`. Writeable flag of C-API wrapped arrays -------------------------------------- When an array is created from the C-API to wrap a pointer to data,the only indication we have of the read-write nature of the data is the ``writeable``,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.alen,numpy.len,1,1,1,['len'] ['len'],dataRST/numpy/1.18.0-notes.rst Deprecate ``np.alen`` --------------------- ``np.alen`` was deprecated. Use ``len`` instead. (`gh-14181 <https://github.com/numpy/numpy/pull/14181>`__) Deprecate the financial functions ``np.alen`` was deprecated. Use ``len`` instead. (`gh-14181 <https://github.com/numpy/numpy/pull/14181>`__) Deprecate the financial functions --------------------------------- In accordance with,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.core.typeNA,numpy.sctypeDict,1,1,1,['numpy.sctypeDict'],dataRST/numpy/1.16.0-notes.rst * The type dictionaries `numpy.core.typeNA` and `numpy.core.sctypeNA` are deprecated. They were buggy and not documented and will be removed in the 1.18 release. Use`numpy.sctypeDict` instead. * The `numpy.asscalar` function is deprecated. It is an alias to the more powerful `numpy.ndarray.item`,not tested,and fails for scalars.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.core.sctypeNA,numpy.sctypeDict,1,1,1,['numpy.sctypeDict'],dataRST/numpy/1.16.0-notes.rst * The type dictionaries `numpy.core.typeNA` and `numpy.core.sctypeNA` are deprecated. They were buggy and not documented and will be removed in the 1.18 release. Use`numpy.sctypeDict` instead. * The `numpy.asscalar` function is deprecated. It is an alias to the more powerful `numpy.ndarray.item`,not tested,and fails for scalars.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.testing.utils,numpy.testing,0,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.testing.utils` * `numpy.testing.decorators` * `numpy.testing.nosetester` * `numpy.testing.noseclasses` * `numpy.core.umath_tests`,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.testing.decorators,numpy.testing,0,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.testing.decorators` * `numpy.testing.nosetester` * `numpy.testing.noseclasses` * `numpy.core.umath_tests` * Giving a generator to `numpy.sum` is now deprecated. This was undocumented,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.testing.nosetester,numpy.testing,0,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.testing.nosetester` * `numpy.testing.noseclasses` * `numpy.core.umath_tests` * Giving a generator to `numpy.sum` is now deprecated. This was undocumented behavior,but worked. Previously,it would calculate the sum of the generator,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.testing.noseclasses,numpy.testing,0,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.testing.noseclasses` * `numpy.core.umath_tests` * Giving a generator to `numpy.sum` is now deprecated. This was undocumented behavior,but worked. Previously,it would calculate the sum of the generator expression. In the future,it might return a different result. Use,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.FloatFormat,numpy.FloatingFormat,1,1,1,['FloatingFormat'] ['FloatingFormat'],dataRST/numpy/1.14.0-notes.rst The ``FloatFormat`` and ``LongFloatFormat`` classes are deprecated and should both be replaced by ``FloatingFormat``. Similarly ``ComplexFormat`` and ``LongComplexFormat`` should be replaced by ``ComplexFloatingFormat``. ``void`` datatype elements are now printed in hex notation ---------------------------------------------------------- dataRST/numpy/1.18.0-notes.rst * ``arrayprint.FloatFormat``,``arrayprint.LongFloatFormat`` has been removed,use ``FloatingFormat`` instead * ``arrayprint.ComplexFormat``,``arrayprint.LongComplexFormat`` has been removed,use ``ComplexFloatingFormat`` instead * ``arrayprint.StructureFormat`` has been removed,use ``StructureVoidFormat``,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.LongFloatFormat,numpy.FloatingFormat,1,1,1,['FloatingFormat'] ['FloatingFormat'],dataRST/numpy/1.14.0-notes.rst The ``FloatFormat`` and ``LongFloatFormat`` classes are deprecated and should both be replaced by ``FloatingFormat``. Similarly ``ComplexFormat`` and ``LongComplexFormat`` should be replaced by ``ComplexFloatingFormat``. ``void`` datatype elements are now printed in hex notation ---------------------------------------------------------- dataRST/numpy/1.18.0-notes.rst * ``arrayprint.FloatFormat``,``arrayprint.LongFloatFormat`` has been removed,use ``FloatingFormat`` instead * ``arrayprint.ComplexFormat``,``arrayprint.LongComplexFormat`` has been removed,use ``ComplexFloatingFormat`` instead * ``arrayprint.StructureFormat`` has been removed,use ``StructureVoidFormat``,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.unique1d,numpy.unique,0,0,0,,dataRST/numpy/1.6.0-notes.rst The deprecated functions ``numpy.unique1d``,``numpy.setmember1d``,``numpy.intersect1d_nu`` and ``numpy.lib.ufunclike.log2`` were removed. ``numpy.ma`` ------------ Several deprecated items were removed from the ``numpy.ma`` module::,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.intersect1d_nu,numpy.intersect1d,0,0,0,,"dataRST/numpy/1.6.0-notes.rst ``numpy.intersect1d_nu`` and ``numpy.lib.ufunclike.log2`` were removed. ``numpy.ma`` ------------ Several deprecated items were removed from the ``numpy.ma`` module:: * ``numpy.ma.MaskedArray`` ""raw_data"" method",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.setmember1d,numpy.in1d,0,0,0,,dataRST/numpy/1.6.0-notes.rst The deprecated functions ``numpy.unique1d``,``numpy.setmember1d``,``numpy.intersect1d_nu`` and ``numpy.lib.ufunclike.log2`` were removed. ``numpy.ma`` ------------ Several deprecated items were removed from the ``numpy.ma`` module::,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.asscalar,numpy.ndarray.item,1,1,1,['numpy.ndarray.item'],dataRST/numpy/1.16.0-notes.rst * The `numpy.asscalar` function is deprecated. It is an alias to the more powerful `numpy.ndarray.item`,not tested,and fails for scalars. * The `numpy.set_array_ops` and `numpy.get_array_ops` functions are deprecated. As part of `NEP 15`,they have been deprecated along with the C-API functions :c:func:`PyArray_SetNumericOps` and :c:func:`PyArray_GetNumericOps`. Users,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.Masked_Array.mini,np.ma.minimum.reduce,1,1,1,['np.ma.minimum.reduce'],dataRST/numpy/1.10.0-notes.rst *np.isclose* properly handles minimal values of integer dtypes -------------------------------------------------------------- In order to properly handle minimal values of integer types,*np.isclose* will now cast to the float dtype during comparisons. This aligns its behavior with what was provided by *np.allclose*. In order to properly handle minimal values of integer types,*np.isclose* will now cast to the float dtype during comparisons. This aligns its behavior with what was provided by *np.allclose*. *np.allclose* uses *np.isclose* internally. ------------------------------------------- dataRST/numpy/1.11.0-notes.rst and the failure of abs with signed integers of minimum value,e.g.,int8(-128). For consistency,floats are used even where an integer might work. Deprecations ============ Views of arrays in Fortran order dataRST/numpy/1.12.0-notes.rst using the minimal number of bits needed for the form in question. Such behavior is now considered unsafe from a user perspective and will raise an error in the future. Future Changes ============== computation is done in a minimum precision of float64. There was a long discussion on the numpy mailing list of how to treat integers to negative integer powers and a popular proposal was that the ``__pow__`` operator should always return results of at least float64 precision. The ``float_power`` function implements that option. Note that it does not support object arrays. dataRST/numpy/1.13.0-notes.rst * ``np.ma.argsort``,``np.ma.minimum.reduce``,and ``np.ma.maximum.reduce`` should be called with an explicit `axis` argument when applied to arrays with more than 2 dimensions,as the default value of this argument (``None``) is inconsistent with the rest of numpy (``-1``,``0``,and ``0``,respectively). * ``np.ma.MaskedArray.mini`` is deprecated,as it almost duplicates the * ``np.ma.MaskedArray.mini`` is deprecated,as it almost duplicates the functionality of ``np.MaskedArray.min``. Exactly equivalent behaviour can be obtained with ``np.ma.minimum.reduce``. * The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` is deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt can be obtained with ``np.ma.minimum.reduce``. * The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` is deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt ``np.ma.minimum.reduce(x)``,which is consistent with how this would be done with ``np.minimum``. * The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` is deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt ``np.ma.minimum.reduce(x)``,which is consistent with how this would be done with ``np.minimum``. * Calling ``ndarray.conjugate`` on non-numeric dtypes is deprecated (it deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt ``np.ma.minimum.reduce(x)``,which is consistent with how this would be done with ``np.minimum``. * Calling ``ndarray.conjugate`` on non-numeric dtypes is deprecated (it should match the behavior of ``np.conjugate``,which throws an error). ``np.ma.minimum.reduce(x)``,which is consistent with how this would be done with ``np.minimum``. * Calling ``ndarray.conjugate`` on non-numeric dtypes is deprecated (it should match the behavior of ``np.conjugate``,which throws an error). * Calling ``expand_dims`` when the ``axis`` keyword does not satisfy with ``np.minimum``. * Calling ``ndarray.conjugate`` on non-numeric dtypes is deprecated (it should match the behavior of ``np.conjugate``,which throws an error). * Calling ``expand_dims`` when the ``axis`` keyword does not satisfy ``-a.ndim - 1 <= axis <= a.ndim``,where ``a`` is the array being reshaped,NumPy comes bundled with a minimal implementation of lapack for systems without a lapack library installed,under the name of ``lapack_lite``. This has been upgraded from LAPACK 3.0.0 (June 30,1999) to LAPACK 3.2.2 (June 30,2010). See the `LAPACK changelogs`_ for details on the all the changes this entails. While no new features are exposed through ``numpy``,this fixes some bugs dataRST/numpy/1.14.0-notes.rst ``np.ma.minimum_fill_value`` and ``np.ma.maximum_fill_value`` would return a tuple of the fields. Instead,all three methods return a structured ``np.void`` object,which is what you would already find in the ``.fill_value`` attribute. Additionally,the dtype guessing now matches that of ``np.array`` - so when passing a python scalar ``x``,``maximum_fill_value(x)`` is always the same as dataRST/numpy/1.15.1-notes.rst * `#11661 <https://github.com/numpy/numpy/pull/11661>`__: BUG: Warn on Nan in minimum,maximum for scalars * `#11665 <https://github.com/numpy/numpy/pull/11665>`__: BUG: cython sometimes emits invalid gcc attribute * `#11682 <https://github.com/numpy/numpy/pull/11682>`__: BUG: Fix regression in void_getitem * `#11698 <https://github.com/numpy/numpy/pull/11698>`__: BUG: Make matrix_power again work for object arrays. * `#11700 <https://github.com/numpy/numpy/pull/11700>`__: BUG: Add missing PyErr_NoMemory after failing malloc dataRST/numpy/1.16.0-notes.rst .. _ISE: https://en.wikipedia.org/wiki/Histogram#Minimizing_cross-validation_estimated_squared_error ``max_rows`` keyword added for ``np.loadtxt`` --------------------------------------------- New keyword ``max_rows`` in `numpy.loadtxt` sets the maximum rows of the content to be read after ``skiprows``,as in `numpy.genfromtxt`. ``maximum`` and ``minimum`` no longer emit warnings --------------------------------------------------- As part of code introduced in 1.10,``float32`` and ``float64`` set invalid float status when a Nan is encountered in `numpy.maximum` and `numpy.minimum`,when using SSE2 semantics. This caused a `RuntimeWarning` to sometimes be float status when a Nan is encountered in `numpy.maximum` and `numpy.minimum`,when using SSE2 semantics. This caused a `RuntimeWarning` to sometimes be emitted. In 1.15 we fixed the inconsistencies which caused the warnings to become more conspicuous. Now no warnings will be emitted. Umath and multiarray c-extension modules merged into a single module dataRST/numpy/1.18.0-notes.rst ``numpy.minimum`` respectively will require adjustment. This also affects ``numpy.nanmax`` and ``numpy.nanmin``. (`gh-14841 <https://github.com/numpy/numpy/pull/14841>`__) Moved modules in ``numpy.random`` --------------------------------- determining whether to use the 32-bit path or the full 64-bit path that incorrectly redirected random integer generation with a high - low range of ``2**32`` to the 64-bit generator. (`gh-14501 <https://github.com/numpy/numpy/pull/14501>`__) Add complex number support for ``numpy.fromfile`` dataRST/numpy/1.19.2-notes.rst * `#16998 <https://github.com/numpy/numpy/pull/16998>`__: MAINT: Configure hypothesis in ``np.test()`` for determinism,... * `#17000 <https://github.com/numpy/numpy/pull/17000>`__: BLD: pin setuptools < 49.2.0 * `#17015 <https://github.com/numpy/numpy/pull/17015>`__: ENH: Add NumPy declarations to be used by Cython 3.0+ * `#17125 <https://github.com/numpy/numpy/pull/17125>`__: BUG: Remove non-threadsafe sigint handling from fft calculation * `#17243 <https://github.com/numpy/numpy/pull/17243>`__: BUG: core: fix ilp64 blas dot/vdot/... for strides > int32 max dataRST/numpy/1.20.0-notes.rst `~numpy.distutils` allows negation of libraries when determining BLAS/LAPACK libraries. This may be used to remove an item from the library resolution phase,i.e. to disallow NetLIB libraries one could do: .. code:: bash - ``--cpu-baseline`` to specify the minimal set of required optimizations,default value is ``min`` which provides the minimum CPU features that can safely run on a wide range of users platforms. - ``--cpu-dispatch`` to specify the dispatched set of additional optimizations,default value is ``min`` which provides the minimum CPU features that can safely run on a wide range of users platforms. - ``--cpu-dispatch`` to specify the dispatched set of additional optimizations,default value is ``max -xop -fma4`` which enables - ``__cpu_baseline__`` a list contains the minimal set of required optimizations that supported by the compiler and platform according to the specified values to command argument '--cpu-baseline'. - ``__cpu_dispatch__`` a list contains the dispatched set of additional optimizations that supported by the compiler and platform according to the dataRST/numpy/1.22.0-notes.rst which is also minimal,meaning that only those functions and behaviors that are required by the standard are implemented (see the NEP for more info). Libraries wishing to make use of the array API standard are encouraged to use ``numpy.array_api`` to check that they are only using functionality that is guaranteed to be present in standard conforming implementations. dataRST/numpy/1.3.0-notes.rst The maximum/minimum ufuncs now reliably propagate nans. If one of the arguments is a nan,then nan is returned. This affects np.min/np.max,amin/amax and the array methods max/min. New ufuncs fmax and fmin have been added to deal with non-propagating nans. Nan handling in sign #. fmin - same as minimum for integer types and non-nan floats. Returns the non-nan argument if one argument is nan and returns nan if both arguments are nan. #. deg2rad - converts degrees to radians,same as the radians ufunc. #. rad2deg - converts radians to degrees,same as the degrees ufunc. dataRST/numpy/1.7.0-notes.rst ``mean``,``median``,``minimum``,``reflect``,``symmetric``,``wrap``,and ``<function>``. New argument to searchsorted ---------------------------- The function searchsorted now accepts a 'sorter' argument that is a dataRST/numpy/1.8.0-notes.rst * `minimum/maximum` * `absolute` * Bool: * `logical_or` * `logical_and`,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.loads,pickle.loads,1,1,1,['pickle.loads'],dataRST/numpy/1.15.0-notes.rst * `numpy.loads` * `numpy.core.numeric.load` * `numpy.core.numeric.loads` * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on dataRST/numpy/1.22.0-notes.rst ``numpy.loads`` was deprecated in v1.15,with the recommendation that users use ``pickle.loads`` instead. ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate value for the ``usemask`` parameter. (`gh-19615 <https://github.com/numpy/numpy/pull/19615>`__),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.core.numeric.load,pickle.load,1,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.core.numeric.load` * `numpy.core.numeric.loads` * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * `numpy.core.numeric.loads` * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.core.numeric.loads,pickle.loads,1,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.core.numeric.loads` * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.loads,pickle.loads,1,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means that the index list in ``ind = [slice(None),0]; arr[ind]`` should be changed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.dumps,pickle.dumps,1,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means that the index list in ``ind = [slice(None),0]; arr[ind]`` should be changed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.load,pickle.load,1,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means that the index list in ``ind = [slice(None),0]; arr[ind]`` should be changed * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means that the index list in ``ind = [slice(None),0]; arr[ind]`` should be changed to a tuple,e.g.,``ind = [slice(None),0]; arr[tuple(ind)]`` or,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.dump,pickle.dump,1,0,0,,dataRST/numpy/1.15.0-notes.rst * `numpy.ma.loads`,`numpy.ma.dumps` * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means that the index list in ``ind = [slice(None),0]; arr[ind]`` should be changed * `numpy.ma.load`,`numpy.ma.dump` - these functions already failed on python 3 when called with a string. * Multidimensional indexing with anything but a tuple is deprecated. This means that the index list in ``ind = [slice(None),0]; arr[ind]`` should be changed to a tuple,e.g.,``ind = [slice(None),0]; arr[tuple(ind)]`` or,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.array.mini,np.ma.minimum.reduce,1,1,1,['np.ma.minimum.reduce'],dataRST/numpy/1.13.0-notes.rst * ``np.ma.MaskedArray.mini`` is deprecated,as it almost duplicates the functionality of ``np.MaskedArray.min``. Exactly equivalent behaviour can be obtained with ``np.ma.minimum.reduce``. * The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` is deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.distutils.temp_file_name,tempfile.mkstemp,1,1,1,['tempfile.mkstemp'],dataRST/numpy/1.17.0-notes.rst Deprecate `numpy.distutils.exec_command` and ``temp_file_name`` --------------------------------------------------------------- The internal use of these functions has been refactored and there are better alternatives. Replace ``exec_command`` with `subprocess.Popen` and `temp_file_name <numpy.distutils.exec_command>` with `tempfile.mkstemp`. `temp_file_name <numpy.distutils.exec_command>` with `tempfile.mkstemp`. Writeable flag of C-API wrapped arrays -------------------------------------- When an array is created from the C-API to wrap a pointer to data,the only indication we have of the read-write nature of the data is the ``writeable``,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.lib.npyio.NpzFile.iteritem,numpy.lib.npyio.NpzFile.item,0,0,0,,dataRST/numpy/1.15.0-notes.rst For python 3,this means that ``.iteritems()``,``.iterkeys()`` have been deprecated,and ``.keys()`` and ``.items()`` now return views and not lists. This is consistent with how the builtin ``dict`` type changed between python 2 and python 3. Under certain conditions,``nditer`` must be used in a context manager,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.lib.npyio.NpzFile.iterkeys,numpy.lib.npyio.NpzFile.iterkeys,0,0,0,,dataRST/numpy/1.15.0-notes.rst For python 3,this means that ``.iteritems()``,``.iterkeys()`` have been deprecated,and ``.keys()`` and ``.items()`` now return views and not lists. This is consistent with how the builtin ``dict`` type changed between python 2 and python 3. Under certain conditions,``nditer`` must be used in a context manager,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ndfromtxt,numpy.genfromtxt,1,1,1,['pickle.loads'] ['numpy.genfromtxt'],dataRST/numpy/1.22.0-notes.rst Expired deprecations for ``loads``,``ndfromtxt``,and ``mafromtxt`` in npyio ----------------------------------------------------------------------------- ``numpy.loads`` was deprecated in v1.15,with the recommendation that users use ``pickle.loads`` instead. ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate ``pickle.loads`` instead. ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate value for the ``usemask`` parameter. (`gh-19615 <https://github.com/numpy/numpy/pull/19615>`__) Deprecations,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.mafromtxt,numpy.genfromtxt,1,1,1,['pickle.loads'] ['numpy.genfromtxt'],dataRST/numpy/1.22.0-notes.rst Expired deprecations for ``loads``,``ndfromtxt``,and ``mafromtxt`` in npyio ----------------------------------------------------------------------------- ``numpy.loads`` was deprecated in v1.15,with the recommendation that users use ``pickle.loads`` instead. ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate ``pickle.loads`` instead. ``ndfromtxt`` and ``mafromtxt`` were both deprecated in v1.17 - users should use ``numpy.genfromtxt`` instead with the appropriate value for the ``usemask`` parameter. (`gh-19615 <https://github.com/numpy/numpy/pull/19615>`__) Deprecations,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.asscalar,numpy.ndarray.item,0,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.fv,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['numpy-financial <https://pypi.org/project/numpy-financial>'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) dataRST/numpy/1.20.0-notes.rst from NumPy 1.20. The functions that have been removed are ``fv``,``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.pmt,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['numpy-financial <https://pypi.org/project/numpy-financial>'] ['axis'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) ``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) The ``axis`` argument to ``numpy.ma.mask_cols`` and ``numpy.ma.mask_row`` is deprecated dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.nper,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['numpy-financial <https://pypi.org/project/numpy-financial>'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.10.0-notes.rst new `nanmedian` or `nanpercentile` functions. Functions available from numpy.ma.testutils have changed -------------------------------------------------------- All functions from numpy.testing were once available from numpy.ma.testutils but not all of them were redefined to work with masked dataRST/numpy/1.15.0-notes.rst * `numpy.nanquantile` function,an interface to ``nanpercentile`` without factors of 100 * `numpy.printoptions`,a context manager that sets print options temporarily for the scope of the ``with`` block:: >>> with np.printoptions(precision=2): Like ``np.percentile`` and ``np.nanpercentile``,but takes quantiles in [0,1] rather than percentiles in [0,100]. ``np.percentile`` is now a thin wrapper around ``np.quantile`` with the extra step of dividing by 100. Build system ------------ dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) dataRST/numpy/1.9.0-notes.rst * Addition of `nanmedian` and `nanpercentile` rounds out the nanfunction set. Dropped Support =============== * The oldnumeric and numarray modules have been removed. * The doc/pyrex and doc/cython directories have been removed. The ``np.nanmedian`` and ``np.nanpercentile`` functions behave like the median and percentile functions except that NaNs are ignored. NumpyVersion class added ------------------------ The class may be imported from numpy.lib and can be used for version,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ipmt,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['numpy-financial <https://pypi.org/project/numpy-financial>'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ppmt,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['axis'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.18.0-notes.rst ``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) The ``axis`` argument to ``numpy.ma.mask_cols`` and ``numpy.ma.mask_row`` is deprecated dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.pv,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['axis'] ['numpy_financial <https://pypi.org/project/numpy-financial>'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.16.0-notes.rst These are in addition to our continued use of travis,appveyor (for wheels) and LGTM Changes ======= Comparison ufuncs will now error rather than return NotImplemented dataRST/numpy/1.18.0-notes.rst ``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) The ``axis`` argument to ``numpy.ma.mask_cols`` and ``numpy.ma.mask_row`` is deprecated dataRST/numpy/1.18.3-notes.rst * `#15954 <https://github.com/numpy/numpy/pull/15954>`__: BUG: Check that `pvals` is 1D in `_generator.multinomial`. * `#16017 <https://github.com/numpy/numpy/pull/16017>`__: BUG: Alpha parameter must be 1D in `generator.dirichlet` dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) ``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) Compatibility notes dataRST/numpy/1.21.5-notes.rst * `#20462 <https://github.com/numpy/numpy/pull/20462>`__: BUG: Fix float16 einsum fastpaths using wrong tempvar * `#20463 <https://github.com/numpy/numpy/pull/20463>`__: BUG,DIST: Print os error message when the executable not exist * `#20464 <https://github.com/numpy/numpy/pull/20464>`__: BLD: Verify the ability to compile C++ sources before initiating... * `#20465 <https://github.com/numpy/numpy/pull/20465>`__: BUG: Force ``npymath` ` to respect ``npy_longdouble`` * `#20466 <https://github.com/numpy/numpy/pull/20466>`__: BUG: Fix failure to create aligned,empty structured dtype dataRST/numpy/1.8.0-notes.rst Fix to financial.npv -------------------- The npv function had a bug. Contrary to what the documentation stated,it summed from indexes ``1`` to ``M`` instead of from ``0`` to ``M - 1``. The fix changes the returned value. The mirr function called the npv function,The npv function had a bug. Contrary to what the documentation stated,it summed from indexes ``1`` to ``M`` instead of from ``0`` to ``M - 1``. The fix changes the returned value. The mirr function called the npv function,but worked around the problem,so that was also fixed and the return value of the mirr function remains unchanged. fix changes the returned value. The mirr function called the npv function,but worked around the problem,so that was also fixed and the return value of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers -------------------------------------------,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.rate,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['np.broadcast'] ['axis'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.10.0-notes.rst object arrays that were generated on Python 2. MaskedArray support for more complicated base classes ----------------------------------------------------- Built-in assumptions that the baseclass behaved like a plain array are being removed. In particular,setting and getting elements and ranges will respect The cblas versions of dot,inner,and vdot have been integrated into the multiarray module. In particular,vdot is now a multiarray function,which it was not before. stricter check of gufunc signature compliance --------------------------------------------- dataRST/numpy/1.10.1-notes.rst * Change Intel compiler options so that code will also be generated to support systems without SSE4.2. * Some _config test functions needed an explicit integer return in order to avoid the openSUSE rpmlinter erring out. * We ran into a problem with pipy not allowing reuse of filenames and a dataRST/numpy/1.10.2-notes.rst PyArray_IS_F_CONTIGUOUS. You may want to regenerate swigged files using the updated numpy.i Deprecate views changing dimensions in fortran order ---------------------------------------------------- This deprecates assignment of a new descriptor to the dtype attribute of * gh-6532 numpy.inner return wrong inaccurate value sometimes. * gh-6563 Intent(out) broken in recent versions of f2py. * gh-6569 Cannot run tests after 'python setup.py build_ext -i' * gh-6572 Error in broadcasting stride_tricks array component. * gh-6575 BUG: Split produces empty arrays with wrong number of dimensions dataRST/numpy/1.10.4-notes.rst bugs in the toolchain we use to generate those files. Hopefully that problem will be fixed for the next release. In the meantime,we suggest using one of the providers of windows binaries. Compatibility notes =================== dataRST/numpy/1.11.0-notes.rst versions for float types. The results should be marginally more accurate or outright bug fixes compared to the previous results,but they may differ significantly in cases where roundoff makes a difference in the integer returned by ``floor_divide``. Some corner cases also change,for instance,NaN is always returned for both functions when the divisor is zero,fortran extension to be specified for generated temp files. For instance,the files can be specifies to be ``*.f90``. The ``verbose`` argument is also activated,it was previously ignored. * A ``dtype`` parameter has been added to ``np.random.randint`` Random ndarrays of the following types can now be generated: Random ndarrays of the following types can now be generated: - ``np.bool_``,- ``np.int8``,``np.uint8``,- ``np.int16``,``np.uint16``,- ``np.int32``,``np.uint32``,generated arrays are always in native byte order. * A new ``np.moveaxis`` function allows for moving one or more array axes to a new position by explicitly providing source and destination axes. This function should be easier to use than the current ``rollaxis`` function as well as providing more functionality. The method ``build_src.generate_a_pyrex_source`` will remain available; it has been monkeypatched by users to support Cython instead of Pyrex. It's recommended to switch to a better supported method of build Cython extensions though. ``np.broadcast`` can now be called with a single argument dataRST/numpy/1.12.0-notes.rst non-zero counts to be generated on more than just a flattened array object. BLIS support in ``numpy.distutils`` ----------------------------------- Building against the BLAS implementation provided by the BLIS library is now where expansion into polynomial coefficients is inaccurate at machine precision. New array creation function ``geomspace`` added ----------------------------------------------- The new function ``geomspace`` generates a geometric sequence. It is similar The new function ``geomspace`` generates a geometric sequence. It is similar to ``logspace``,but with start and stop specified directly: ``geomspace(start,stop)`` behaves the same as ``logspace(log10(start),log10(stop))``. New context manager for testing warnings To help people migrate their code bases from Python 2 to Python 3,the python interpreter has a handy option -3,"which issues warnings at runtime. One of its warnings is for integer division:: $ python -3 -c ""2/3"" -c:1: DeprecationWarning: classic int division dataRST/numpy/1.13.0-notes.rst approximately twice as fast as calling the functions separately. ``np.isnat`` ufunc tests for NaT special datetime and timedelta values ---------------------------------------------------------------------- The new ufunc ``np.isnat`` finds the positions of special NaT values within datetime and timedelta arrays. This is analogous to ``np.isnan``. being iterated over. ``.ndim`` property added to ``dtype`` to complement ``.shape`` -------------------------------------------------------------- For consistency with ``ndarray`` and ``broadcast``",``d.ndim`` is a shorthand for ``len(d.shape)``. To illustrate a previously undefined operation:: >>> x = np.arange(16).astype(float) >>> np.add(x[1:],x[:-1],out=x[1:]) In NumPy 1.13.0 the last line is guaranteed to be equivalent to:: >>> np.add(x[1:].copy(),x[:-1].copy(),out=x[1:]) Extensions that incorporate Fortran libraries can now be built using the free MinGW_ toolset,also under Python 3.5. This works best for extensions that only do calculations and uses the runtime modestly (reading and writing from files,for instance). Note that this does not remove the need for Mingwpy; if you make extensive use of the runtime,you will most likely run into issues_. Instead,dataRST/numpy/1.14.0-notes.rst * ``MaskedArray`` arrays now separate printed elements with commas,always print the dtype,and correctly wrap the elements of long arrays to multiple lines. If there is more than 1 dimension,"the array attributes are now printed in a new ""left-justified"" printing style. * ``recarray`` arrays no longer print a trailing space before their dtype",and Some specific loop structures which have an accelerated loop version did not release the GIL prior to NumPy 1.14.0. This oversight has been fixed. The `np.einsum` function will use BLAS when possible and optimize by default ---------------------------------------------------------------------------- are provided to generate these decimal representations. A new option ``floatmode`` has been added to ``np.set_printoptions`` and ``np.array2string``,which gives control over uniqueness and rounding of printed elements in an array. The new default is ``floatmode='maxprec'`` with ``precision=8``,which will print at most 8 fractional digits,or fewer if an dataRST/numpy/1.14.1-notes.rst * `#10610 <https://github.com/numpy/numpy/pull/10610>`__: BUG: Align type definition with generated lapack * `#10612 <https://github.com/numpy/numpy/pull/10612>`__: BUG/ENH: Improve output for structured non-void types * `#10622 <https://github.com/numpy/numpy/pull/10622>`__: BUG: deallocate recursive closure in arrayprint.py (1.14 backport) * `#10624 <https://github.com/numpy/numpy/pull/10624>`__: BUG: Correctly identify comma separated dtype strings * `#10629 <https://github.com/numpy/numpy/pull/10629>`__: BUG: deallocate recursive closure in arrayprint.py (backport... * `#10624 <https://github.com/numpy/numpy/pull/10624>`__: BUG: Correctly identify comma separated dtype strings * `#10629 <https://github.com/numpy/numpy/pull/10629>`__: BUG: deallocate recursive closure in arrayprint.py (backport... * `#10630 <https://github.com/numpy/numpy/pull/10630>`__: REL: Prepare for 1.14.1 release. dataRST/numpy/1.14.2-notes.rst * `#10726 <https://github.com/numpy/numpy/pull/10726>`__: BUG: Fix f2py generated code to work on PyPy * `#10727 <https://github.com/numpy/numpy/pull/10727>`__: BUG: Fix missing NPY_VISIBILITY_HIDDEN on npy_longdouble_to_PyLong * `#10729 <https://github.com/numpy/numpy/pull/10729>`__: DOC: Create 1.14.2 notes and changelog. dataRST/numpy/1.15.0-notes.rst ``np.flip`` can operate over multiple axes ------------------------------------------ ``np.flip`` now accepts None,or tuples of int,in its ``axis`` argument. If axis is None,it will flip over all the axes. ``histogram`` and ``histogramdd`` functions have moved to ``np.lib.histograms`` One can control over which axes a generalized ufunc operates by passing in an ``axes`` argument,a list of tuples with indices of particular axes. For instance,for a signature of ``(i,j),(j,k)->(i,k)`` appropriate for matrix multiplication,the base elements are two-dimensional matrices and these are taken to be stored in the two last axes of each argument. The corresponding For simplicity,for generalized ufuncs that operate on 1-dimensional arrays (vectors),a single integer is accepted instead of a single-element tuple,and for generalized ufuncs for which all outputs are scalars,the (empty) output tuples can be omitted. Hence,for a signature of ``(i),(i)->()`` appropriate for an inner product,one could pass in ``axes=[0,0]`` to indicate that the dataRST/numpy/1.16.0-notes.rst Integrated squared error (ISE) estimator added to ``histogram`` --------------------------------------------------------------- This method (``bins='stone'``) for optimizing the bin number is a generalization of the Scott's rule. The Scott's rule assumes the distribution is approximately Normal,while the ISE_ is a non-parametric method based on are very similar to generalized ufuncs in that they operate over core dimensions,but one could not present them as such because they were able to deal with inputs in which a dimension is missing. To support this,it is now allowed to postfix a dimension name with a question mark to indicate that the dimension does not necessarily have to be present. and `np.core.multiarray` were separate c-extension modules. They are now python wrappers to the single `np.core/_multiarray_math` c-extension module. .. _`NEP 15` : http://www.numpy.org/neps/nep-0015-merge-multiarray-umath.html ``getfield`` validity checks extended ------------------------------------- dataRST/numpy/1.16.4-notes.rst ``np.random.multinomial`` if a 0 is generated in the underlying MT19937 random stream. There is a 1 in :math:`10^{53}` chance of this occurring,and so the probability that the stream changes for any given seed is extremely small. If a 0 is encountered in the underlying generator,then the incorrect value produced (either ``np.inf`` or ``np.nan``) is now dropped. dataRST/numpy/1.17.0-notes.rst resulting in faster,more accurate transforms and better handling of datasets of prime length. See below under Improvements. * New radix sort and timsort sorting methods. It is currently not possible to choose which will be used. They are hardwired to the datatype and used when either ``stable`` or ``mergesort`` is passed as the method. See below `~RandomState.multinomial` if a ``0`` is generated in the underlying `MT19937` random stream. There is a ``1`` in :math:`10^{53}` chance of this occurring,so the probability that the stream changes for any given seed is extremely small. If a ``0`` is encountered in the underlying generator,then the incorrect value produced (either `numpy.inf` or `distutils` now uses an environment variable,comma-separated and case insensitive,to determine the detection order for BLAS libraries. By default ``NPY_BLAS_ORDER=mkl,blis,openblas,atlas,accelerate,blas``. However,to force the use of OpenBLAS simply do:: NPY_BLAS_ORDER=openblas python setup.py build By default ``NPY_BLAS_ORDER=mkl,blis,openblas,atlas,accelerate,blas``. However,to force the use of OpenBLAS simply do:: NPY_BLAS_ORDER=openblas python setup.py build which forces the use of OpenBLAS. This may be helpful for users which have a MKL installation but wishes to try ``numpy.distutils`` now uses an environment variable,comma-separated and case insensitive,to determine the detection order for LAPACK libraries. By default ``NPY_LAPACK_ORDER=mkl,openblas,flame,atlas,accelerate,lapack``. However,to force the use of OpenBLAS simply do:: NPY_LAPACK_ORDER=openblas python setup.py build By default ``NPY_LAPACK_ORDER=mkl,openblas,flame,atlas,accelerate,lapack``. However,to force the use of OpenBLAS simply do:: NPY_LAPACK_ORDER=openblas python setup.py build which forces the use of OpenBLAS. This may be helpful for users which have a MKL installation but wishes to try dataRST/numpy/1.17.1-notes.rst * `#14301 <https://github.com/numpy/numpy/pull/14301>`__: BUG: Fix leak in the f2py-generated module init and `PyMem_Del`... * `#14302 <https://github.com/numpy/numpy/pull/14302>`__: BUG: Fix formatting error in exception message * `#14307 <https://github.com/numpy/numpy/pull/14307>`__: MAINT: random: Match type of SeedSequence.pool_size to DEFAULT_POOL_SIZE. * `#14308 <https://github.com/numpy/numpy/pull/14308>`__: BUG: Fix numpy.random bug in platform detection * `#14309 <https://github.com/numpy/numpy/pull/14309>`__: ENH: Enable huge pages in all Linux builds dataRST/numpy/1.18.0-notes.rst `numpy.random.Generator`. This method generates random variates from the multivariate hypergeometric probability distribution. (`gh-13794 <https://github.com/numpy/numpy/pull/13794>`__) Deprecations ============ ``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) The ``axis`` argument to ``numpy.ma.mask_cols`` and ``numpy.ma.mask_row`` is deprecated dataRST/numpy/1.19.0-notes.rst generated by ``dirichlet`` in this case will be different from previous releases. (`gh-14924 <https://github.com/numpy/numpy/pull/14924>`__) Scalar promotion in ``PyArray_ConvertToCommonType`` --------------------------------------------------- dataRST/numpy/1.20.0-notes.rst a separate 1-D array for every combination of the other indexes. For example,it is now possible to permute the rows or columns of a 2-D array. (`gh-15121 <https://github.com/numpy/numpy/pull/15121>`__) ``sliding_window_view`` provides a sliding window view for numpy arrays ----------------------------------------------------------------------- ``pv``,"and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) Compatibility notes f2py generated code may return unicode instead of byte strings -------------------------------------------------------------- Some byte strings previously returned by f2py generated code may now be unicode strings. This results from the ongoing Python2 -> Python3 cleanup. (`gh-17068 <https://github.com/numpy/numpy/pull/17068>`__) Some byte strings previously returned by f2py generated code may now be unicode strings. This results from the ongoing Python2 -> Python3 cleanup. (`gh-17068 <https://github.com/numpy/numpy/pull/17068>`__) The first element of the ``__array_interface__[""data""]`` tuple must be an integer ---------------------------------------------------------------------------------- New ``__f2py_numpy_version__`` attribute for f2py generated modules. -------------------------------------------------------------------- Because f2py is released together with NumPy",``__f2py_numpy_version__`` provides a way to track the version f2py used to generate the module. (`gh-16594 <https://github.com/numpy/numpy/pull/16594>`__) provides a way to track the version f2py used to generate the module. (`gh-16594 <https://github.com/numpy/numpy/pull/16594>`__) ``mypy`` tests can be run via runtests.py ----------------------------------------- Currently running mypy with the NumPy stubs configured requires That will use any of the accelerated libraries instead. (`gh-17219 <https://github.com/numpy/numpy/pull/17219>`__) Allow passing optimizations arguments to asv build -------------------------------------------------- It is now possible to pass ``-j``,``--cpu-baseline``,``--cpu-dispatch`` and Remove the Accelerate library as a candidate LAPACK library ----------------------------------------------------------- Apple no longer supports Accelerate. Remove it. (`gh-15759 <https://github.com/numpy/numpy/pull/15759>`__) Object arrays containing multi-line objects have a more readable ``repr`` Apple no longer supports Accelerate. Remove it. (`gh-15759 <https://github.com/numpy/numpy/pull/15759>`__) Object arrays containing multi-line objects have a more readable ``repr`` ------------------------------------------------------------------------- If elements of an object array have a ``repr`` containing new lines,then the - **New auto-generated C header ``core/src/common/_cpu_dispatch.h``** This header is generated by the distutils module ``ccompiler_opt``,and contains all the #definitions and headers of instruction sets,that had been configured through command arguments '--cpu-baseline' and '--cpu-dispatch'. - **New C header ``core/src/common/npy_cpu_dispatch.h``** This header is generated by the distutils module ``ccompiler_opt``,and contains all the #definitions and headers of instruction sets,that had been configured through command arguments '--cpu-baseline' and '--cpu-dispatch'. - **New C header ``core/src/common/npy_cpu_dispatch.h``** This header contains all utilities that required for the whole CPU dataRST/numpy/1.21.0-notes.rst and silently swapped,so that if ``low > high``,the value generated was ``high + (low - high) * random()``. (`gh-17921 <https://github.com/numpy/numpy/pull/17921>`__) ``/usr/include`` removed from default include paths --------------------------------------------------- version,which allows the compiler to generate code that does not set floating point warnings/errors correctly. (`gh-19049 <https://github.com/numpy/numpy/pull/19049>`__) C API changes ============= When ``np.unique`` operated on an array with multiple ``NaN`` entries,its return included a ``NaN`` for each entry that was ``NaN`` in the original array. This is now improved such that the returned array contains just one ``NaN`` as the last element. Also for complex arrays all ``NaN`` values are considered equivalent This change breaks the stream of variates generated when variates from either of these distributions are produced. (`gh-18666 <https://github.com/numpy/numpy/pull/18666>`__) Placeholder annotations have been improved ------------------------------------------ Enable Accelerate Framework ---------------------------- With the release of macOS 11.3,several different issues that numpy was encountering when using Accelerate Framework's implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an encountering when using Accelerate Framework's implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found,please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found,please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries. (`gh-18874 <https://github.com/numpy/numpy/pull/18874>`__) dataRST/numpy/1.22.0-notes.rst Generate C/C++ API reference documentation from comments blocks is now possible ------------------------------------------------------------------------------- This feature depends on Doxygen_ in the generation process and on Breathe_ to integrate it with Sphinx. .. _`Doxygen`: https://www.doxygen.nl/index.html integrate it with Sphinx. .. _`Doxygen`: https://www.doxygen.nl/index.html .. _`Breathe`: https://breathe.readthedocs.io/en/latest/ (`gh-18884 <https://github.com/numpy/numpy/pull/18884>`__) Assign the platform-specific ``c_intp`` precision via a mypy plugin dataRST/numpy/1.22.2-notes.rst * `#20982 <https://github.com/numpy/numpy/pull/20982>`__: MAINT: f2py: don't generate code that triggers ``-Wsometimes-uninitialized``. * `#20983 <https://github.com/numpy/numpy/pull/20983>`__: BUG: Fix incorrect return type in reduce without initial value * `#20984 <https://github.com/numpy/numpy/pull/20984>`__: ENH: review return values for PyArray_DescrNew * `#20985 <https://github.com/numpy/numpy/pull/20985>`__: MAINT: be more tolerant of setuptools >= 60 * `#20986 <https://github.com/numpy/numpy/pull/20986>`__: BUG: Fix misplaced return. dataRST/numpy/1.3.0-notes.rst Separate core math library -------------------------- The core math functions (sin,cos,etc... for basic C types) have been put into a separate library; it acts as a compatibility layer,to support most C99 maths functions (real only for now). The library includes platform-specific fixes for a separate library; it acts as a compatibility layer,to support most C99 maths functions (real only for now). The library includes platform-specific fixes for various maths functions,such as using those versions should be more robust than using your platform functions directly. The API for existing functions is exactly the same as the C99 math functions API; the only difference is the npy dataRST/numpy/1.4.0-notes.rst iterate over the items in a neighborhood of an array,and can handle boundaries conditions automatically. Zero and one padding are available,as well as arbitrary constant value,mirror and circular padding. New polynomial support ---------------------- #. PyArray_NeighborhoodIterNew - a new iterator to iterate over a neighborhood of a point,with automatic boundaries handling. It is documented in the iterators section of the C-API reference,and you can find some examples in the multiarray_test.c.src file in numpy.core. New ufuncs the decorated test. #. assert_array_almost_equal_nulps: new method to compare two arrays of floating point values. With this function,two values are considered close if there are not many representable floating point values in between,thus being more robust than assert_array_almost_equal when the #. assert_warns: raise an AssertionError if a callable does not generate a warning of the appropriate class,without altering the warning state. Reusing npymath --------------- In 1.3.0,we started putting portable C math routines in npymath library,so The source code of multiarray and umath has been split into separate logic compilation units. This should make the source code more amenable for newcomers. Separate compilation -------------------- Separate compilation -------------------- By default,every file of multiarray (and umath) is merged into one for compilation as was the case before,but if NPY_SEPARATE_COMPILATION env variable is set to a non-negative value,experimental individual compilation of compilation as was the case before,but if NPY_SEPARATE_COMPILATION env variable is set to a non-negative value,experimental individual compilation of each file is enabled. This makes the compile/debug cycle much faster when working on core numpy. Separate core math library Separate core math library -------------------------- New functions which have been added: * npy_copysign * npy_nextafter dataRST/numpy/1.5.0-notes.rst small/large values,the result is often more accurate than that obtained by simple multiplication. new header ---------- The new header file ndarraytypes.h contains the symbols from * A trimdeg method has been added to the Polynomial class. It operates like truncate except that the argument is the desired degree of the result,not the number of coefficients. * Polynomial.fit now uses None as the default domain for the fit. The default Polynomial domain can be specified by using [] as the domain value. * A trimdeg method has been added to the Chebyshev class. It operates like truncate except that the argument is the desired degree of the result,not the number of coefficients. * Chebyshev.fit now uses None as the default domain for the fit. The default Chebyshev domain can be specified by using [] as the domain value. dataRST/numpy/1.7.0-notes.rst A generic sampling function has been added which will generate samples from a given array-like. The samples can be with or without replacement,and with uniform or given non-uniform probabilities. New function isclose -------------------- converted to the array type (of possibly larger size) as illustrated by the following examples:: >>> (np.zeros((2,),dtype=np.uint8) + np.int16(257)).dtype dtype('uint16') >>> (np.zeros((2,),dtype=np.int8) + np.uint16(257)).dtype dataRST/numpy/1.8.0-notes.rst Numpy has switched its build system to using 'separate compilation' by default. In previous releases this was supported,but not default. This should produce the same results as the old system,but if you're trying to do something complicated like link numpy statically or using an unusual compiler,then it's possible you will encounter problems. If so,please system by exporting the shell variable NPY_SEPARATE_COMPILATION=0. For the AdvancedNew iterator the ``oa_ndim`` flag should now be -1 to indicate that no ``op_axes`` and ``itershape`` are passed in. The ``oa_ndim == 0`` case,now indicates a 0-D iteration and ``op_axes`` being NULL and the old usage is deprecated. This does not effect the ``NpyIter_New`` or is more accurate,allows for faster code that makes fewer unnecessary copies,and simplifies numpy's code internally. However,it may also break third-party libraries that make too-strong assumptions about the stride values of C- and F-contiguous arrays. (It is also currently known that this breaks Cython code using memoryviews,which will be The separate compilation mode is now enabled by default. Several changes to np.insert and np.delete: * Previously,negative indices and indices that pointed past the end of the array were simply ignored. Now,this will raise a Future or Deprecation Warning. In the future they will be treated like normal indexing treats generate an error. * Previously,boolean indices were treated as if they were integers (always referring to either the 0th or 1st item in the array). In the future,they will be treated as masks. In this release,they raise a FutureWarning warning of this coming change. dataRST/numpy/1.8.1-notes.rst cases the arrays being iterated are as large as the iterator so that such a problem cannot occur. Optional reduced verbosity for np.distutils ------------------------------------------- Set ``numpy.distutils.system_info.system_info.verbosity = 0`` and then dataRST/numpy/1.9.0-notes.rst A bug in one of the algorithms to generate a binomial random variate has been fixed. This change will likely alter the number of random draws performed,and hence the sequence location will be different after a call to distribution.c::rk_binomial_btpe. Any tests which rely on the RNG being in a known state should be checked and/or updated as a result. cases the arrays being iterated are as large as the iterator so that such a problem cannot occur. This change was already applied to the 1.8.1 release. ``zeros_like`` for string dtypes now returns empty strings ---------------------------------------------------------- dataRST/numpy/1.9.1-notes.rst * gh-4007: workaround Accelerate sgemv crash on OSX 10.9 * gh-5100: restore object dtype inference from iterable objects without `len()` * gh-5163: avoid gcc-4.1.2 (red hat 5) miscompilation causing a crash * gh-5138: fix nanmedian on arrays containing inf * gh-5240: fix not returning out array from ufuncs with subok=False set
numpy.irr,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['numpy-financial <https://pypi.org/project/numpy-financial>'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.13.0-notes.rst This behavior mirrors that of np.ndarray,and accounts for nested arrays in MaskedArrays of object dtype,and ellipsis combined with other forms of indexing. C API changes ============= dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) dataRST/numpy/1.4.0-notes.rst arbitrary constant value,mirror and circular padding. New polynomial support ---------------------- New modules chebyshev and polynomial have been added. The new polynomial module is not compatible with the current polynomial support in numpy,but is much dataRST/numpy/1.8.0-notes.rst fix changes the returned value. The mirr function called the npv function,but worked around the problem,so that was also fixed and the return value of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers ------------------------------------------- of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers ------------------------------------------- Comparing ``NaN`` floating point numbers now raises the ``invalid`` runtime warning. If a ``NaN`` is expected the warning can be ignored using np.errstate. dataRST/numpy/1.8.1-notes.rst * gh-4253: IRR was returning nan instead of valid negative answer * gh-4254: fix unnecessary byte order flag change for byte arrays * gh-3263: numpy.random.shuffle clobbers mask of a MaskedArray * gh-4270: np.random.shuffle not work with flexible dtypes * gh-3173: Segmentation fault when 'size' argument to random.multinomial,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.npv,numpy-financial <https://pypi.org/project/numpy-financial>,1,1,1,['axis'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.18.0-notes.rst ``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) The ``axis`` argument to ``numpy.ma.mask_cols`` and ``numpy.ma.mask_row`` is deprecated dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) dataRST/numpy/1.8.0-notes.rst Fix to financial.npv -------------------- The npv function had a bug. Contrary to what the documentation stated,it summed from indexes ``1`` to ``M`` instead of from ``0`` to ``M - 1``. The fix changes the returned value. The mirr function called the npv function,The npv function had a bug. Contrary to what the documentation stated,it summed from indexes ``1`` to ``M`` instead of from ``0`` to ``M - 1``. The fix changes the returned value. The mirr function called the npv function,but worked around the problem,so that was also fixed and the return value of the mirr function remains unchanged. fix changes the returned value. The mirr function called the npv function,but worked around the problem,so that was also fixed and the return value of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers -------------------------------------------,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.mirr,numpy_financial.mirr,1,1,1,['numpy-financial <https://pypi.org/project/numpy-financial>'] ['numpy_financial <https://pypi.org/project/numpy-financial>'],dataRST/numpy/1.13.0-notes.rst This behavior mirrors that of np.ndarray,and accounts for nested arrays in MaskedArrays of object dtype,and ellipsis combined with other forms of indexing. C API changes ============= dataRST/numpy/1.18.0-notes.rst the financial functions ``fv`` ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv`` and ``rate`` are deprecated,and will be removed from NumPy 1.20.The replacement for these functions is the Python package `numpy-financial <https://pypi.org/project/numpy-financial>`_. (`gh-14720 <https://github.com/numpy/numpy/pull/14720>`__) dataRST/numpy/1.20.0-notes.rst ``ipmt``,``irr``,``mirr``,``nper``,``npv``,``pmt``,``ppmt``,``pv``,and ``rate``. These functions are available in the `numpy_financial <https://pypi.org/project/numpy-financial>`_ library. (`gh-17067 <https://github.com/numpy/numpy/pull/17067>`__) dataRST/numpy/1.4.0-notes.rst arbitrary constant value,mirror and circular padding. New polynomial support ---------------------- New modules chebyshev and polynomial have been added. The new polynomial module is not compatible with the current polynomial support in numpy,but is much dataRST/numpy/1.8.0-notes.rst fix changes the returned value. The mirr function called the npv function,but worked around the problem,so that was also fixed and the return value of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers ------------------------------------------- of the mirr function remains unchanged. Runtime warnings when comparing NaN numbers ------------------------------------------- Comparing ``NaN`` floating point numbers now raises the ``invalid`` runtime warning. If a ``NaN`` is expected the warning can be ignored using np.errstate.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.PolyBase,ABCPolyBase,1,1,1,['ABCPolyBase'] ['ABCPolyBase'] ['ABCPolyBase'],dataRST/numpy/1.13.0-notes.rst The ABCPolyBase class,from which the convenience classes are derived,sets ``__array_ufun__ = None`` in order of opt out of ufuncs. If a polynomial convenience class instance is passed as an argument to a ufunc,a ``TypeError`` will now be raised. Output arguments to ufuncs can be tuples also for ufunc methods dataRST/numpy/1.20.0-notes.rst ``nickname`` attribute removed from ABCPolyBase ----------------------------------------------- An abstract property ``nickname`` has been removed from ``ABCPolyBase`` as it was no longer used in the derived convenience classes. This may affect users who have derived classes from ``ABCPolyBase`` and An abstract property ``nickname`` has been removed from ``ABCPolyBase`` as it was no longer used in the derived convenience classes. This may affect users who have derived classes from ``ABCPolyBase`` and overridden the methods for representation and display,e.g. ``__str__``,``__repr__``,``_repr_latex``,etc. This may affect users who have derived classes from ``ABCPolyBase`` and overridden the methods for representation and display,e.g. ``__str__``,``__repr__``,``_repr_latex``,etc. (`gh-16589 <https://github.com/numpy/numpy/pull/16589>`__) ``float->timedelta`` and ``uint64->timedelta`` promotion will raise a TypeError dataRST/numpy/1.21.0-notes.rst * The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please use the abstract ``ABCPolyBase`` class instead. (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__) * The unused ``PolyError`` and ``PolyDomainError`` exceptions are removed. use the abstract ``ABCPolyBase`` class instead. (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__) * The unused ``PolyError`` and ``PolyDomainError`` exceptions are removed. (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__) Remove deprecated ``PolyBase`` and unused ``PolyError`` and ``PolyDomainError`` ------------------------------------------------------------------------------- The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please use the abstract ``ABCPolyBase`` class instead. Furthermore,the unused ``PolyError`` and ``PolyDomainError`` exceptions are The class ``PolyBase`` has been removed (deprecated in numpy 1.9.0). Please use the abstract ``ABCPolyBase`` class instead. Furthermore,the unused ``PolyError`` and ``PolyDomainError`` exceptions are removed from the `numpy.polynomial`. (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__) the abstract ``ABCPolyBase`` class instead. Furthermore,the unused ``PolyError`` and ``PolyDomainError`` exceptions are removed from the `numpy.polynomial`. (`gh-18963 <https://github.com/numpy/numpy/pull/18963>`__) Compatibility notes dataRST/numpy/1.9.0-notes.rst Polynomial Classes no longer derived from PolyBase -------------------------------------------------- This may cause problems with folks who depended on the polynomial classes being derived from PolyBase. They are now all derived from the abstract base class ABCPolyBase. Strictly speaking,there should be a deprecation being derived from PolyBase. They are now all derived from the abstract base class ABCPolyBase. Strictly speaking,there should be a deprecation involved,but no external code making use of the old baseclass could be found. Using numpy.random.binomial may change the RNG state vs. numpy < 1.9 base class ABCPolyBase. Strictly speaking,there should be a deprecation involved,but no external code making use of the old baseclass could be found. Using numpy.random.binomial may change the RNG state vs. numpy < 1.9 --------------------------------------------------------------------,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.typeDict,np.sctypeDict,1,1,1,['~numpy.ctypeslib.load_library'] ['np.sctypeDict'] ['np.sctypeDict'],dataRST/numpy/1.20.0-notes.rst have been removed from the public API. Use ``np.typeDict`` instead. (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__) * The 14-year deprecation of ``np.ctypeslib.ctypes_load_library`` is expired. Use :func:`~numpy.ctypeslib.load_library` instead,"which is identical. (`gh-17116 <https://github.com/numpy/numpy/pull/17116>`__) from ``np.sctypeDict`` and ``np.typeDict``. You should use the lower case versions instead. Note that ``""Complex64""`` corresponds to ``""complex128""`` and ``""Complex32""`` corresponds to ``""complex64""``. The numpy style (new) versions",denote the full size and not the size of the real/imaginary part. dataRST/numpy/1.21.0-notes.rst ``np.typeDict`` has been formally deprecated -------------------------------------------- ``np.typeDict`` is a deprecated alias for ``np.sctypeDict`` and has been so for over 14 years (6689502_). A deprecation warning will now be issued whenever getting ``np.typeDict``. ``np.typeDict`` is a deprecated alias for ``np.sctypeDict`` and has been so for over 14 years (6689502_). A deprecation warning will now be issued whenever getting ``np.typeDict``. .. _6689502: https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d (`gh-17586 <https://github.com/numpy/numpy/pull/17586>`__) A deprecation warning will now be issued whenever getting ``np.typeDict``. .. _6689502: https://github.com/numpy/numpy/commit/668950285c407593a368336ff2e737c5da84af7d (`gh-17586 <https://github.com/numpy/numpy/pull/17586>`__) Exceptions will be raised during array-like creation ----------------------------------------------------,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy._ctypes.get_data,_ctypes.data,1,1,1,['_ctypes.data'],dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_data`` (use ``_ctypes.data`` instead) * ``_ctypes.get_shape`` (use ``_ctypes.shape`` instead) * ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead) * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead) (`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy._ctypes.get_shape,_ctypes.shape,1,1,1,['_ctypes.shape'],dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_shape`` (use ``_ctypes.shape`` instead) * ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead) * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead) (`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__) Expired deprecations,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy._ctypes.get_strides,_ctypes.strides,1,1,1,['_ctypes.strides'],dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_strides`` (use ``_ctypes.strides`` instead) * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead) (`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__) Expired deprecations ====================,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy._ctypes.get_as_parameter,_ctypes._as_parameter_`,1,1,1,['_ctypes._as_parameter_'],dataRST/numpy/1.21.0-notes.rst * ``_ctypes.get_as_parameter`` (use ``_ctypes._as_parameter_`` instead) (`gh-19031 <https://github.com/numpy/numpy/pull/19031>`__) Expired deprecations ==================== * The ``shape`` argument `numpy.unravel_index` cannot be passed,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.random.random_integers,np.random.randint,1,1,1,['np.random.randint'],dataRST/numpy/1.11.0-notes.rst interval over the closed one,``np.random.random_integers`` is being deprecated in favor of calling ``np.random.randint``,"which has been enhanced with the ``dtype`` parameter as described under ""New Features"". However",``np.random.random_integers`` will not be removed anytime soon. FutureWarnings However,``np.random.random_integers`` will not be removed anytime soon. FutureWarnings ============== Assigning to slices/views of ``MaskedArray`` --------------------------------------------,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.MaskedArray.mini,np.ma.minimum.reduce,1,1,1,['np.ma.minimum.reduce'],dataRST/numpy/1.13.0-notes.rst * ``np.ma.MaskedArray.mini`` is deprecated,as it almost duplicates the functionality of ``np.MaskedArray.min``. Exactly equivalent behaviour can be obtained with ``np.ma.minimum.reduce``. * The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` is deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.lib.function_base.unique,numpy.unique,1,1,1,['numpy.unique'],dataRST/numpy/1.16.0-notes.rst * ``np.lib.function_base.unique`` was removed,finishing a deprecation cycle begun in NumPy 1.4. Use `numpy.unique` instead. * multi-field indexing now returns views instead of copies,finishing a deprecation cycle begun in NumPy 1.7. The change was previously attempted in NumPy 1.14 but reverted until now.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.rank,np.ndim,1,1,1,['np.ndim'],dataRST/numpy/1.18.0-notes.rst * ``np.rank`` has been removed. This was deprecated in NumPy 1.10 and has been replaced by ``np.ndim``. (`gh-14039 <https://github.com/numpy/numpy/pull/14039>`__) * The deprecation of ``expand_dims`` out-of-range axes in 1.13.0 has expired.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.testing.rand,np.random.rand,1,1,1,['np.random.rand'],dataRST/numpy/1.18.0-notes.rst * ``np.testing.rand`` has been removed. This was deprecated in NumPy 1.11 and has been replaced by ``np.random.rand``. (`gh-14325 <https://github.com/numpy/numpy/pull/14325>`__) * Class ``SafeEval`` in ``numpy/lib/utils.py`` has been removed. This was deprecated in NumPy 1.10. Use ``np.safe_eval`` instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ndarray.tostring,tobytes,1,1,1,['tobytes()'],dataRST/numpy/1.19.0-notes.rst ``numpy.ndarray.tostring()`` is deprecated in favor of ``tobytes()`` -------------------------------------------------------------------- ``~numpy.ndarray.tobytes`` has existed since the 1.9 release,but until this release ``~numpy.ndarray.tostring`` emitted no warning. The change to emit a warning brings NumPy in line with the builtin ``array.array`` methods of the release ``~numpy.ndarray.tostring`` emitted no warning. The change to emit a warning brings NumPy in line with the builtin ``array.array`` methods of the same name. (`gh-15867 <https://github.com/numpy/numpy/pull/15867>`__) C API changes,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.sctypeNA,np.typeDict,1,1,1,['np.typeDict'],dataRST/numpy/1.20.0-notes.rst * The deprecation of ``np.sctypeNA`` and ``np.typeNA`` is expired. Both have been removed from the public API. Use ``np.typeDict`` instead. (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__) * The 14-year deprecation of ``np.ctypeslib.ctypes_load_library`` is expired. Use :func:`~numpy.ctypeslib.load_library` instead,which is identical.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.typeNA,np.typeDict,1,1,1,['np.typeDict'],dataRST/numpy/1.20.0-notes.rst * The deprecation of ``np.sctypeNA`` and ``np.typeNA`` is expired. Both have been removed from the public API. Use ``np.typeDict`` instead. (`gh-16554 <https://github.com/numpy/numpy/pull/16554>`__) * The 14-year deprecation of ``np.ctypeslib.ctypes_load_library`` is expired. Use :func:`~numpy.ctypeslib.load_library` instead,which is identical.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
numpy.ma.MaskedArray.mini,np.ma.minimum.reduce,1,1,1,['np.ma.minimum.reduce'],dataRST/numpy/1.13.0-notes.rst * ``np.ma.MaskedArray.mini`` is deprecated,as it almost duplicates the functionality of ``np.MaskedArray.min``. Exactly equivalent behaviour can be obtained with ``np.ma.minimum.reduce``. * The single-argument form of ``np.ma.minimum`` and ``np.ma.maximum`` is deprecated. ``np.maximum``. ``np.ma.minimum(x)`` should now be spelt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,44,38,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,